var snapshot = {
  "es5": {
    "0": {
      type: "Program",
      start: 0,
      end: 1,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 1,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            },
            value: 0,
            raw: "0"
          }
        }
      ]
    },
    "3": {
      type: "Program",
      start: 0,
      end: 1,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 1,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            },
            value: 3,
            raw: "3"
          }
        }
      ]
    },
    "5": {
      type: "Program",
      start: 0,
      end: 1,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 1,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            },
            value: 5,
            raw: "5"
          }
        }
      ]
    },
    "42": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "this\n": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 0
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "ThisExpression",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            }
          }
        }
      ]
    },
    "null\n": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 0
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: null,
            raw: "null"
          }
        }
      ]
    },
    "\n    42\n\n": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 4,
          column: 0
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 5,
          end: 7,
          loc: {
            start: {
              line: 2,
              column: 4
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 5,
            end: 7,
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/foobar/": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            value: {},
            raw: "/foobar/",
            regex: {
              pattern: "foobar",
              flags: ""
            }
          }
        }
      ]
    },
    "/[a-z]/g": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            value: {},
            raw: "/[a-z]/g",
            regex: {
              pattern: "[a-z]",
              flags: "g"
            }
          }
        }
      ]
    },
    "(1 + 2 ) * 3": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            left: {
              type: "BinaryExpression",
              start: 1,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              left: {
                type: "Literal",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                value: 1,
                raw: "1"
              },
              operator: "+",
              right: {
                type: "Literal",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                value: 2,
                raw: "2"
              }
            },
            operator: "*",
            right: {
              type: "Literal",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              value: 3,
              raw: "3"
            }
          }
        }
      ]
    },
    "x = []": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "x = [ ]": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "x = [ 42 ]": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              elements: [
                {
                  type: "Literal",
                  start: 6,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  value: 42,
                  raw: "42"
                }
              ]
            }
          }
        }
      ]
    },
    "x = [ 42, ]": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              elements: [
                {
                  type: "Literal",
                  start: 6,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  value: 42,
                  raw: "42"
                }
              ]
            }
          }
        }
      ]
    },
    "x = [ ,, 42 ]": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              elements: [
                null,
                null,
                {
                  type: "Literal",
                  start: 9,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  value: 42,
                  raw: "42"
                }
              ]
            }
          }
        }
      ]
    },
    "x = [ 1, 2, 3, ]": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              elements: [
                {
                  type: "Literal",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 7
                    }
                  },
                  value: 1,
                  raw: "1"
                },
                {
                  type: "Literal",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  value: 2,
                  raw: "2"
                },
                {
                  type: "Literal",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  value: 3,
                  raw: "3"
                }
              ]
            }
          }
        }
      ]
    },
    "x = [ 1, 2,, 3, ]": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              elements: [
                {
                  type: "Literal",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 7
                    }
                  },
                  value: 1,
                  raw: "1"
                },
                {
                  type: "Literal",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  value: 2,
                  raw: "2"
                },
                null,
                {
                  type: "Literal",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  value: 3,
                  raw: "3"
                }
              ]
            }
          }
        }
      ]
    },
    "日本語 = []": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "日本語"
            },
            right: {
              type: "ArrayExpression",
              start: 6,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "T‿ = []": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "T‿"
            },
            right: {
              type: "ArrayExpression",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "T‌ = []": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "T‌"
            },
            right: {
              type: "ArrayExpression",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "T‍ = []": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "T‍"
            },
            right: {
              type: "ArrayExpression",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "ⅣⅡ = []": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "ⅣⅡ"
            },
            right: {
              type: "ArrayExpression",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "ⅣⅡ = []": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "ⅣⅡ"
            },
            right: {
              type: "ArrayExpression",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "x = {}": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              properties: []
            }
          }
        }
      ]
    },
    "x = { }": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              properties: []
            }
          }
        }
      ]
    },
    "x = { answer: 42 }": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    name: "answer"
                  },
                  value: {
                    type: "Literal",
                    start: 14,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    value: 42,
                    raw: "42"
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ]
    },
    "x = { if: 42 }": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    name: "if"
                  },
                  value: {
                    type: "Literal",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    value: 42,
                    raw: "42"
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ]
    },
    "x = { true: 42 }": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    name: "true"
                  },
                  value: {
                    type: "Literal",
                    start: 12,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    value: 42,
                    raw: "42"
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ]
    },
    "x = { false: 42 }": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 11,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 11
                      }
                    },
                    name: "false"
                  },
                  value: {
                    type: "Literal",
                    start: 13,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    value: 42,
                    raw: "42"
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ]
    },
    "x = { null: 42 }": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    name: "null"
                  },
                  value: {
                    type: "Literal",
                    start: 12,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    value: 42,
                    raw: "42"
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ]
    },
    "x = { \"answer\": 42 }": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  key: {
                    type: "Literal",
                    start: 6,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    value: "answer",
                    raw: "\"answer\""
                  },
                  value: {
                    type: "Literal",
                    start: 16,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    value: 42,
                    raw: "42"
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ]
    },
    "x = { x: 1, x: 2 }": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    name: "x"
                  },
                  value: {
                    type: "Literal",
                    start: 9,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    value: 1,
                    raw: "1"
                  },
                  kind: "init"
                },
                {
                  type: "Property",
                  start: 12,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 12,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    name: "x"
                  },
                  value: {
                    type: "Literal",
                    start: 15,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    value: 2,
                    raw: "2"
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get width() { return m_width } }": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 38
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 38,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 38
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "width"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 15,
                    end: 36,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 36
                      }
                    },
                    id: null,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 18,
                      end: 36,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 36
                        }
                      },
                      body: [
                        {
                          type: "ReturnStatement",
                          start: 20,
                          end: 34,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 34
                            }
                          },
                          argument: {
                            type: "Identifier",
                            start: 27,
                            end: 34,
                            loc: {
                              start: {
                                line: 1,
                                column: 27
                              },
                              end: {
                                line: 1,
                                column: 34
                              }
                            },
                            name: "m_width"
                          }
                        }
                      ]
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get undef() {} }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 22
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "undef"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 15,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    id: null,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 18,
                      end: 20,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 20
                        }
                      },
                      body: []
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get if() {} }": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 19
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    name: "if"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    id: null,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 15,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      body: []
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get true() {} }": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 21
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    name: "true"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 14,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    id: null,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 17,
                      end: 19,
                      loc: {
                        start: {
                          line: 1,
                          column: 17
                        },
                        end: {
                          line: 1,
                          column: 19
                        }
                      },
                      body: []
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get false() {} }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 22
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "false"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 15,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    id: null,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 18,
                      end: 20,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 20
                        }
                      },
                      body: []
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get null() {} }": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 21
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    name: "null"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 14,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    id: null,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 17,
                      end: 19,
                      loc: {
                        start: {
                          line: 1,
                          column: 17
                        },
                        end: {
                          line: 1,
                          column: 19
                        }
                      },
                      body: []
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get \"undef\"() {} }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 24
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  key: {
                    type: "Literal",
                    start: 10,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    value: "undef",
                    raw: "\"undef\""
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 17,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    id: null,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 20,
                      end: 22,
                      loc: {
                        start: {
                          line: 1,
                          column: 20
                        },
                        end: {
                          line: 1,
                          column: 22
                        }
                      },
                      body: []
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get 10() {} }": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 19
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  key: {
                    type: "Literal",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    value: 10,
                    raw: "10"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    id: null,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 15,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      body: []
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set width(w) { m_width = w } }": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 36
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "width"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 15,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 16,
                        end: 17,
                        loc: {
                          start: {
                            line: 1,
                            column: 16
                          },
                          end: {
                            line: 1,
                            column: 17
                          }
                        },
                        name: "w"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 19,
                      end: 34,
                      loc: {
                        start: {
                          line: 1,
                          column: 19
                        },
                        end: {
                          line: 1,
                          column: 34
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 21,
                          end: 32,
                          loc: {
                            start: {
                              line: 1,
                              column: 21
                            },
                            end: {
                              line: 1,
                              column: 32
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 21,
                            end: 32,
                            loc: {
                              start: {
                                line: 1,
                                column: 21
                              },
                              end: {
                                line: 1,
                                column: 32
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 21,
                              end: 28,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 21
                                },
                                end: {
                                  line: 1,
                                  column: 28
                                }
                              },
                              name: "m_width"
                            },
                            right: {
                              type: "Identifier",
                              start: 31,
                              end: 32,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 31
                                },
                                end: {
                                  line: 1,
                                  column: 32
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set if(w) { m_if = w } }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 30
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    name: "if"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 13,
                        end: 14,
                        loc: {
                          start: {
                            line: 1,
                            column: 13
                          },
                          end: {
                            line: 1,
                            column: 14
                          }
                        },
                        name: "w"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 16,
                      end: 28,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 28
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 18,
                          end: 26,
                          loc: {
                            start: {
                              line: 1,
                              column: 18
                            },
                            end: {
                              line: 1,
                              column: 26
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 18,
                            end: 26,
                            loc: {
                              start: {
                                line: 1,
                                column: 18
                              },
                              end: {
                                line: 1,
                                column: 26
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 18,
                              end: 22,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 18
                                },
                                end: {
                                  line: 1,
                                  column: 22
                                }
                              },
                              name: "m_if"
                            },
                            right: {
                              type: "Identifier",
                              start: 25,
                              end: 26,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 25
                                },
                                end: {
                                  line: 1,
                                  column: 26
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set true(w) { m_true = w } }": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 34,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 34
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 34,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 34
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    name: "true"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 14,
                    end: 32,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 32
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 15,
                        end: 16,
                        loc: {
                          start: {
                            line: 1,
                            column: 15
                          },
                          end: {
                            line: 1,
                            column: 16
                          }
                        },
                        name: "w"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 18,
                      end: 32,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 32
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 20,
                          end: 30,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 30
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 20,
                            end: 30,
                            loc: {
                              start: {
                                line: 1,
                                column: 20
                              },
                              end: {
                                line: 1,
                                column: 30
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 20,
                              end: 26,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 20
                                },
                                end: {
                                  line: 1,
                                  column: 26
                                }
                              },
                              name: "m_true"
                            },
                            right: {
                              type: "Identifier",
                              start: 29,
                              end: 30,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 29
                                },
                                end: {
                                  line: 1,
                                  column: 30
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set false(w) { m_false = w } }": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 36
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "false"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 15,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 16,
                        end: 17,
                        loc: {
                          start: {
                            line: 1,
                            column: 16
                          },
                          end: {
                            line: 1,
                            column: 17
                          }
                        },
                        name: "w"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 19,
                      end: 34,
                      loc: {
                        start: {
                          line: 1,
                          column: 19
                        },
                        end: {
                          line: 1,
                          column: 34
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 21,
                          end: 32,
                          loc: {
                            start: {
                              line: 1,
                              column: 21
                            },
                            end: {
                              line: 1,
                              column: 32
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 21,
                            end: 32,
                            loc: {
                              start: {
                                line: 1,
                                column: 21
                              },
                              end: {
                                line: 1,
                                column: 32
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 21,
                              end: 28,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 21
                                },
                                end: {
                                  line: 1,
                                  column: 28
                                }
                              },
                              name: "m_false"
                            },
                            right: {
                              type: "Identifier",
                              start: 31,
                              end: 32,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 31
                                },
                                end: {
                                  line: 1,
                                  column: 32
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set null(w) { m_null = w } }": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 34,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 34
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 34,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 34
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    name: "null"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 14,
                    end: 32,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 32
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 15,
                        end: 16,
                        loc: {
                          start: {
                            line: 1,
                            column: 15
                          },
                          end: {
                            line: 1,
                            column: 16
                          }
                        },
                        name: "w"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 18,
                      end: 32,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 32
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 20,
                          end: 30,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 30
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 20,
                            end: 30,
                            loc: {
                              start: {
                                line: 1,
                                column: 20
                              },
                              end: {
                                line: 1,
                                column: 30
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 20,
                              end: 26,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 20
                                },
                                end: {
                                  line: 1,
                                  column: 26
                                }
                              },
                              name: "m_null"
                            },
                            right: {
                              type: "Identifier",
                              start: 29,
                              end: 30,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 29
                                },
                                end: {
                                  line: 1,
                                  column: 30
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set \"null\"(w) { m_null = w } }": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 36
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  key: {
                    type: "Literal",
                    start: 10,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    value: "null",
                    raw: "\"null\""
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 16,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 17,
                        end: 18,
                        loc: {
                          start: {
                            line: 1,
                            column: 17
                          },
                          end: {
                            line: 1,
                            column: 18
                          }
                        },
                        name: "w"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 20,
                      end: 34,
                      loc: {
                        start: {
                          line: 1,
                          column: 20
                        },
                        end: {
                          line: 1,
                          column: 34
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 22,
                          end: 32,
                          loc: {
                            start: {
                              line: 1,
                              column: 22
                            },
                            end: {
                              line: 1,
                              column: 32
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 22,
                            end: 32,
                            loc: {
                              start: {
                                line: 1,
                                column: 22
                              },
                              end: {
                                line: 1,
                                column: 32
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 22,
                              end: 28,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 22
                                },
                                end: {
                                  line: 1,
                                  column: 28
                                }
                              },
                              name: "m_null"
                            },
                            right: {
                              type: "Identifier",
                              start: 31,
                              end: 32,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 31
                                },
                                end: {
                                  line: 1,
                                  column: 32
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set 10(w) { m_null = w } }": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 32
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 32
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 32
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 32,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 32
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 30,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 30
                    }
                  },
                  key: {
                    type: "Literal",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    value: 10,
                    raw: "10"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 30,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 30
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 13,
                        end: 14,
                        loc: {
                          start: {
                            line: 1,
                            column: 13
                          },
                          end: {
                            line: 1,
                            column: 14
                          }
                        },
                        name: "w"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 16,
                      end: 30,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 30
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 18,
                          end: 28,
                          loc: {
                            start: {
                              line: 1,
                              column: 18
                            },
                            end: {
                              line: 1,
                              column: 28
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 18,
                            end: 28,
                            loc: {
                              start: {
                                line: 1,
                                column: 18
                              },
                              end: {
                                line: 1,
                                column: 28
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 18,
                              end: 24,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 18
                                },
                                end: {
                                  line: 1,
                                  column: 24
                                }
                              },
                              name: "m_null"
                            },
                            right: {
                              type: "Identifier",
                              start: 27,
                              end: 28,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 27
                                },
                                end: {
                                  line: 1,
                                  column: 28
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    },
                    expression: false
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get: 42 }": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    name: "get"
                  },
                  value: {
                    type: "Literal",
                    start: 11,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 11
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    value: 42,
                    raw: "42"
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set: 43 }": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    name: "set"
                  },
                  value: {
                    type: "Literal",
                    start: 11,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 11
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    value: 43,
                    raw: "43"
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ]
    },
    "/* block comment */ 42": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 20,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 20
            },
            end: {
              line: 1,
              column: 22
            }
          },
          expression: {
            type: "Literal",
            start: 20,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 22
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "42 /*The*/ /*Answer*/": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "42 /*the*/ /*answer*/": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/* multiline\ncomment\nshould\nbe\nignored */ 42": {
      type: "Program",
      start: 0,
      end: 44,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 5,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 42,
          end: 44,
          loc: {
            start: {
              line: 5,
              column: 11
            },
            end: {
              line: 5,
              column: 13
            }
          },
          expression: {
            type: "Literal",
            start: 42,
            end: 44,
            loc: {
              start: {
                line: 5,
                column: 11
              },
              end: {
                line: 5,
                column: 13
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/*a\r\nb*/ 42": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 9,
          end: 11,
          loc: {
            start: {
              line: 2,
              column: 4
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 9,
            end: 11,
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/*a\rb*/ 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 8,
          end: 10,
          loc: {
            start: {
              line: 2,
              column: 4
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 8,
            end: 10,
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/*a\nb*/ 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 8,
          end: 10,
          loc: {
            start: {
              line: 2,
              column: 4
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 8,
            end: 10,
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/*a\nc*/ 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 8,
          end: 10,
          loc: {
            start: {
              line: 2,
              column: 4
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 8,
            end: 10,
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "// line comment\n42": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 16,
          end: 18,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 16,
            end: 18,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "42 // line comment": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "// Hello, world!\n42": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 17,
          end: 19,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 17,
            end: 19,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "// Hello, world!\n": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 0
        }
      },
      body: []
    },
    "// Hallo, world!\n": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 0
        }
      },
      body: []
    },
    "//\n42": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 3,
          end: 5,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 3,
            end: 5,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "//": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: []
    },
    "// ": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: []
    },
    "/**/42": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 4,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 4
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 4,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "// Hello, world!\n\n//   Another hello\n42": {
      type: "Program",
      start: 0,
      end: 39,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 4,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 37,
          end: 39,
          loc: {
            start: {
              line: 4,
              column: 0
            },
            end: {
              line: 4,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 37,
            end: 39,
            loc: {
              start: {
                line: 4,
                column: 0
              },
              end: {
                line: 4,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "if (x) { // Some comment\ndoThat(); }": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 11
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 11
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 5
              }
            },
            name: "x"
          },
          consequent: {
            type: "BlockStatement",
            start: 7,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 2,
                column: 11
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 25,
                end: 34,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 9
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 25,
                  end: 33,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 8
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 25,
                    end: 31,
                    loc: {
                      start: {
                        line: 2,
                        column: 0
                      },
                      end: {
                        line: 2,
                        column: 6
                      }
                    },
                    name: "doThat"
                  },
                  arguments: []
                }
              }
            ]
          },
          alternate: null
        }
      ]
    },
    "switch (answer) { case 42: /* perfect */ bingo() }": {
      type: "Program",
      start: 0,
      end: 50,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 50
        }
      },
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 50,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 50
            }
          },
          discriminant: {
            type: "Identifier",
            start: 8,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "answer"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 18,
              end: 48,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 48
                }
              },
              consequent: [
                {
                  type: "ExpressionStatement",
                  start: 41,
                  end: 48,
                  loc: {
                    start: {
                      line: 1,
                      column: 41
                    },
                    end: {
                      line: 1,
                      column: 48
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 41,
                    end: 48,
                    loc: {
                      start: {
                        line: 1,
                        column: 41
                      },
                      end: {
                        line: 1,
                        column: 48
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 41,
                      end: 46,
                      loc: {
                        start: {
                          line: 1,
                          column: 41
                        },
                        end: {
                          line: 1,
                          column: 46
                        }
                      },
                      name: "bingo"
                    },
                    arguments: []
                  }
                }
              ],
              test: {
                type: "Literal",
                start: 23,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ]
    },
    ".14": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            value: 0.14,
            raw: ".14"
          }
        }
      ]
    },
    "3.14159": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            value: 3.14159,
            raw: "3.14159"
          }
        }
      ]
    },
    "6.02214179e+23": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            value: 6.02214179e+23,
            raw: "6.02214179e+23"
          }
        }
      ]
    },
    "1.492417830e-10": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            value: 1.49241783e-10,
            raw: "1.492417830e-10"
          }
        }
      ]
    },
    "0x0": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            value: 0,
            raw: "0x0"
          }
        }
      ]
    },
    "0e+100": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            value: 0,
            raw: "0e+100"
          }
        }
      ]
    },
    "0xabc": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            value: 2748,
            raw: "0xabc"
          }
        }
      ]
    },
    "0xdef": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            value: 3567,
            raw: "0xdef"
          }
        }
      ]
    },
    "0X1A": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 26,
            raw: "0X1A"
          }
        }
      ]
    },
    "0x10": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 16,
            raw: "0x10"
          }
        }
      ]
    },
    "0x100": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            value: 256,
            raw: "0x100"
          }
        }
      ]
    },
    "0X04": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 4,
            raw: "0X04"
          }
        }
      ]
    },
    "02": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            value: 2,
            raw: "02"
          }
        }
      ]
    },
    "012": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            value: 10,
            raw: "012"
          }
        }
      ]
    },
    "0012": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 10,
            raw: "0012"
          }
        }
      ]
    },
    "\"Hello\"": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            value: "Hello",
            raw: "\"Hello\""
          }
        }
      ]
    },
    "\"\\n\\r\\t\\v\\b\\f\\\\\\'\\\"\\0\"": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 22
              }
            },
            value: "\n\r\t\u000b\b\f\\'\"\u0000",
            raw: "\"\\n\\r\\t\\v\\b\\f\\\\\\'\\\"\\0\""
          }
        }
      ]
    },
    "\"\\u0061\"": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            value: "a",
            raw: "\"\\u0061\""
          }
        }
      ]
    },
    "\"\\x61\"": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            value: "a",
            raw: "\"\\x61\""
          }
        }
      ]
    },
    "\"Hello\\nworld\"": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            value: "Hello\nworld",
            raw: "\"Hello\\nworld\""
          }
        }
      ]
    },
    "\"Hello\\\nworld\"": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: "Helloworld",
            raw: "\"Hello\\\nworld\""
          }
        }
      ]
    },
    "\"Hello\\02World\"": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            value: "Hello\u0002World",
            raw: "\"Hello\\02World\""
          }
        }
      ]
    },
    "\"Hello\\012World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "Hello\nWorld",
            raw: "\"Hello\\012World\""
          }
        }
      ]
    },
    "\"Hello\\122World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "HelloRWorld",
            raw: "\"Hello\\122World\""
          }
        }
      ]
    },
    "\"Hello\\0122World\"": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            value: "Hello\n2World",
            raw: "\"Hello\\0122World\""
          }
        }
      ]
    },
    "\"Hello\\312World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "HelloÊWorld",
            raw: "\"Hello\\312World\""
          }
        }
      ]
    },
    "\"Hello\\412World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "Hello!2World",
            raw: "\"Hello\\412World\""
          }
        }
      ]
    },
    "\"Hello\\812World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "Hello812World",
            raw: "\"Hello\\812World\""
          }
        }
      ]
    },
    "\"Hello\\712World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "Hello92World",
            raw: "\"Hello\\712World\""
          }
        }
      ]
    },
    "\"Hello\\0World\"": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            value: "Hello\u0000World",
            raw: "\"Hello\\0World\""
          }
        }
      ]
    },
    "\"Hello\\\r\nworld\"": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: "Helloworld",
            raw: "\"Hello\\\r\nworld\""
          }
        }
      ]
    },
    "\"Hello\\1World\"": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            value: "Hello\u0001World",
            raw: "\"Hello\\1World\""
          }
        }
      ]
    },
    "var x = /[a-z]/i": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                value: {},
                raw: "/[a-z]/i",
                regex: {
                  pattern: "[a-z]",
                  flags: "i"
                }
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var x = /[x-z]/i": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                value: {},
                raw: "/[x-z]/i",
                regex: {
                  pattern: "[x-z]",
                  flags: "i"
                }
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var x = /[a-c]/i": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                value: {},
                raw: "/[a-c]/i",
                regex: {
                  pattern: "[a-c]",
                  flags: "i"
                }
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var x = /[P QR]/i": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                value: {},
                raw: "/[P QR]/i",
                regex: {
                  pattern: "[P QR]",
                  flags: "i"
                }
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var x = /foo\\/bar/": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                value: {},
                raw: "/foo\\/bar/",
                regex: {
                  pattern: "foo\\/bar",
                  flags: ""
                }
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var x = /=([^=\\s])+/g": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                value: {},
                raw: "/=([^=\\s])+/g",
                regex: {
                  pattern: "=([^=\\s])+",
                  flags: "g"
                }
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var x = /[P QR]/\\u0067": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                value: {},
                raw: "/[P QR]/\\u0067",
                regex: {
                  pattern: "[P QR]",
                  flags: "g"
                }
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "new Button": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            callee: {
              type: "Identifier",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              name: "Button"
            },
            arguments: []
          }
        }
      ]
    },
    "new Button()": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            callee: {
              type: "Identifier",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              name: "Button"
            },
            arguments: []
          }
        }
      ]
    },
    "new new foo": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            callee: {
              type: "NewExpression",
              start: 4,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              callee: {
                type: "Identifier",
                start: 8,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "foo"
              },
              arguments: []
            },
            arguments: []
          }
        }
      ]
    },
    "new new foo()": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            callee: {
              type: "NewExpression",
              start: 4,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              callee: {
                type: "Identifier",
                start: 8,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "foo"
              },
              arguments: []
            },
            arguments: []
          }
        }
      ]
    },
    "new foo().bar()": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            callee: {
              type: "MemberExpression",
              start: 0,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              object: {
                type: "NewExpression",
                start: 0,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                callee: {
                  type: "Identifier",
                  start: 4,
                  end: 7,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 7
                    }
                  },
                  name: "foo"
                },
                arguments: []
              },
              property: {
                type: "Identifier",
                start: 10,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "bar"
              },
              computed: false
            },
            arguments: []
          }
        }
      ]
    },
    "new foo[bar]": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            callee: {
              type: "MemberExpression",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              object: {
                type: "Identifier",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "foo"
              },
              property: {
                type: "Identifier",
                start: 8,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "bar"
              },
              computed: true
            },
            arguments: []
          }
        }
      ]
    },
    "new foo.bar()": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            callee: {
              type: "MemberExpression",
              start: 4,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              object: {
                type: "Identifier",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "foo"
              },
              property: {
                type: "Identifier",
                start: 8,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "bar"
              },
              computed: false
            },
            arguments: []
          }
        }
      ]
    },
    "( new foo).bar()": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            callee: {
              type: "MemberExpression",
              start: 0,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              object: {
                type: "NewExpression",
                start: 2,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                callee: {
                  type: "Identifier",
                  start: 6,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  name: "foo"
                },
                arguments: []
              },
              property: {
                type: "Identifier",
                start: 11,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                name: "bar"
              },
              computed: false
            },
            arguments: []
          }
        }
      ]
    },
    "foo(bar, baz)": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            callee: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "foo"
            },
            arguments: [
              {
                type: "Identifier",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "bar"
              },
              {
                type: "Identifier",
                start: 9,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                name: "baz"
              }
            ]
          }
        }
      ]
    },
    "(    foo  )()": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            callee: {
              type: "Identifier",
              start: 5,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "foo"
            },
            arguments: []
          }
        }
      ]
    },
    "universe.milkyway": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              name: "milkyway"
            },
            computed: false
          }
        }
      ]
    },
    "universe.milkyway.solarsystem": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 29
              }
            },
            object: {
              type: "MemberExpression",
              start: 0,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              object: {
                type: "Identifier",
                start: 0,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "universe"
              },
              property: {
                type: "Identifier",
                start: 9,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                name: "milkyway"
              },
              computed: false
            },
            property: {
              type: "Identifier",
              start: 18,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              name: "solarsystem"
            },
            computed: false
          }
        }
      ]
    },
    "universe.milkyway.solarsystem.Earth": {
      type: "Program",
      start: 0,
      end: 35,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 35
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 35,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 35
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 35,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 35
              }
            },
            object: {
              type: "MemberExpression",
              start: 0,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              object: {
                type: "MemberExpression",
                start: 0,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                object: {
                  type: "Identifier",
                  start: 0,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 0
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  name: "universe"
                },
                property: {
                  type: "Identifier",
                  start: 9,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  name: "milkyway"
                },
                computed: false
              },
              property: {
                type: "Identifier",
                start: 18,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                name: "solarsystem"
              },
              computed: false
            },
            property: {
              type: "Identifier",
              start: 30,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 30
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              name: "Earth"
            },
            computed: false
          }
        }
      ]
    },
    "universe[galaxyName, otherUselessName]": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 38
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "SequenceExpression",
              start: 9,
              end: 37,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 37
                }
              },
              expressions: [
                {
                  type: "Identifier",
                  start: 9,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  name: "galaxyName"
                },
                {
                  type: "Identifier",
                  start: 21,
                  end: 37,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 37
                    }
                  },
                  name: "otherUselessName"
                }
              ]
            },
            computed: true
          }
        }
      ]
    },
    "universe[galaxyName]": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              name: "galaxyName"
            },
            computed: true
          }
        }
      ]
    },
    "universe[42].galaxies": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 21
              }
            },
            object: {
              type: "MemberExpression",
              start: 0,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              object: {
                type: "Identifier",
                start: 0,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "universe"
              },
              property: {
                type: "Literal",
                start: 9,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                value: 42,
                raw: "42"
              },
              computed: true
            },
            property: {
              type: "Identifier",
              start: 13,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              name: "galaxies"
            },
            computed: false
          }
        }
      ]
    },
    "universe(42).galaxies": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 21
              }
            },
            object: {
              type: "CallExpression",
              start: 0,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              callee: {
                type: "Identifier",
                start: 0,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "universe"
              },
              arguments: [
                {
                  type: "Literal",
                  start: 9,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  value: 42,
                  raw: "42"
                }
              ]
            },
            property: {
              type: "Identifier",
              start: 13,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              name: "galaxies"
            },
            computed: false
          }
        }
      ]
    },
    "universe(42).galaxies(14, 3, 77).milkyway": {
      type: "Program",
      start: 0,
      end: 41,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 41
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 41,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 41
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 41,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 41
              }
            },
            object: {
              type: "CallExpression",
              start: 0,
              end: 32,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 32
                }
              },
              callee: {
                type: "MemberExpression",
                start: 0,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                object: {
                  type: "CallExpression",
                  start: 0,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 0
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 0,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 0
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    name: "universe"
                  },
                  arguments: [
                    {
                      type: "Literal",
                      start: 9,
                      end: 11,
                      loc: {
                        start: {
                          line: 1,
                          column: 9
                        },
                        end: {
                          line: 1,
                          column: 11
                        }
                      },
                      value: 42,
                      raw: "42"
                    }
                  ]
                },
                property: {
                  type: "Identifier",
                  start: 13,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  name: "galaxies"
                },
                computed: false
              },
              arguments: [
                {
                  type: "Literal",
                  start: 22,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  value: 14,
                  raw: "14"
                },
                {
                  type: "Literal",
                  start: 26,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  value: 3,
                  raw: "3"
                },
                {
                  type: "Literal",
                  start: 29,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 29
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  value: 77,
                  raw: "77"
                }
              ]
            },
            property: {
              type: "Identifier",
              start: 33,
              end: 41,
              loc: {
                start: {
                  line: 1,
                  column: 33
                },
                end: {
                  line: 1,
                  column: 41
                }
              },
              name: "milkyway"
            },
            computed: false
          }
        }
      ]
    },
    "earth.asia.Indonesia.prepareForElection(2014)": {
      type: "Program",
      start: 0,
      end: 45,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 45
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 45,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 45
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 45,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 45
              }
            },
            callee: {
              type: "MemberExpression",
              start: 0,
              end: 39,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 39
                }
              },
              object: {
                type: "MemberExpression",
                start: 0,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                object: {
                  type: "MemberExpression",
                  start: 0,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 0
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  object: {
                    type: "Identifier",
                    start: 0,
                    end: 5,
                    loc: {
                      start: {
                        line: 1,
                        column: 0
                      },
                      end: {
                        line: 1,
                        column: 5
                      }
                    },
                    name: "earth"
                  },
                  property: {
                    type: "Identifier",
                    start: 6,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    name: "asia"
                  },
                  computed: false
                },
                property: {
                  type: "Identifier",
                  start: 11,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  name: "Indonesia"
                },
                computed: false
              },
              property: {
                type: "Identifier",
                start: 21,
                end: 39,
                loc: {
                  start: {
                    line: 1,
                    column: 21
                  },
                  end: {
                    line: 1,
                    column: 39
                  }
                },
                name: "prepareForElection"
              },
              computed: false
            },
            arguments: [
              {
                type: "Literal",
                start: 40,
                end: 44,
                loc: {
                  start: {
                    line: 1,
                    column: 40
                  },
                  end: {
                    line: 1,
                    column: 44
                  }
                },
                value: 2014,
                raw: "2014"
              }
            ]
          }
        }
      ]
    },
    "universe.if": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "if"
            },
            computed: false
          }
        }
      ]
    },
    "universe.true": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              name: "true"
            },
            computed: false
          }
        }
      ]
    },
    "universe.false": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              name: "false"
            },
            computed: false
          }
        }
      ]
    },
    "universe.null": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              name: "null"
            },
            computed: false
          }
        }
      ]
    },
    "x++": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "x--": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            operator: "--",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "eval++": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              name: "eval"
            }
          }
        }
      ]
    },
    "eval--": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "--",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              name: "eval"
            }
          }
        }
      ]
    },
    "arguments++": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "arguments"
            }
          }
        }
      ]
    },
    "arguments--": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            operator: "--",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "arguments"
            }
          }
        }
      ]
    },
    "++x": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            operator: "++",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "--x": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            operator: "--",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "++eval": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "++",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "eval"
            }
          }
        }
      ]
    },
    "--eval": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "--",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "eval"
            }
          }
        }
      ]
    },
    "++arguments": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            operator: "++",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "arguments"
            }
          }
        }
      ]
    },
    "--arguments": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            operator: "--",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "arguments"
            }
          }
        }
      ]
    },
    "+x": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            operator: "+",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "-x": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            operator: "-",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "~x": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            operator: "~",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "!x": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            operator: "!",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "void x": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "void",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "delete x": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: "delete",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "typeof x": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: "typeof",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "x * y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "*",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x / y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "/",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x % y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "%",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x + y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "+",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x - y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "-",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x << y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "<<",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x >> y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: ">>",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x >>> y": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: ">>>",
            right: {
              type: "Identifier",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x < y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x > y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: ">",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x <= y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "<=",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x >= y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: ">=",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x in y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "in",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x instanceof y": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "instanceof",
            right: {
              type: "Identifier",
              start: 13,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x < y < z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "<",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "<",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x == y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "==",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x != y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "!=",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x === y": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "===",
            right: {
              type: "Identifier",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x !== y": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "!==",
            right: {
              type: "Identifier",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x & y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "&",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x ^ y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "^",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x | y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "|",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x + y + z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "+",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "+",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x - y + z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "-",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "+",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x + y - z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "+",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "-",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x - y - z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "-",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "-",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x + y * z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "+",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              left: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              },
              operator: "*",
              right: {
                type: "Identifier",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x + y / z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "+",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              left: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              },
              operator: "/",
              right: {
                type: "Identifier",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x - y % z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "-",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              left: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              },
              operator: "%",
              right: {
                type: "Identifier",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x * y * z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "*",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "*",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x * y / z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "*",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "/",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x * y % z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "*",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "%",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x % y * z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "%",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "*",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x << y << z": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "<<",
              right: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              }
            },
            operator: "<<",
            right: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x | y | z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "|",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "|",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x & y & z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "&",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "&",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x ^ y ^ z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "^",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "^",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x & y | z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "&",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "|",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x | y ^ z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "|",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              left: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              },
              operator: "^",
              right: {
                type: "Identifier",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x | y & z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "|",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              left: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              },
              operator: "&",
              right: {
                type: "Identifier",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x || y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "||",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x && y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "&&",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x || y || z": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            left: {
              type: "LogicalExpression",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "||",
              right: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              }
            },
            operator: "||",
            right: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x && y && z": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            left: {
              type: "LogicalExpression",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "&&",
              right: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              }
            },
            operator: "&&",
            right: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x || y && z": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "||",
            right: {
              type: "LogicalExpression",
              start: 5,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              left: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              },
              operator: "&&",
              right: {
                type: "Identifier",
                start: 10,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x || y ^ z": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "||",
            right: {
              type: "BinaryExpression",
              start: 5,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              left: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              },
              operator: "^",
              right: {
                type: "Identifier",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "y ? 1 : 2": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "ConditionalExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            test: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "y"
            },
            consequent: {
              type: "Literal",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              value: 1,
              raw: "1"
            },
            alternate: {
              type: "Literal",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "x && y ? 1 : 2": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "ConditionalExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            test: {
              type: "LogicalExpression",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "&&",
              right: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              }
            },
            consequent: {
              type: "Literal",
              start: 9,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              value: 1,
              raw: "1"
            },
            alternate: {
              type: "Literal",
              start: 13,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "x = 42": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 4,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "eval = 42": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              name: "eval"
            },
            right: {
              type: "Literal",
              start: 7,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "arguments = 42": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "arguments"
            },
            right: {
              type: "Literal",
              start: 12,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x *= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "*=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x /= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "/=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x %= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "%=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x += 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "+=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x -= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "-=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x <<= 42": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: "<<=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 6,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x >>= 42": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: ">>=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 6,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x >>>= 42": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: ">>>=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 7,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x &= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "&=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x ^= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "^=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x |= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "|=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "{ foo }": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          body: [
            {
              type: "ExpressionStatement",
              start: 2,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              expression: {
                type: "Identifier",
                start: 2,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "foo"
              }
            }
          ]
        }
      ]
    },
    "{ doThis(); doThat(); }": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          body: [
            {
              type: "ExpressionStatement",
              start: 2,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              expression: {
                type: "CallExpression",
                start: 2,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                callee: {
                  type: "Identifier",
                  start: 2,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 2
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  name: "doThis"
                },
                arguments: []
              }
            },
            {
              type: "ExpressionStatement",
              start: 12,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              expression: {
                type: "CallExpression",
                start: 12,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                callee: {
                  type: "Identifier",
                  start: 12,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  name: "doThat"
                },
                arguments: []
              }
            }
          ]
        }
      ]
    },
    "{}": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          body: []
        }
      ]
    },
    "var x": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: null
            }
          ],
          kind: "var"
        }
      ]
    },
    "var await": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "await"
              },
              init: null
            }
          ],
          kind: "var"
        }
      ]
    },
    "var x, y;": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              id: {
                type: "Identifier",
                start: 7,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "y"
              },
              init: null
            }
          ],
          kind: "var"
        }
      ]
    },
    "var x = 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var eval = 42, arguments = 42": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "eval"
              },
              init: {
                type: "Literal",
                start: 11,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                value: 42,
                raw: "42"
              }
            },
            {
              type: "VariableDeclarator",
              start: 15,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              id: {
                type: "Identifier",
                start: 15,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "arguments"
              },
              init: {
                type: "Literal",
                start: 27,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 27
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var x = 14, y = 3, z = 1977": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                value: 14,
                raw: "14"
              }
            },
            {
              type: "VariableDeclarator",
              start: 12,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              id: {
                type: "Identifier",
                start: 12,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "y"
              },
              init: {
                type: "Literal",
                start: 16,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                value: 3,
                raw: "3"
              }
            },
            {
              type: "VariableDeclarator",
              start: 19,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              id: {
                type: "Identifier",
                start: 19,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                name: "z"
              },
              init: {
                type: "Literal",
                start: 23,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                value: 1977,
                raw: "1977"
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var implements, interface, package": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                name: "implements"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 16,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              id: {
                type: "Identifier",
                start: 16,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                name: "interface"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 27,
              end: 34,
              loc: {
                start: {
                  line: 1,
                  column: 27
                },
                end: {
                  line: 1,
                  column: 34
                }
              },
              id: {
                type: "Identifier",
                start: 27,
                end: 34,
                loc: {
                  start: {
                    line: 1,
                    column: 27
                  },
                  end: {
                    line: 1,
                    column: 34
                  }
                },
                name: "package"
              },
              init: null
            }
          ],
          kind: "var"
        }
      ]
    },
    "var private, protected, public, static": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "private"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 13,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              id: {
                type: "Identifier",
                start: 13,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                name: "protected"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 24,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 24
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              id: {
                type: "Identifier",
                start: 24,
                end: 30,
                loc: {
                  start: {
                    line: 1,
                    column: 24
                  },
                  end: {
                    line: 1,
                    column: 30
                  }
                },
                name: "public"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 32,
              end: 38,
              loc: {
                start: {
                  line: 1,
                  column: 32
                },
                end: {
                  line: 1,
                  column: 38
                }
              },
              id: {
                type: "Identifier",
                start: 32,
                end: 38,
                loc: {
                  start: {
                    line: 1,
                    column: 32
                  },
                  end: {
                    line: 1,
                    column: 38
                  }
                },
                name: "static"
              },
              init: null
            }
          ],
          kind: "var"
        }
      ]
    },
    ";": {
      type: "Program",
      start: 0,
      end: 1,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      },
      body: [
        {
          type: "EmptyStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          }
        }
      ]
    },
    "x": {
      type: "Program",
      start: 0,
      end: 1,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 1,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            },
            name: "x"
          }
        }
      ]
    },
    "x, y": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "SequenceExpression",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            expressions: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              {
                type: "Identifier",
                start: 3,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                name: "y"
              }
            ]
          }
        }
      ]
    },
    "\\u0061": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            name: "a"
          }
        }
      ]
    },
    "a\\u0061": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "aa"
          }
        }
      ]
    },
    "if (morning) goodMorning()": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 11
              }
            },
            name: "morning"
          },
          consequent: {
            type: "ExpressionStatement",
            start: 13,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 26
              }
            },
            expression: {
              type: "CallExpression",
              start: 13,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              callee: {
                type: "Identifier",
                start: 13,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "goodMorning"
              },
              arguments: []
            }
          },
          alternate: null
        }
      ]
    },
    "if (morning) (function(){})": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 11
              }
            },
            name: "morning"
          },
          consequent: {
            type: "ExpressionStatement",
            start: 13,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 27
              }
            },
            expression: {
              type: "FunctionExpression",
              start: 14,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              id: null,
              params: [],
              body: {
                type: "BlockStatement",
                start: 24,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 24
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                body: []
              },
              expression: false
            }
          },
          alternate: null
        }
      ]
    },
    "if (morning) var x = 0;": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 11
              }
            },
            name: "morning"
          },
          consequent: {
            type: "VariableDeclaration",
            start: 13,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 23
              }
            },
            declarations: [
              {
                type: "VariableDeclarator",
                start: 17,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                id: {
                  type: "Identifier",
                  start: 17,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 21,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  value: 0,
                  raw: "0"
                }
              }
            ],
            kind: "var"
          },
          alternate: null
        }
      ]
    },
    "if (morning) function a(){}": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 11
              }
            },
            name: "morning"
          },
          consequent: {
            type: "FunctionDeclaration",
            start: 13,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 27
              }
            },
            id: {
              type: "Identifier",
              start: 22,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 22
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              name: "a"
            },
            params: [],
            body: {
              type: "BlockStatement",
              start: 25,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              body: []
            },
            expression: false
          },
          alternate: null
        }
      ]
    },
    "if (morning) goodMorning(); else goodDay()": {
      type: "Program",
      start: 0,
      end: 42,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 42
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 42,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 42
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 11
              }
            },
            name: "morning"
          },
          consequent: {
            type: "ExpressionStatement",
            start: 13,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 27
              }
            },
            expression: {
              type: "CallExpression",
              start: 13,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              callee: {
                type: "Identifier",
                start: 13,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "goodMorning"
              },
              arguments: []
            }
          },
          alternate: {
            type: "ExpressionStatement",
            start: 33,
            end: 42,
            loc: {
              start: {
                line: 1,
                column: 33
              },
              end: {
                line: 1,
                column: 42
              }
            },
            expression: {
              type: "CallExpression",
              start: 33,
              end: 42,
              loc: {
                start: {
                  line: 1,
                  column: 33
                },
                end: {
                  line: 1,
                  column: 42
                }
              },
              callee: {
                type: "Identifier",
                start: 33,
                end: 40,
                loc: {
                  start: {
                    line: 1,
                    column: 33
                  },
                  end: {
                    line: 1,
                    column: 40
                  }
                },
                name: "goodDay"
              },
              arguments: []
            }
          }
        }
      ]
    },
    "do keep(); while (true)": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      body: [
        {
          type: "DoWhileStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 3,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 10
              }
            },
            expression: {
              type: "CallExpression",
              start: 3,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              callee: {
                type: "Identifier",
                start: 3,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "keep"
              },
              arguments: []
            }
          },
          test: {
            type: "Literal",
            start: 18,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 22
              }
            },
            value: true,
            raw: "true"
          }
        }
      ]
    },
    "do keep(); while (true);": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "DoWhileStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 3,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 10
              }
            },
            expression: {
              type: "CallExpression",
              start: 3,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              callee: {
                type: "Identifier",
                start: 3,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "keep"
              },
              arguments: []
            }
          },
          test: {
            type: "Literal",
            start: 18,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 22
              }
            },
            value: true,
            raw: "true"
          }
        }
      ]
    },
    "do { x++; y--; } while (x < 10)": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "DoWhileStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          body: {
            type: "BlockStatement",
            start: 3,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 16
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 5,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                expression: {
                  type: "UpdateExpression",
                  start: 5,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  operator: "++",
                  prefix: false,
                  argument: {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    name: "x"
                  }
                }
              },
              {
                type: "ExpressionStatement",
                start: 10,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                expression: {
                  type: "UpdateExpression",
                  start: 10,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  operator: "--",
                  prefix: false,
                  argument: {
                    type: "Identifier",
                    start: 10,
                    end: 11,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 11
                      }
                    },
                    name: "y"
                  }
                }
              }
            ]
          },
          test: {
            type: "BinaryExpression",
            start: 24,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 24
              },
              end: {
                line: 1,
                column: 30
              }
            },
            left: {
              type: "Identifier",
              start: 24,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 24
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Literal",
              start: 28,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 28
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              value: 10,
              raw: "10"
            }
          }
        }
      ]
    },
    "{ do { } while (false);false }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          body: [
            {
              type: "DoWhileStatement",
              start: 2,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              body: {
                type: "BlockStatement",
                start: 5,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                body: []
              },
              test: {
                type: "Literal",
                start: 16,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                value: false,
                raw: "false"
              }
            },
            {
              type: "ExpressionStatement",
              start: 23,
              end: 28,
              loc: {
                start: {
                  line: 1,
                  column: 23
                },
                end: {
                  line: 1,
                  column: 28
                }
              },
              expression: {
                type: "Literal",
                start: 23,
                end: 28,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 28
                  }
                },
                value: false,
                raw: "false"
              }
            }
          ]
        }
      ]
    },
    "while (true) doSomething()": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "ExpressionStatement",
            start: 13,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 26
              }
            },
            expression: {
              type: "CallExpression",
              start: 13,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              callee: {
                type: "Identifier",
                start: 13,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "doSomething"
              },
              arguments: []
            }
          }
        }
      ]
    },
    "while (x < 10) { x++; y--; }": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          test: {
            type: "BinaryExpression",
            start: 7,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 13
              }
            },
            left: {
              type: "Identifier",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Literal",
              start: 11,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              value: 10,
              raw: "10"
            }
          },
          body: {
            type: "BlockStatement",
            start: 15,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 28
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                expression: {
                  type: "UpdateExpression",
                  start: 17,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  operator: "++",
                  prefix: false,
                  argument: {
                    type: "Identifier",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    name: "x"
                  }
                }
              },
              {
                type: "ExpressionStatement",
                start: 22,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 22
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                expression: {
                  type: "UpdateExpression",
                  start: 22,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  operator: "--",
                  prefix: false,
                  argument: {
                    type: "Identifier",
                    start: 22,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 22
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    name: "y"
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "for(;;);": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          init: null,
          test: null,
          update: null,
          body: {
            type: "EmptyStatement",
            start: 7,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 8
              }
            }
          }
        }
      ]
    },
    "for(;;){}": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          init: null,
          test: null,
          update: null,
          body: {
            type: "BlockStatement",
            start: 7,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 9
              }
            },
            body: []
          }
        }
      ]
    },
    "for(x = 0;;);": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          init: {
            type: "AssignmentExpression",
            start: 4,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 0,
              raw: "0"
            }
          },
          test: null,
          update: null,
          body: {
            type: "EmptyStatement",
            start: 12,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 12
              },
              end: {
                line: 1,
                column: 13
              }
            }
          }
        }
      ]
    },
    "for(var x = 0;;);": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          init: {
            type: "VariableDeclaration",
            start: 4,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 13
              }
            },
            declarations: [
              {
                type: "VariableDeclarator",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                id: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  value: 0,
                  raw: "0"
                }
              }
            ],
            kind: "var"
          },
          test: null,
          update: null,
          body: {
            type: "EmptyStatement",
            start: 16,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 17
              }
            }
          }
        }
      ]
    },
    "for(var x = 0, y = 1;;);": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          init: {
            type: "VariableDeclaration",
            start: 4,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 20
              }
            },
            declarations: [
              {
                type: "VariableDeclarator",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                id: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  value: 0,
                  raw: "0"
                }
              },
              {
                type: "VariableDeclarator",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                id: {
                  type: "Identifier",
                  start: 15,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 15
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  name: "y"
                },
                init: {
                  type: "Literal",
                  start: 19,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  value: 1,
                  raw: "1"
                }
              }
            ],
            kind: "var"
          },
          test: null,
          update: null,
          body: {
            type: "EmptyStatement",
            start: 23,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 24
              }
            }
          }
        }
      ]
    },
    "for(x = 0; x < 42;);": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          init: {
            type: "AssignmentExpression",
            start: 4,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 0,
              raw: "0"
            }
          },
          test: {
            type: "BinaryExpression",
            start: 11,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 11
              },
              end: {
                line: 1,
                column: 17
              }
            },
            left: {
              type: "Identifier",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Literal",
              start: 15,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: 42,
              raw: "42"
            }
          },
          update: null,
          body: {
            type: "EmptyStatement",
            start: 19,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 19
              },
              end: {
                line: 1,
                column: 20
              }
            }
          }
        }
      ]
    },
    "for(x = 0; x < 42; x++);": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          init: {
            type: "AssignmentExpression",
            start: 4,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 0,
              raw: "0"
            }
          },
          test: {
            type: "BinaryExpression",
            start: 11,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 11
              },
              end: {
                line: 1,
                column: 17
              }
            },
            left: {
              type: "Identifier",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Literal",
              start: 15,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: 42,
              raw: "42"
            }
          },
          update: {
            type: "UpdateExpression",
            start: 19,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 19
              },
              end: {
                line: 1,
                column: 22
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 19,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              name: "x"
            }
          },
          body: {
            type: "EmptyStatement",
            start: 23,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 24
              }
            }
          }
        }
      ]
    },
    "for(x = 0; x < 42; x++) process(x);": {
      type: "Program",
      start: 0,
      end: 35,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 35
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 35,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 35
            }
          },
          init: {
            type: "AssignmentExpression",
            start: 4,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 0,
              raw: "0"
            }
          },
          test: {
            type: "BinaryExpression",
            start: 11,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 11
              },
              end: {
                line: 1,
                column: 17
              }
            },
            left: {
              type: "Identifier",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Literal",
              start: 15,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: 42,
              raw: "42"
            }
          },
          update: {
            type: "UpdateExpression",
            start: 19,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 19
              },
              end: {
                line: 1,
                column: 22
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 19,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              name: "x"
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 24,
            end: 35,
            loc: {
              start: {
                line: 1,
                column: 24
              },
              end: {
                line: 1,
                column: 35
              }
            },
            expression: {
              type: "CallExpression",
              start: 24,
              end: 34,
              loc: {
                start: {
                  line: 1,
                  column: 24
                },
                end: {
                  line: 1,
                  column: 34
                }
              },
              callee: {
                type: "Identifier",
                start: 24,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 24
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 32,
                  end: 33,
                  loc: {
                    start: {
                      line: 1,
                      column: 32
                    },
                    end: {
                      line: 1,
                      column: 33
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ]
    },
    "for(x in list) process(x);": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          left: {
            type: "Identifier",
            start: 4,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 5
              }
            },
            name: "x"
          },
          right: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 15,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 26
              }
            },
            expression: {
              type: "CallExpression",
              start: 15,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              callee: {
                type: "Identifier",
                start: 15,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 23,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ]
    },
    "for (var x in list) process(x);": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 10
              }
            },
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  name: "x"
                },
                init: null
              }
            ],
            kind: "var"
          },
          right: {
            type: "Identifier",
            start: 14,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 18
              }
            },
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 20,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 31
              }
            },
            expression: {
              type: "CallExpression",
              start: 20,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              callee: {
                type: "Identifier",
                start: 20,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 28,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ]
    },
    "for (var x = 42 in list) process(x);": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 15
              }
            },
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 13,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  value: 42,
                  raw: "42"
                }
              }
            ],
            kind: "var"
          },
          right: {
            type: "Identifier",
            start: 19,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 19
              },
              end: {
                line: 1,
                column: 23
              }
            },
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 25,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 25
              },
              end: {
                line: 1,
                column: 36
              }
            },
            expression: {
              type: "CallExpression",
              start: 25,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              callee: {
                type: "Identifier",
                start: 25,
                end: 32,
                loc: {
                  start: {
                    line: 1,
                    column: 25
                  },
                  end: {
                    line: 1,
                    column: 32
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 33,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 33
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ]
    },
    "for (var i = function() { return 10 in [] } in list) process(x);": {
      type: "Program",
      start: 0,
      end: 64,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 64
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 64,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 64
            }
          },
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 43,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 43
              }
            },
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 43,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 43
                  }
                },
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  name: "i"
                },
                init: {
                  type: "FunctionExpression",
                  start: 13,
                  end: 43,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 43
                    }
                  },
                  id: null,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 24,
                    end: 43,
                    loc: {
                      start: {
                        line: 1,
                        column: 24
                      },
                      end: {
                        line: 1,
                        column: 43
                      }
                    },
                    body: [
                      {
                        type: "ReturnStatement",
                        start: 26,
                        end: 41,
                        loc: {
                          start: {
                            line: 1,
                            column: 26
                          },
                          end: {
                            line: 1,
                            column: 41
                          }
                        },
                        argument: {
                          type: "BinaryExpression",
                          start: 33,
                          end: 41,
                          loc: {
                            start: {
                              line: 1,
                              column: 33
                            },
                            end: {
                              line: 1,
                              column: 41
                            }
                          },
                          left: {
                            type: "Literal",
                            start: 33,
                            end: 35,
                            loc: {
                              start: {
                                line: 1,
                                column: 33
                              },
                              end: {
                                line: 1,
                                column: 35
                              }
                            },
                            value: 10,
                            raw: "10"
                          },
                          operator: "in",
                          right: {
                            type: "ArrayExpression",
                            start: 39,
                            end: 41,
                            loc: {
                              start: {
                                line: 1,
                                column: 39
                              },
                              end: {
                                line: 1,
                                column: 41
                              }
                            },
                            elements: []
                          }
                        }
                      }
                    ]
                  },
                  expression: false
                }
              }
            ],
            kind: "var"
          },
          right: {
            type: "Identifier",
            start: 47,
            end: 51,
            loc: {
              start: {
                line: 1,
                column: 47
              },
              end: {
                line: 1,
                column: 51
              }
            },
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 53,
            end: 64,
            loc: {
              start: {
                line: 1,
                column: 53
              },
              end: {
                line: 1,
                column: 64
              }
            },
            expression: {
              type: "CallExpression",
              start: 53,
              end: 63,
              loc: {
                start: {
                  line: 1,
                  column: 53
                },
                end: {
                  line: 1,
                  column: 63
                }
              },
              callee: {
                type: "Identifier",
                start: 53,
                end: 60,
                loc: {
                  start: {
                    line: 1,
                    column: 53
                  },
                  end: {
                    line: 1,
                    column: 60
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 61,
                  end: 62,
                  loc: {
                    start: {
                      line: 1,
                      column: 61
                    },
                    end: {
                      line: 1,
                      column: 62
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ]
    },
    "while (true) { continue; }": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 26
              }
            },
            body: [
              {
                type: "ContinueStatement",
                start: 15,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                label: null
              }
            ]
          }
        }
      ]
    },
    "while (true) { continue }": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 25
              }
            },
            body: [
              {
                type: "ContinueStatement",
                start: 15,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                label: null
              }
            ]
          }
        }
      ]
    },
    "done: while (true) { continue done }": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          body: {
            type: "WhileStatement",
            start: 6,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 36
              }
            },
            test: {
              type: "Literal",
              start: 13,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: true,
              raw: "true"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              body: [
                {
                  type: "ContinueStatement",
                  start: 21,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  label: {
                    type: "Identifier",
                    start: 30,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 30
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    name: "done"
                  }
                }
              ]
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            name: "done"
          }
        }
      ]
    },
    "done: while (true) { continue done; }": {
      type: "Program",
      start: 0,
      end: 37,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 37
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 37,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 37
            }
          },
          body: {
            type: "WhileStatement",
            start: 6,
            end: 37,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 37
              }
            },
            test: {
              type: "Literal",
              start: 13,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: true,
              raw: "true"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 37,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 37
                }
              },
              body: [
                {
                  type: "ContinueStatement",
                  start: 21,
                  end: 35,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 35
                    }
                  },
                  label: {
                    type: "Identifier",
                    start: 30,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 30
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    name: "done"
                  }
                }
              ]
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            name: "done"
          }
        }
      ]
    },
    "while (true) { break }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 22
              }
            },
            body: [
              {
                type: "BreakStatement",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                label: null
              }
            ]
          }
        }
      ]
    },
    "done: while (true) { break done }": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          body: {
            type: "WhileStatement",
            start: 6,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 33
              }
            },
            test: {
              type: "Literal",
              start: 13,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: true,
              raw: "true"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              body: [
                {
                  type: "BreakStatement",
                  start: 21,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  label: {
                    type: "Identifier",
                    start: 27,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    name: "done"
                  }
                }
              ]
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            name: "done"
          }
        }
      ]
    },
    "done: while (true) { break done; }": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          body: {
            type: "WhileStatement",
            start: 6,
            end: 34,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 34
              }
            },
            test: {
              type: "Literal",
              start: 13,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: true,
              raw: "true"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 34,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 34
                }
              },
              body: [
                {
                  type: "BreakStatement",
                  start: 21,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  label: {
                    type: "Identifier",
                    start: 27,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    name: "done"
                  }
                }
              ]
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            name: "done"
          }
        }
      ]
    },
    "target1: target2: while (true) { continue target1; }": {
      type: "Program",
      start: 0,
      end: 52,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 52
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 52,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 52
            }
          },
          body: {
            type: "LabeledStatement",
            start: 9,
            end: 52,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 52
              }
            },
            body: {
              type: "WhileStatement",
              start: 18,
              end: 52,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 52
                }
              },
              test: {
                type: "Literal",
                start: 25,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 25
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                value: true,
                raw: "true"
              },
              body: {
                type: "BlockStatement",
                start: 31,
                end: 52,
                loc: {
                  start: {
                    line: 1,
                    column: 31
                  },
                  end: {
                    line: 1,
                    column: 52
                  }
                },
                body: [
                  {
                    type: "ContinueStatement",
                    start: 33,
                    end: 50,
                    loc: {
                      start: {
                        line: 1,
                        column: 33
                      },
                      end: {
                        line: 1,
                        column: 50
                      }
                    },
                    label: {
                      type: "Identifier",
                      start: 42,
                      end: 49,
                      loc: {
                        start: {
                          line: 1,
                          column: 42
                        },
                        end: {
                          line: 1,
                          column: 49
                        }
                      },
                      name: "target1"
                    }
                  }
                ]
              }
            },
            label: {
              type: "Identifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "target2"
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "target1"
          }
        }
      ]
    },
    "target1: target2: target3: while (true) { continue target1; }": {
      type: "Program",
      start: 0,
      end: 61,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 61
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 61,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 61
            }
          },
          body: {
            type: "LabeledStatement",
            start: 9,
            end: 61,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 61
              }
            },
            body: {
              type: "LabeledStatement",
              start: 18,
              end: 61,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 61
                }
              },
              body: {
                type: "WhileStatement",
                start: 27,
                end: 61,
                loc: {
                  start: {
                    line: 1,
                    column: 27
                  },
                  end: {
                    line: 1,
                    column: 61
                  }
                },
                test: {
                  type: "Literal",
                  start: 34,
                  end: 38,
                  loc: {
                    start: {
                      line: 1,
                      column: 34
                    },
                    end: {
                      line: 1,
                      column: 38
                    }
                  },
                  value: true,
                  raw: "true"
                },
                body: {
                  type: "BlockStatement",
                  start: 40,
                  end: 61,
                  loc: {
                    start: {
                      line: 1,
                      column: 40
                    },
                    end: {
                      line: 1,
                      column: 61
                    }
                  },
                  body: [
                    {
                      type: "ContinueStatement",
                      start: 42,
                      end: 59,
                      loc: {
                        start: {
                          line: 1,
                          column: 42
                        },
                        end: {
                          line: 1,
                          column: 59
                        }
                      },
                      label: {
                        type: "Identifier",
                        start: 51,
                        end: 58,
                        loc: {
                          start: {
                            line: 1,
                            column: 51
                          },
                          end: {
                            line: 1,
                            column: 58
                          }
                        },
                        name: "target1"
                      }
                    }
                  ]
                }
              },
              label: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                name: "target3"
              }
            },
            label: {
              type: "Identifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "target2"
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "target1"
          }
        }
      ]
    },
    "(function(){ return })": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 21
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  argument: null
                }
              ]
            },
            expression: false
          }
        }
      ]
    },
    "(function(){ return; })": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 22
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  argument: null
                }
              ]
            },
            expression: false
          }
        }
      ]
    },
    "(function(){ return x; })": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 24
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  argument: {
                    type: "Identifier",
                    start: 20,
                    end: 21,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 21
                      }
                    },
                    name: "x"
                  }
                }
              ]
            },
            expression: false
          }
        }
      ]
    },
    "(function(){ return x * y })": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 27
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  argument: {
                    type: "BinaryExpression",
                    start: 20,
                    end: 25,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 25
                      }
                    },
                    left: {
                      type: "Identifier",
                      start: 20,
                      end: 21,
                      loc: {
                        start: {
                          line: 1,
                          column: 20
                        },
                        end: {
                          line: 1,
                          column: 21
                        }
                      },
                      name: "x"
                    },
                    operator: "*",
                    right: {
                      type: "Identifier",
                      start: 24,
                      end: 25,
                      loc: {
                        start: {
                          line: 1,
                          column: 24
                        },
                        end: {
                          line: 1,
                          column: 25
                        }
                      },
                      name: "y"
                    }
                  }
                }
              ]
            },
            expression: false
          }
        }
      ]
    },
    "with (x) foo = bar": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "WithStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          object: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "x"
          },
          body: {
            type: "ExpressionStatement",
            start: 9,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 18
              }
            },
            expression: {
              type: "AssignmentExpression",
              start: 9,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              operator: "=",
              left: {
                type: "Identifier",
                start: 9,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                name: "foo"
              },
              right: {
                type: "Identifier",
                start: 15,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                name: "bar"
              }
            }
          }
        }
      ]
    },
    "with (x) foo = bar;": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      body: [
        {
          type: "WithStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          object: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "x"
          },
          body: {
            type: "ExpressionStatement",
            start: 9,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 19
              }
            },
            expression: {
              type: "AssignmentExpression",
              start: 9,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              operator: "=",
              left: {
                type: "Identifier",
                start: 9,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                name: "foo"
              },
              right: {
                type: "Identifier",
                start: 15,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                name: "bar"
              }
            }
          }
        }
      ]
    },
    "'use\\x20strict'; with (x) foo = bar;": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            value: "use strict",
            raw: "'use\\x20strict'"
          }
        },
        {
          type: "WithStatement",
          start: 17,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 17
            },
            end: {
              line: 1,
              column: 36
            }
          },
          object: {
            type: "Identifier",
            start: 23,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 24
              }
            },
            name: "x"
          },
          body: {
            type: "ExpressionStatement",
            start: 26,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 26
              },
              end: {
                line: 1,
                column: 36
              }
            },
            expression: {
              type: "AssignmentExpression",
              start: 26,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              operator: "=",
              left: {
                type: "Identifier",
                start: 26,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 26
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                name: "foo"
              },
              right: {
                type: "Identifier",
                start: 32,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 32
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                name: "bar"
              }
            }
          }
        }
      ]
    },
    "\"use\\x20strict\"; with (x) foo = bar;": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            value: "use strict",
            raw: "\"use\\x20strict\""
          }
        },
        {
          type: "WithStatement",
          start: 17,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 17
            },
            end: {
              line: 1,
              column: 36
            }
          },
          object: {
            type: "Identifier",
            start: 23,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 24
              }
            },
            name: "x"
          },
          body: {
            type: "ExpressionStatement",
            start: 26,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 26
              },
              end: {
                line: 1,
                column: 36
              }
            },
            expression: {
              type: "AssignmentExpression",
              start: 26,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              operator: "=",
              left: {
                type: "Identifier",
                start: 26,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 26
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                name: "foo"
              },
              right: {
                type: "Identifier",
                start: 32,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 32
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                name: "bar"
              }
            }
          }
        }
      ]
    },
    "with (x) { foo = bar }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "WithStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          object: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "x"
          },
          body: {
            type: "BlockStatement",
            start: 9,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 22
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 11,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                expression: {
                  type: "AssignmentExpression",
                  start: 11,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  operator: "=",
                  left: {
                    type: "Identifier",
                    start: 11,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 11
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    name: "foo"
                  },
                  right: {
                    type: "Identifier",
                    start: 17,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    name: "bar"
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "switch (x) {}": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          discriminant: {
            type: "Identifier",
            start: 8,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 9
              }
            },
            name: "x"
          },
          cases: []
        }
      ]
    },
    "switch (answer) { case 42: hi(); break; }": {
      type: "Program",
      start: 0,
      end: 41,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 41
        }
      },
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 41,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 41
            }
          },
          discriminant: {
            type: "Identifier",
            start: 8,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "answer"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 18,
              end: 39,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 39
                }
              },
              consequent: [
                {
                  type: "ExpressionStatement",
                  start: 27,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 27
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 27,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 27,
                      end: 29,
                      loc: {
                        start: {
                          line: 1,
                          column: 27
                        },
                        end: {
                          line: 1,
                          column: 29
                        }
                      },
                      name: "hi"
                    },
                    arguments: []
                  }
                },
                {
                  type: "BreakStatement",
                  start: 33,
                  end: 39,
                  loc: {
                    start: {
                      line: 1,
                      column: 33
                    },
                    end: {
                      line: 1,
                      column: 39
                    }
                  },
                  label: null
                }
              ],
              test: {
                type: "Literal",
                start: 23,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ]
    },
    "switch (answer) { case 42: hi(); break; default: break }": {
      type: "Program",
      start: 0,
      end: 56,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 56
        }
      },
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 56,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 56
            }
          },
          discriminant: {
            type: "Identifier",
            start: 8,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "answer"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 18,
              end: 39,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 39
                }
              },
              consequent: [
                {
                  type: "ExpressionStatement",
                  start: 27,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 27
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 27,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 27,
                      end: 29,
                      loc: {
                        start: {
                          line: 1,
                          column: 27
                        },
                        end: {
                          line: 1,
                          column: 29
                        }
                      },
                      name: "hi"
                    },
                    arguments: []
                  }
                },
                {
                  type: "BreakStatement",
                  start: 33,
                  end: 39,
                  loc: {
                    start: {
                      line: 1,
                      column: 33
                    },
                    end: {
                      line: 1,
                      column: 39
                    }
                  },
                  label: null
                }
              ],
              test: {
                type: "Literal",
                start: 23,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                value: 42,
                raw: "42"
              }
            },
            {
              type: "SwitchCase",
              start: 40,
              end: 54,
              loc: {
                start: {
                  line: 1,
                  column: 40
                },
                end: {
                  line: 1,
                  column: 54
                }
              },
              consequent: [
                {
                  type: "BreakStatement",
                  start: 49,
                  end: 54,
                  loc: {
                    start: {
                      line: 1,
                      column: 49
                    },
                    end: {
                      line: 1,
                      column: 54
                    }
                  },
                  label: null
                }
              ],
              test: null
            }
          ]
        }
      ]
    },
    "start: for (;;) break start": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          body: {
            type: "ForStatement",
            start: 7,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 27
              }
            },
            init: null,
            test: null,
            update: null,
            body: {
              type: "BreakStatement",
              start: 16,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              label: {
                type: "Identifier",
                start: 22,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 22
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                name: "start"
              }
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            name: "start"
          }
        }
      ]
    },
    "start: while (true) break start": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          body: {
            type: "WhileStatement",
            start: 7,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 31
              }
            },
            test: {
              type: "Literal",
              start: 14,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              value: true,
              raw: "true"
            },
            body: {
              type: "BreakStatement",
              start: 20,
              end: 31,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 31
                }
              },
              label: {
                type: "Identifier",
                start: 26,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 26
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                name: "start"
              }
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            name: "start"
          }
        }
      ]
    },
    "throw x;": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ThrowStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          argument: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "x"
          }
        }
      ]
    },
    "throw x * y": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ThrowStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          argument: {
            type: "BinaryExpression",
            start: 6,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 11
              }
            },
            left: {
              type: "Identifier",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              name: "x"
            },
            operator: "*",
            right: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "throw { message: \"Error\" }": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "ThrowStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          argument: {
            type: "ObjectExpression",
            start: 6,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 26
              }
            },
            properties: [
              {
                type: "Property",
                start: 8,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                key: {
                  type: "Identifier",
                  start: 8,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  name: "message"
                },
                value: {
                  type: "Literal",
                  start: 17,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  value: "Error",
                  raw: "\"Error\""
                },
                kind: "init"
              }
            ]
          }
        }
      ]
    },
    "try { } catch (e) { }": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 7
              }
            },
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 8,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 21
              }
            },
            param: {
              type: "Identifier",
              start: 15,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "e"
            },
            body: {
              type: "BlockStatement",
              start: 18,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              body: []
            }
          },
          finalizer: null
        }
      ]
    },
    "try { } catch (eval) { }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 7
              }
            },
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 8,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 24
              }
            },
            param: {
              type: "Identifier",
              start: 15,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              name: "eval"
            },
            body: {
              type: "BlockStatement",
              start: 21,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              body: []
            }
          },
          finalizer: null
        }
      ]
    },
    "try { } catch (arguments) { }": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 7
              }
            },
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 8,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 29
              }
            },
            param: {
              type: "Identifier",
              start: 15,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              name: "arguments"
            },
            body: {
              type: "BlockStatement",
              start: 26,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              body: []
            }
          },
          finalizer: null
        }
      ]
    },
    "try { } catch (e) { say(e) }": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 7
              }
            },
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 8,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 28
              }
            },
            param: {
              type: "Identifier",
              start: 15,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "e"
            },
            body: {
              type: "BlockStatement",
              start: 18,
              end: 28,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 28
                }
              },
              body: [
                {
                  type: "ExpressionStatement",
                  start: 20,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 20,
                    end: 26,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 26
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 20,
                      end: 23,
                      loc: {
                        start: {
                          line: 1,
                          column: 20
                        },
                        end: {
                          line: 1,
                          column: 23
                        }
                      },
                      name: "say"
                    },
                    arguments: [
                      {
                        type: "Identifier",
                        start: 24,
                        end: 25,
                        loc: {
                          start: {
                            line: 1,
                            column: 24
                          },
                          end: {
                            line: 1,
                            column: 25
                          }
                        },
                        name: "e"
                      }
                    ]
                  }
                }
              ]
            }
          },
          finalizer: null
        }
      ]
    },
    "try { } finally { cleanup(stuff) }": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 7
              }
            },
            body: []
          },
          handler: null,
          finalizer: {
            type: "BlockStatement",
            start: 16,
            end: 34,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 34
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 18,
                end: 32,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 32
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 18,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 18
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 18,
                    end: 25,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 25
                      }
                    },
                    name: "cleanup"
                  },
                  arguments: [
                    {
                      type: "Identifier",
                      start: 26,
                      end: 31,
                      loc: {
                        start: {
                          line: 1,
                          column: 26
                        },
                        end: {
                          line: 1,
                          column: 31
                        }
                      },
                      name: "stuff"
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "try { doThat(); } catch (e) { say(e) }": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 17
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 6,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 6,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 6,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    name: "doThat"
                  },
                  arguments: []
                }
              }
            ]
          },
          handler: {
            type: "CatchClause",
            start: 18,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 38
              }
            },
            param: {
              type: "Identifier",
              start: 25,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              name: "e"
            },
            body: {
              type: "BlockStatement",
              start: 28,
              end: 38,
              loc: {
                start: {
                  line: 1,
                  column: 28
                },
                end: {
                  line: 1,
                  column: 38
                }
              },
              body: [
                {
                  type: "ExpressionStatement",
                  start: 30,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 30
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 30,
                    end: 36,
                    loc: {
                      start: {
                        line: 1,
                        column: 30
                      },
                      end: {
                        line: 1,
                        column: 36
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 30,
                      end: 33,
                      loc: {
                        start: {
                          line: 1,
                          column: 30
                        },
                        end: {
                          line: 1,
                          column: 33
                        }
                      },
                      name: "say"
                    },
                    arguments: [
                      {
                        type: "Identifier",
                        start: 34,
                        end: 35,
                        loc: {
                          start: {
                            line: 1,
                            column: 34
                          },
                          end: {
                            line: 1,
                            column: 35
                          }
                        },
                        name: "e"
                      }
                    ]
                  }
                }
              ]
            }
          },
          finalizer: null
        }
      ]
    },
    "try { doThat(); } catch (e) { say(e) } finally { cleanup(stuff) }": {
      type: "Program",
      start: 0,
      end: 65,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 65
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 65,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 65
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 17
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 6,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 6,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 6,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    name: "doThat"
                  },
                  arguments: []
                }
              }
            ]
          },
          handler: {
            type: "CatchClause",
            start: 18,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 38
              }
            },
            param: {
              type: "Identifier",
              start: 25,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              name: "e"
            },
            body: {
              type: "BlockStatement",
              start: 28,
              end: 38,
              loc: {
                start: {
                  line: 1,
                  column: 28
                },
                end: {
                  line: 1,
                  column: 38
                }
              },
              body: [
                {
                  type: "ExpressionStatement",
                  start: 30,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 30
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 30,
                    end: 36,
                    loc: {
                      start: {
                        line: 1,
                        column: 30
                      },
                      end: {
                        line: 1,
                        column: 36
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 30,
                      end: 33,
                      loc: {
                        start: {
                          line: 1,
                          column: 30
                        },
                        end: {
                          line: 1,
                          column: 33
                        }
                      },
                      name: "say"
                    },
                    arguments: [
                      {
                        type: "Identifier",
                        start: 34,
                        end: 35,
                        loc: {
                          start: {
                            line: 1,
                            column: 34
                          },
                          end: {
                            line: 1,
                            column: 35
                          }
                        },
                        name: "e"
                      }
                    ]
                  }
                }
              ]
            }
          },
          finalizer: {
            type: "BlockStatement",
            start: 47,
            end: 65,
            loc: {
              start: {
                line: 1,
                column: 47
              },
              end: {
                line: 1,
                column: 65
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 49,
                end: 63,
                loc: {
                  start: {
                    line: 1,
                    column: 49
                  },
                  end: {
                    line: 1,
                    column: 63
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 49,
                  end: 63,
                  loc: {
                    start: {
                      line: 1,
                      column: 49
                    },
                    end: {
                      line: 1,
                      column: 63
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 49,
                    end: 56,
                    loc: {
                      start: {
                        line: 1,
                        column: 49
                      },
                      end: {
                        line: 1,
                        column: 56
                      }
                    },
                    name: "cleanup"
                  },
                  arguments: [
                    {
                      type: "Identifier",
                      start: 57,
                      end: 62,
                      loc: {
                        start: {
                          line: 1,
                          column: 57
                        },
                        end: {
                          line: 1,
                          column: 62
                        }
                      },
                      name: "stuff"
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "debugger;": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "DebuggerStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          }
        }
      ]
    },
    "function hello() { sayHi(); }": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 17,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 17
              },
              end: {
                line: 1,
                column: 29
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 19,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 19,
                    end: 24,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 24
                      }
                    },
                    name: "sayHi"
                  },
                  arguments: []
                }
              }
            ]
          },
          expression: false
        }
      ]
    },
    "function eval() { }": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            name: "eval"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 16,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 19
              }
            },
            body: []
          },
          expression: false
        }
      ]
    },
    "function arguments() { }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 18
              }
            },
            name: "arguments"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 21,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 24
              }
            },
            body: []
          },
          expression: false
        }
      ]
    },
    "function test(t, t) { }": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            name: "test"
          },
          params: [
            {
              type: "Identifier",
              start: 14,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              name: "t"
            },
            {
              type: "Identifier",
              start: 17,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              name: "t"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 20,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 23
              }
            },
            body: []
          },
          expression: false
        }
      ]
    },
    "(function test(t, t) { })": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 24
              }
            },
            id: {
              type: "Identifier",
              start: 10,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              name: "test"
            },
            params: [
              {
                type: "Identifier",
                start: 15,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                name: "t"
              },
              {
                type: "Identifier",
                start: 18,
                end: 19,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 19
                  }
                },
                name: "t"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 21,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              body: []
            },
            expression: false
          }
        }
      ]
    },
    "function eval() { function inner() { \"use strict\" } }": {
      type: "Program",
      start: 0,
      end: 53,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 53
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 53,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 53
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            name: "eval"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 16,
            end: 53,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 53
              }
            },
            body: [
              {
                type: "FunctionDeclaration",
                start: 18,
                end: 51,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 51
                  }
                },
                id: {
                  type: "Identifier",
                  start: 27,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 27
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  name: "inner"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 35,
                  end: 51,
                  loc: {
                    start: {
                      line: 1,
                      column: 35
                    },
                    end: {
                      line: 1,
                      column: 51
                    }
                  },
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 37,
                      end: 49,
                      loc: {
                        start: {
                          line: 1,
                          column: 37
                        },
                        end: {
                          line: 1,
                          column: 49
                        }
                      },
                      expression: {
                        type: "Literal",
                        start: 37,
                        end: 49,
                        loc: {
                          start: {
                            line: 1,
                            column: 37
                          },
                          end: {
                            line: 1,
                            column: 49
                          }
                        },
                        value: "use strict",
                        raw: "\"use strict\""
                      }
                    }
                  ]
                },
                expression: false
              }
            ]
          },
          expression: false
        }
      ]
    },
    "function hello(a) { sayHi(); }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          params: [
            {
              type: "Identifier",
              start: 15,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "a"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 18,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 30
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 20,
                end: 28,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 28
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 20,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 20,
                    end: 25,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 25
                      }
                    },
                    name: "sayHi"
                  },
                  arguments: []
                }
              }
            ]
          },
          expression: false
        }
      ]
    },
    "function hello(a, b) { sayHi(); }": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          params: [
            {
              type: "Identifier",
              start: 15,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "a"
            },
            {
              type: "Identifier",
              start: 18,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              name: "b"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 21,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 33
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 23,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 23,
                  end: 30,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 30
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 23,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 23
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    name: "sayHi"
                  },
                  arguments: []
                }
              }
            ]
          },
          expression: false
        }
      ]
    },
    "var hi = function() { sayHi() };": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 32
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 32
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 31,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 31
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "hi"
              },
              init: {
                type: "FunctionExpression",
                start: 9,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                id: null,
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 20,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 22,
                      end: 29,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 29
                        }
                      },
                      expression: {
                        type: "CallExpression",
                        start: 22,
                        end: 29,
                        loc: {
                          start: {
                            line: 1,
                            column: 22
                          },
                          end: {
                            line: 1,
                            column: 29
                          }
                        },
                        callee: {
                          type: "Identifier",
                          start: 22,
                          end: 27,
                          loc: {
                            start: {
                              line: 1,
                              column: 22
                            },
                            end: {
                              line: 1,
                              column: 27
                            }
                          },
                          name: "sayHi"
                        },
                        arguments: []
                      }
                    }
                  ]
                },
                expression: false
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var hi = function eval() { };": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 28,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 28
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "hi"
              },
              init: {
                type: "FunctionExpression",
                start: 9,
                end: 28,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 28
                  }
                },
                id: {
                  type: "Identifier",
                  start: 18,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 18
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  name: "eval"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 25,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 25
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  body: []
                },
                expression: false
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var hi = function arguments() { };": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "hi"
              },
              init: {
                type: "FunctionExpression",
                start: 9,
                end: 33,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 33
                  }
                },
                id: {
                  type: "Identifier",
                  start: 18,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 18
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  name: "arguments"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 30,
                  end: 33,
                  loc: {
                    start: {
                      line: 1,
                      column: 30
                    },
                    end: {
                      line: 1,
                      column: 33
                    }
                  },
                  body: []
                },
                expression: false
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "var hello = function hi() { sayHi() };": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 37,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 37
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "hello"
              },
              init: {
                type: "FunctionExpression",
                start: 12,
                end: 37,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 37
                  }
                },
                id: {
                  type: "Identifier",
                  start: 21,
                  end: 23,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 23
                    }
                  },
                  name: "hi"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 26,
                  end: 37,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 37
                    }
                  },
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 28,
                      end: 35,
                      loc: {
                        start: {
                          line: 1,
                          column: 28
                        },
                        end: {
                          line: 1,
                          column: 35
                        }
                      },
                      expression: {
                        type: "CallExpression",
                        start: 28,
                        end: 35,
                        loc: {
                          start: {
                            line: 1,
                            column: 28
                          },
                          end: {
                            line: 1,
                            column: 35
                          }
                        },
                        callee: {
                          type: "Identifier",
                          start: 28,
                          end: 33,
                          loc: {
                            start: {
                              line: 1,
                              column: 28
                            },
                            end: {
                              line: 1,
                              column: 33
                            }
                          },
                          name: "sayHi"
                        },
                        arguments: []
                      }
                    }
                  ]
                },
                expression: false
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "(function(){})": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 13
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              body: []
            },
            expression: false
          }
        }
      ]
    },
    "{ x\n++y }": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          body: [
            {
              type: "ExpressionStatement",
              start: 2,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              expression: {
                type: "Identifier",
                start: 2,
                end: 3,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 3
                  }
                },
                name: "x"
              }
            },
            {
              type: "ExpressionStatement",
              start: 4,
              end: 7,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 3
                }
              },
              expression: {
                type: "UpdateExpression",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 3
                  }
                },
                operator: "++",
                prefix: true,
                argument: {
                  type: "Identifier",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 2,
                      column: 2
                    },
                    end: {
                      line: 2,
                      column: 3
                    }
                  },
                  name: "y"
                }
              }
            }
          ]
        }
      ]
    },
    "{ x\n--y }": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          body: [
            {
              type: "ExpressionStatement",
              start: 2,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              expression: {
                type: "Identifier",
                start: 2,
                end: 3,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 3
                  }
                },
                name: "x"
              }
            },
            {
              type: "ExpressionStatement",
              start: 4,
              end: 7,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 3
                }
              },
              expression: {
                type: "UpdateExpression",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 3
                  }
                },
                operator: "--",
                prefix: true,
                argument: {
                  type: "Identifier",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 2,
                      column: 2
                    },
                    end: {
                      line: 2,
                      column: 3
                    }
                  },
                  name: "y"
                }
              }
            }
          ]
        }
      ]
    },
    "var x /* comment */;": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: null
            }
          ],
          kind: "var"
        }
      ]
    },
    "{ var x = 14, y = 3\nz; }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 4
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 4
            }
          },
          body: [
            {
              type: "VariableDeclaration",
              start: 2,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              declarations: [
                {
                  type: "VariableDeclarator",
                  start: 6,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  id: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    name: "x"
                  },
                  init: {
                    type: "Literal",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    value: 14,
                    raw: "14"
                  }
                },
                {
                  type: "VariableDeclarator",
                  start: 14,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  id: {
                    type: "Identifier",
                    start: 14,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "y"
                  },
                  init: {
                    type: "Literal",
                    start: 18,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    value: 3,
                    raw: "3"
                  }
                }
              ],
              kind: "var"
            },
            {
              type: "ExpressionStatement",
              start: 20,
              end: 22,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 2
                }
              },
              expression: {
                type: "Identifier",
                start: 20,
                end: 21,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 1
                  }
                },
                name: "z"
              }
            }
          ]
        }
      ]
    },
    "while (true) { continue\nthere; }": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 8
              }
            },
            body: [
              {
                type: "ContinueStatement",
                start: 15,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 24,
                end: 30,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 6
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 24,
                  end: 29,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 5
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "while (true) { continue // Comment\nthere; }": {
      type: "Program",
      start: 0,
      end: 43,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 43,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 43,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 8
              }
            },
            body: [
              {
                type: "ContinueStatement",
                start: 15,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 35,
                end: 41,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 6
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 35,
                  end: 40,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 5
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "while (true) { continue /* Multiline\nComment */there; }": {
      type: "Program",
      start: 0,
      end: 55,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 18
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 55,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 18
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 55,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 18
              }
            },
            body: [
              {
                type: "ContinueStatement",
                start: 15,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 47,
                end: 53,
                loc: {
                  start: {
                    line: 2,
                    column: 10
                  },
                  end: {
                    line: 2,
                    column: 16
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 47,
                  end: 52,
                  loc: {
                    start: {
                      line: 2,
                      column: 10
                    },
                    end: {
                      line: 2,
                      column: 15
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "while (true) { break\nthere; }": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 8
              }
            },
            body: [
              {
                type: "BreakStatement",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 21,
                end: 27,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 6
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 21,
                  end: 26,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 5
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "while (true) { break // Comment\nthere; }": {
      type: "Program",
      start: 0,
      end: 40,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 40,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 40,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 8
              }
            },
            body: [
              {
                type: "BreakStatement",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 32,
                end: 38,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 6
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 32,
                  end: 37,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 5
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "while (true) { break /* Multiline\nComment */there; }": {
      type: "Program",
      start: 0,
      end: 52,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 18
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 52,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 18
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 52,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 18
              }
            },
            body: [
              {
                type: "BreakStatement",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 44,
                end: 50,
                loc: {
                  start: {
                    line: 2,
                    column: 10
                  },
                  end: {
                    line: 2,
                    column: 16
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 44,
                  end: 49,
                  loc: {
                    start: {
                      line: 2,
                      column: 10
                    },
                    end: {
                      line: 2,
                      column: 15
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "(function(){ return\nx; })": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 2,
                column: 4
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 2,
                  column: 4
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  argument: null
                },
                {
                  type: "ExpressionStatement",
                  start: 20,
                  end: 22,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 2
                    }
                  },
                  expression: {
                    type: "Identifier",
                    start: 20,
                    end: 21,
                    loc: {
                      start: {
                        line: 2,
                        column: 0
                      },
                      end: {
                        line: 2,
                        column: 1
                      }
                    },
                    name: "x"
                  }
                }
              ]
            },
            expression: false
          }
        }
      ]
    },
    "(function(){ return // Comment\nx; })": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 35,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 2,
                column: 4
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 2,
                  column: 4
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  argument: null
                },
                {
                  type: "ExpressionStatement",
                  start: 31,
                  end: 33,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 2
                    }
                  },
                  expression: {
                    type: "Identifier",
                    start: 31,
                    end: 32,
                    loc: {
                      start: {
                        line: 2,
                        column: 0
                      },
                      end: {
                        line: 2,
                        column: 1
                      }
                    },
                    name: "x"
                  }
                }
              ]
            },
            expression: false
          }
        }
      ]
    },
    "(function(){ return/* Multiline\nComment */x; })": {
      type: "Program",
      start: 0,
      end: 47,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 47,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 15
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 46,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 2,
                column: 14
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 46,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 2,
                  column: 14
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  argument: null
                },
                {
                  type: "ExpressionStatement",
                  start: 42,
                  end: 44,
                  loc: {
                    start: {
                      line: 2,
                      column: 10
                    },
                    end: {
                      line: 2,
                      column: 12
                    }
                  },
                  expression: {
                    type: "Identifier",
                    start: 42,
                    end: 43,
                    loc: {
                      start: {
                        line: 2,
                        column: 10
                      },
                      end: {
                        line: 2,
                        column: 11
                      }
                    },
                    name: "x"
                  }
                }
              ]
            },
            expression: false
          }
        }
      ]
    },
    "{ throw error\nerror; }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          body: [
            {
              type: "ThrowStatement",
              start: 2,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              argument: {
                type: "Identifier",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "error"
              }
            },
            {
              type: "ExpressionStatement",
              start: 14,
              end: 20,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 6
                }
              },
              expression: {
                type: "Identifier",
                start: 14,
                end: 19,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 5
                  }
                },
                name: "error"
              }
            }
          ]
        }
      ]
    },
    "{ throw error// Comment\nerror; }": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          body: [
            {
              type: "ThrowStatement",
              start: 2,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              argument: {
                type: "Identifier",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "error"
              }
            },
            {
              type: "ExpressionStatement",
              start: 24,
              end: 30,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 6
                }
              },
              expression: {
                type: "Identifier",
                start: 24,
                end: 29,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 5
                  }
                },
                name: "error"
              }
            }
          ]
        }
      ]
    },
    "{ throw error/* Multiline\nComment */error; }": {
      type: "Program",
      start: 0,
      end: 44,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 18
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 44,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 18
            }
          },
          body: [
            {
              type: "ThrowStatement",
              start: 2,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              argument: {
                type: "Identifier",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "error"
              }
            },
            {
              type: "ExpressionStatement",
              start: 36,
              end: 42,
              loc: {
                start: {
                  line: 2,
                  column: 10
                },
                end: {
                  line: 2,
                  column: 16
                }
              },
              expression: {
                type: "Identifier",
                start: 36,
                end: 41,
                loc: {
                  start: {
                    line: 2,
                    column: 10
                  },
                  end: {
                    line: 2,
                    column: 15
                  }
                },
                name: "error"
              }
            }
          ]
        }
      ]
    },
    "": {
      type: "Program",
      start: 0,
      end: 0,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 0
        }
      },
      body: []
    },
    "foo: if (true) break foo;": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          body: {
            type: "IfStatement",
            start: 5,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 25
              }
            },
            test: {
              type: "Literal",
              start: 9,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              value: true,
              raw: "true"
            },
            consequent: {
              type: "BreakStatement",
              start: 15,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              label: {
                type: "Identifier",
                start: 21,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 21
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "foo"
              }
            },
            alternate: null
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            name: "foo"
          }
        }
      ]
    },
    "(function () {\n 'use strict';\n '\u0000';\n}())": {
      type: "Program",
      start: 0,
      end: 40,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 4,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 40,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 4,
              column: 4
            }
          },
          expression: {
            type: "CallExpression",
            start: 1,
            end: 39,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 4,
                column: 3
              }
            },
            callee: {
              type: "FunctionExpression",
              start: 1,
              end: 37,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 4,
                  column: 1
                }
              },
              id: null,
              params: [],
              body: {
                type: "BlockStatement",
                start: 13,
                end: 37,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 4,
                    column: 1
                  }
                },
                body: [
                  {
                    type: "ExpressionStatement",
                    start: 16,
                    end: 29,
                    loc: {
                      start: {
                        line: 2,
                        column: 1
                      },
                      end: {
                        line: 2,
                        column: 14
                      }
                    },
                    expression: {
                      type: "Literal",
                      start: 16,
                      end: 28,
                      loc: {
                        start: {
                          line: 2,
                          column: 1
                        },
                        end: {
                          line: 2,
                          column: 13
                        }
                      },
                      value: "use strict",
                      raw: "'use strict'"
                    }
                  },
                  {
                    type: "ExpressionStatement",
                    start: 31,
                    end: 35,
                    loc: {
                      start: {
                        line: 3,
                        column: 1
                      },
                      end: {
                        line: 3,
                        column: 5
                      }
                    },
                    expression: {
                      type: "Literal",
                      start: 31,
                      end: 34,
                      loc: {
                        start: {
                          line: 3,
                          column: 1
                        },
                        end: {
                          line: 3,
                          column: 4
                        }
                      },
                      value: "\u0000",
                      raw: "'\u0000'"
                    }
                  }
                ]
              },
              expression: false
            },
            arguments: []
          }
        }
      ]
    },
    "123..toString(10)": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            callee: {
              type: "MemberExpression",
              start: 0,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              object: {
                type: "Literal",
                start: 0,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                value: 123,
                raw: "123."
              },
              property: {
                type: "Identifier",
                start: 5,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "toString"
              },
              computed: false
            },
            arguments: [
              {
                type: "Literal",
                start: 14,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 14
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                value: 10,
                raw: "10"
              }
            ]
          }
        }
      ]
    },
    "123.+2": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Literal",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              value: 123,
              raw: "123."
            },
            operator: "+",
            right: {
              type: "Literal",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "a\u2028b": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 1
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 1,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            },
            name: "a"
          }
        },
        {
          type: "ExpressionStatement",
          start: 2,
          end: 3,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 1
            }
          },
          expression: {
            type: "Identifier",
            start: 2,
            end: 3,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 1
              }
            },
            name: "b"
          }
        }
      ]
    },
    "'a\\u0026b'": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            value: "a&b",
            raw: "'a\\u0026b'"
          }
        }
      ]
    },
    "foo: 10; foo: 20;": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 5,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 8
              }
            },
            expression: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 10,
              raw: "10"
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            name: "foo"
          }
        },
        {
          type: "LabeledStatement",
          start: 9,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 9
            },
            end: {
              line: 1,
              column: 17
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 14,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 17
              }
            },
            expression: {
              type: "Literal",
              start: 14,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              value: 20,
              raw: "20"
            }
          },
          label: {
            type: "Identifier",
            start: 9,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 12
              }
            },
            name: "foo"
          }
        }
      ]
    },
    "if(1)/  foo/": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          test: {
            type: "Literal",
            start: 3,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 1,
            raw: "1"
          },
          consequent: {
            type: "ExpressionStatement",
            start: 5,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 12
              }
            },
            expression: {
              type: "Literal",
              start: 5,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              value: {},
              raw: "/  foo/",
              regex: {
                pattern: "  foo",
                flags: ""
              }
            }
          },
          alternate: null
        }
      ]
    },
    "price_9̶9̶_89": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            name: "price_9̶9̶_89"
          }
        }
      ]
    },
    "function hello() { 'use strict'; \"\\0\"; }": {
      type: "Program",
      start: 0,
      end: 40,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 40
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 40,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 40
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 17,
            end: 40,
            loc: {
              start: {
                line: 1,
                column: 17
              },
              end: {
                line: 1,
                column: 40
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 32,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 32
                  }
                },
                expression: {
                  type: "Literal",
                  start: 19,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  value: "use strict",
                  raw: "'use strict'"
                }
              },
              {
                type: "ExpressionStatement",
                start: 33,
                end: 38,
                loc: {
                  start: {
                    line: 1,
                    column: 33
                  },
                  end: {
                    line: 1,
                    column: 38
                  }
                },
                expression: {
                  type: "Literal",
                  start: 33,
                  end: 37,
                  loc: {
                    start: {
                      line: 1,
                      column: 33
                    },
                    end: {
                      line: 1,
                      column: 37
                    }
                  },
                  value: "\u0000",
                  raw: "\"\\0\""
                }
              }
            ]
          },
          expression: false
        }
      ]
    },
    "var a = 1;": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        },
        source: "test.js"
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            },
            source: "test.js"
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                },
                source: "test.js"
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  },
                  source: "test.js"
                },
                name: "a"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  },
                  source: "test.js"
                },
                value: 1,
                raw: "1"
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "a.in / b": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            left: {
              type: "MemberExpression",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              object: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "a"
              },
              property: {
                type: "Identifier",
                start: 2,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                name: "in"
              },
              computed: false
            },
            operator: "/",
            right: {
              type: "Identifier",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "b"
            }
          }
        }
      ]
    },
    "return {} / 2": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ReturnStatement",
          start: 0,
          end: 13,
          argument: {
            type: "BinaryExpression",
            start: 7,
            end: 13,
            left: {
              type: "ObjectExpression",
              start: 7,
              end: 9,
              properties: []
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 12,
              end: 13,
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "return\n{}\n/foo/": {
      type: "Program",
      start: 0,
      end: 15,
      body: [
        {
          type: "ReturnStatement",
          start: 0,
          end: 6,
          argument: null
        },
        {
          type: "BlockStatement",
          start: 7,
          end: 9,
          body: []
        },
        {
          type: "ExpressionStatement",
          start: 10,
          end: 15,
          expression: {
            type: "Literal",
            start: 10,
            end: 15,
            value: {},
            raw: "/foo/",
            regex: {
              pattern: "foo",
              flags: ""
            }
          }
        }
      ]
    },
    "+{} / 2": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            left: {
              type: "UnaryExpression",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              operator: "+",
              prefix: true,
              argument: {
                type: "ObjectExpression",
                start: 1,
                end: 3,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 3
                  }
                },
                properties: []
              }
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "{}\n/foo/": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          body: []
        },
        {
          type: "ExpressionStatement",
          start: 3,
          end: 8,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 3,
            end: 8,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 5
              }
            },
            value: {},
            raw: "/foo/",
            regex: {
              pattern: "foo",
              flags: ""
            }
          }
        }
      ]
    },
    "x++\n{}\n/foo/": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 3,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            }
          }
        },
        {
          type: "BlockStatement",
          start: 4,
          end: 6,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 2
            }
          },
          body: []
        },
        {
          type: "ExpressionStatement",
          start: 7,
          end: 12,
          loc: {
            start: {
              line: 3,
              column: 0
            },
            end: {
              line: 3,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 7,
            end: 12,
            loc: {
              start: {
                line: 3,
                column: 0
              },
              end: {
                line: 3,
                column: 5
              }
            },
            value: {},
            raw: "/foo/",
            regex: {
              pattern: "foo",
              flags: ""
            }
          }
        }
      ]
    },
    "{{}\n/foo/}": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 6
            }
          },
          body: [
            {
              type: "BlockStatement",
              start: 1,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              body: []
            },
            {
              type: "ExpressionStatement",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 5
                }
              },
              expression: {
                type: "Literal",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 5
                  }
                },
                value: {},
                raw: "/foo/",
                regex: {
                  pattern: "foo",
                  flags: ""
                }
              }
            }
          ]
        }
      ]
    },
    "while (1) /foo/": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 8
              }
            },
            value: 1,
            raw: "1"
          },
          body: {
            type: "ExpressionStatement",
            start: 10,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 10
              },
              end: {
                line: 1,
                column: 15
              }
            },
            expression: {
              type: "Literal",
              start: 10,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              value: {},
              raw: "/foo/",
              regex: {
                pattern: "foo",
                flags: ""
              }
            }
          }
        }
      ]
    },
    "while (1) {} /foo/": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 8
              }
            },
            value: 1,
            raw: "1"
          },
          body: {
            type: "BlockStatement",
            start: 10,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 10
              },
              end: {
                line: 1,
                column: 12
              }
            },
            body: []
          }
        },
        {
          type: "ExpressionStatement",
          start: 13,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 13
            },
            end: {
              line: 1,
              column: 18
            }
          },
          expression: {
            type: "Literal",
            start: 13,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 18
              }
            },
            value: {},
            raw: "/foo/",
            regex: {
              pattern: "foo",
              flags: ""
            }
          }
        }
      ]
    },
    "(1) / 2": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            left: {
              type: "Literal",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              value: 1,
              raw: "1"
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "({a: [1]}+[]) / 2": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            left: {
              type: "BinaryExpression",
              start: 1,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              left: {
                type: "ObjectExpression",
                start: 1,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                properties: [
                  {
                    type: "Property",
                    start: 2,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 2
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    key: {
                      type: "Identifier",
                      start: 2,
                      end: 3,
                      loc: {
                        start: {
                          line: 1,
                          column: 2
                        },
                        end: {
                          line: 1,
                          column: 3
                        }
                      },
                      name: "a"
                    },
                    value: {
                      type: "ArrayExpression",
                      start: 5,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      elements: [
                        {
                          type: "Literal",
                          start: 6,
                          end: 7,
                          loc: {
                            start: {
                              line: 1,
                              column: 6
                            },
                            end: {
                              line: 1,
                              column: 7
                            }
                          },
                          value: 1,
                          raw: "1"
                        }
                      ]
                    },
                    kind: "init"
                  }
                ]
              },
              operator: "+",
              right: {
                type: "ArrayExpression",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                elements: []
              }
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 16,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "{[1]}\n/foo/": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          body: [
            {
              type: "ExpressionStatement",
              start: 1,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              expression: {
                type: "ArrayExpression",
                start: 1,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                elements: [
                  {
                    type: "Literal",
                    start: 2,
                    end: 3,
                    loc: {
                      start: {
                        line: 1,
                        column: 2
                      },
                      end: {
                        line: 1,
                        column: 3
                      }
                    },
                    value: 1,
                    raw: "1"
                  }
                ]
              }
            }
          ]
        },
        {
          type: "ExpressionStatement",
          start: 6,
          end: 11,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 6,
            end: 11,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 5
              }
            },
            value: {},
            raw: "/foo/",
            regex: {
              pattern: "foo",
              flags: ""
            }
          }
        }
      ]
    },
    "switch(a) { case 1: {}\n/foo/ }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 7
        }
      },
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 7
            }
          },
          discriminant: {
            type: "Identifier",
            start: 7,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 8
              }
            },
            name: "a"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 12,
              end: 28,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 2,
                  column: 5
                }
              },
              consequent: [
                {
                  type: "BlockStatement",
                  start: 20,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  body: []
                },
                {
                  type: "ExpressionStatement",
                  start: 23,
                  end: 28,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 5
                    }
                  },
                  expression: {
                    type: "Literal",
                    start: 23,
                    end: 28,
                    loc: {
                      start: {
                        line: 2,
                        column: 0
                      },
                      end: {
                        line: 2,
                        column: 5
                      }
                    },
                    value: {},
                    raw: "/foo/",
                    regex: {
                      pattern: "foo",
                      flags: ""
                    }
                  }
                }
              ],
              test: {
                type: "Literal",
                start: 17,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                value: 1,
                raw: "1"
              }
            }
          ]
        }
      ]
    },
    "({1: {} / 2})": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 12
              }
            },
            properties: [
              {
                type: "Property",
                start: 2,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                key: {
                  type: "Literal",
                  start: 2,
                  end: 3,
                  loc: {
                    start: {
                      line: 1,
                      column: 2
                    },
                    end: {
                      line: 1,
                      column: 3
                    }
                  },
                  value: 1,
                  raw: "1"
                },
                value: {
                  type: "BinaryExpression",
                  start: 5,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  left: {
                    type: "ObjectExpression",
                    start: 5,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    properties: []
                  },
                  operator: "/",
                  right: {
                    type: "Literal",
                    start: 10,
                    end: 11,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 11
                      }
                    },
                    value: 2,
                    raw: "2"
                  }
                },
                kind: "init"
              }
            ]
          }
        }
      ]
    },
    "+x++ / 2": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            left: {
              type: "UnaryExpression",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              operator: "+",
              prefix: true,
              argument: {
                type: "UpdateExpression",
                start: 1,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                operator: "++",
                prefix: false,
                argument: {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  name: "x"
                }
              }
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "foo.in\n{}\n/foo/": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 3,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "foo"
            },
            property: {
              type: "Identifier",
              start: 4,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "in"
            },
            computed: false
          }
        },
        {
          type: "BlockStatement",
          start: 7,
          end: 9,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 2
            }
          },
          body: []
        },
        {
          type: "ExpressionStatement",
          start: 10,
          end: 15,
          loc: {
            start: {
              line: 3,
              column: 0
            },
            end: {
              line: 3,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 10,
            end: 15,
            loc: {
              start: {
                line: 3,
                column: 0
              },
              end: {
                line: 3,
                column: 5
              }
            },
            value: {},
            raw: "/foo/",
            regex: {
              pattern: "foo",
              flags: ""
            }
          }
        }
      ]
    },
    "var x = function f() {} / 3;": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "BinaryExpression",
                start: 8,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                left: {
                  type: "FunctionExpression",
                  start: 8,
                  end: 23,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 23
                    }
                  },
                  id: {
                    type: "Identifier",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    name: "f"
                  },
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 21,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 21
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    body: []
                  },
                  expression: false
                },
                operator: "/",
                right: {
                  type: "Literal",
                  start: 26,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  value: 3,
                  raw: "3"
                }
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "+function f() {} / 3;": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            left: {
              type: "UnaryExpression",
              start: 0,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              operator: "+",
              prefix: true,
              argument: {
                type: "FunctionExpression",
                start: 1,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                id: {
                  type: "Identifier",
                  start: 10,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  name: "f"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 14,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  body: []
                },
                expression: false
              }
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 19,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              value: 3,
              raw: "3"
            }
          }
        }
      ]
    },
    "foo: function x() {} /regexp/": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          body: {
            type: "FunctionDeclaration",
            start: 5,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 20
              }
            },
            id: {
              type: "Identifier",
              start: 14,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              name: "x"
            },
            params: [],
            body: {
              type: "BlockStatement",
              start: 18,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              body: []
            },
            expression: false
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            name: "foo"
          }
        },
        {
          type: "ExpressionStatement",
          start: 21,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 21
            },
            end: {
              line: 1,
              column: 29
            }
          },
          expression: {
            type: "Literal",
            start: 21,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 29
              }
            },
            value: {},
            raw: "/regexp/",
            regex: {
              pattern: "regexp",
              flags: ""
            }
          }
        }
      ]
    },
    "x = {foo: function x() {} / divide}": {
      type: "Program",
      start: 0,
      end: 35,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 35
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 35,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 35
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 35,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 35
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 5,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 5,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    name: "foo"
                  },
                  value: {
                    type: "BinaryExpression",
                    start: 10,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    left: {
                      type: "FunctionExpression",
                      start: 10,
                      end: 25,
                      loc: {
                        start: {
                          line: 1,
                          column: 10
                        },
                        end: {
                          line: 1,
                          column: 25
                        }
                      },
                      id: {
                        type: "Identifier",
                        start: 19,
                        end: 20,
                        loc: {
                          start: {
                            line: 1,
                            column: 19
                          },
                          end: {
                            line: 1,
                            column: 20
                          }
                        },
                        name: "x"
                      },
                      params: [],
                      body: {
                        type: "BlockStatement",
                        start: 23,
                        end: 25,
                        loc: {
                          start: {
                            line: 1,
                            column: 23
                          },
                          end: {
                            line: 1,
                            column: 25
                          }
                        },
                        body: []
                      },
                      expression: false
                    },
                    operator: "/",
                    right: {
                      type: "Identifier",
                      start: 28,
                      end: 34,
                      loc: {
                        start: {
                          line: 1,
                          column: 28
                        },
                        end: {
                          line: 1,
                          column: 34
                        }
                      },
                      name: "divide"
                    }
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ]
    },
    "foo; function f() {} /regexp/": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            name: "foo"
          }
        },
        {
          type: "FunctionDeclaration",
          start: 5,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 5
            },
            end: {
              line: 1,
              column: 20
            }
          },
          id: {
            type: "Identifier",
            start: 14,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 15
              }
            },
            name: "f"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 18,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 20
              }
            },
            body: []
          },
          expression: false
        },
        {
          type: "ExpressionStatement",
          start: 21,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 21
            },
            end: {
              line: 1,
              column: 29
            }
          },
          expression: {
            type: "Literal",
            start: 21,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 29
              }
            },
            value: {},
            raw: "/regexp/",
            regex: {
              pattern: "regexp",
              flags: ""
            }
          }
        }
      ]
    },
    "{function f() {} /regexp/}": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          body: [
            {
              type: "FunctionDeclaration",
              start: 1,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              id: {
                type: "Identifier",
                start: 10,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "f"
              },
              params: [],
              body: {
                type: "BlockStatement",
                start: 14,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 14
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                body: []
              },
              expression: false
            },
            {
              type: "ExpressionStatement",
              start: 17,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              expression: {
                type: "Literal",
                start: 17,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                value: {},
                raw: "/regexp/",
                regex: {
                  pattern: "regexp",
                  flags: ""
                }
              }
            }
          ]
        }
      ]
    },
    "{}/=/": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          body: []
        },
        {
          type: "ExpressionStatement",
          start: 2,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 2
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 2,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 2
              },
              end: {
                line: 1,
                column: 5
              }
            },
            value: {},
            raw: "/=/",
            regex: {
              pattern: "=",
              flags: ""
            }
          }
        }
      ]
    },
    "foo <!--bar\n+baz": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 4
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 2,
                column: 4
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "foo"
            },
            operator: "+",
            right: {
              type: "Identifier",
              start: 13,
              end: 16,
              loc: {
                start: {
                  line: 2,
                  column: 1
                },
                end: {
                  line: 2,
                  column: 4
                }
              },
              name: "baz"
            }
          }
        }
      ]
    },
    "x = y-->10;\n --> nothing": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 12
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              left: {
                type: "UpdateExpression",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                operator: "--",
                prefix: false,
                argument: {
                  type: "Identifier",
                  start: 4,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  name: "y"
                }
              },
              operator: ">",
              right: {
                type: "Literal",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                value: 10,
                raw: "10"
              }
            }
          }
        }
      ]
    },
    "'use strict';\nobject.static();": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            value: "use strict",
            raw: "'use strict'"
          }
        },
        {
          type: "ExpressionStatement",
          start: 14,
          end: 30,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 16
            }
          },
          expression: {
            type: "CallExpression",
            start: 14,
            end: 29,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 15
              }
            },
            callee: {
              type: "MemberExpression",
              start: 14,
              end: 27,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 13
                }
              },
              object: {
                type: "Identifier",
                start: 14,
                end: 20,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 6
                  }
                },
                name: "object"
              },
              property: {
                type: "Identifier",
                start: 21,
                end: 27,
                loc: {
                  start: {
                    line: 2,
                    column: 7
                  },
                  end: {
                    line: 2,
                    column: 13
                  }
                },
                name: "static"
              },
              computed: false
            },
            arguments: []
          }
        }
      ]
    },
    "{": {
      type: "Error",
      message: "Unexpected token (1:1)"
    },
    "}": {
      type: "Error",
      message: "Unexpected token (1:0)"
    },
    "3ea": {
      type: "Error",
      message: "Invalid number (1:0)"
    },
    "3in []": {
      type: "Error",
      message: "Identifier directly after number (1:1)"
    },
    "3e": {
      type: "Error",
      message: "Invalid number (1:0)"
    },
    "3e+": {
      type: "Error",
      message: "Invalid number (1:0)"
    },
    "3e-": {
      type: "Error",
      message: "Invalid number (1:0)"
    },
    "3x": {
      type: "Error",
      message: "Identifier directly after number (1:1)"
    },
    "3x0": {
      type: "Error",
      message: "Identifier directly after number (1:1)"
    },
    "0x": {
      type: "Error",
      message: "Expected number in radix 16 (1:2)"
    },
    "'use strict'; 09": {
      type: "Error",
      message: "Invalid number (1:14)"
    },
    "'use strict'; 018": {
      type: "Error",
      message: "Invalid number (1:14)"
    },
    "01a": {
      type: "Error",
      message: "Identifier directly after number (1:2)"
    },
    "3in[]": {
      type: "Error",
      message: "Identifier directly after number (1:1)"
    },
    "0x3in[]": {
      type: "Error",
      message: "Identifier directly after number (1:3)"
    },
    "\"Hello\nWorld\"": {
      type: "Error",
      message: "Unterminated string constant (1:0)"
    },
    "x\\": {
      type: "Error",
      message: "Expecting Unicode escape sequence \\uXXXX (1:2)"
    },
    "x\\u005c": {
      type: "Error",
      message: "Invalid Unicode escape (1:1)"
    },
    "x\\u002a": {
      type: "Error",
      message: "Invalid Unicode escape (1:1)"
    },
    "/": {
      type: "Error",
      message: "Unterminated regular expression (1:1)"
    },
    "/test": {
      type: "Error",
      message: "Unterminated regular expression (1:1)"
    },
    "var x = /[a-z]/\\ux": {
      type: "Error",
      message: "Bad character escape sequence (1:17)"
    },
    "3 = 4": {
      type: "Error",
      message: "Assigning to rvalue (1:0)"
    },
    "func() = 4": {
      type: "Error",
      message: "Assigning to rvalue (1:0)"
    },
    "(1 + 1) = 10": {
      type: "Error",
      message: "Parenthesized pattern (1:0)"
    },
    "1++": {
      type: "Error",
      message: "Assigning to rvalue (1:0)"
    },
    "1--": {
      type: "Error",
      message: "Assigning to rvalue (1:0)"
    },
    "++1": {
      type: "Error",
      message: "Assigning to rvalue (1:2)"
    },
    "--1": {
      type: "Error",
      message: "Assigning to rvalue (1:2)"
    },
    "for((1 + 1) in list) process(x);": {
      type: "Error",
      message: "Assigning to rvalue (1:5)"
    },
    "[": {
      type: "Error",
      message: "Unexpected token (1:1)"
    },
    "[,": {
      type: "Error",
      message: "Unexpected token (1:2)"
    },
    "1 + {": {
      type: "Error",
      message: "Unexpected token (1:5)"
    },
    "1 + { t:t ": {
      type: "Error",
      message: "Unexpected token (1:10)"
    },
    "1 + { t:t,": {
      type: "Error",
      message: "Unexpected token (1:10)"
    },
    "var x = /\n/": {
      type: "Error",
      message: "Unterminated regular expression (1:9)"
    },
    "var x = \"\n": {
      type: "Error",
      message: "Unterminated string constant (1:8)"
    },
    "var if = 42": {
      type: "Error",
      message: "Unexpected token (1:4)"
    },
    "i + 2 = 42": {
      type: "Error",
      message: "Assigning to rvalue (1:0)"
    },
    "+i = 42": {
      type: "Error",
      message: "Assigning to rvalue (1:0)"
    },
    "1 + (": {
      type: "Error",
      message: "Unexpected token (1:5)"
    },
    "\n\n\n{": {
      type: "Error",
      message: "Unexpected token (4:1)"
    },
    "\n/* Some multiline\ncomment */\n)": {
      type: "Error",
      message: "Unexpected token (4:0)"
    },
    "{ set 1 }": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "{ get 2 }": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "({ set: s(if) { } })": {
      type: "Error",
      message: "Unexpected token (1:10)"
    },
    "({ set s(.) { } })": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "({ set: s() { } })": {
      type: "Error",
      message: "Unexpected token (1:12)"
    },
    "({ set: s(a, b) { } })": {
      type: "Error",
      message: "Unexpected token (1:16)"
    },
    "({ get: g(d) { } })": {
      type: "Error",
      message: "Unexpected token (1:13)"
    },
    "({ get i() { }, i: 42 })": {
      type: "Error",
      message: "Redefinition of property (1:16)"
    },
    "({ i: 42, get i() { } })": {
      type: "Error",
      message: "Redefinition of property (1:14)"
    },
    "({ set i(x) { }, i: 42 })": {
      type: "Error",
      message: "Redefinition of property (1:17)"
    },
    "({ i: 42, set i(x) { } })": {
      type: "Error",
      message: "Redefinition of property (1:14)"
    },
    "({ get i() { }, get i() { } })": {
      type: "Error",
      message: "Redefinition of property (1:20)"
    },
    "({ set i(x) { }, set i(x) { } })": {
      type: "Error",
      message: "Redefinition of property (1:21)"
    },
    "'use strict'; ({ __proto__: 1, __proto__: 2 })": {
      type: "Error",
      message: "Redefinition of property (1:31)"
    },
    "function t(...) { }": {
      type: "Error",
      message: "Unexpected token (1:11)"
    },
    "function t(if) { }": {
      type: "Error",
      message: "Unexpected token (1:11)"
    },
    "function t(true) { }": {
      type: "Error",
      message: "Unexpected token (1:11)"
    },
    "function t(false) { }": {
      type: "Error",
      message: "Unexpected token (1:11)"
    },
    "function t(null) { }": {
      type: "Error",
      message: "Unexpected token (1:11)"
    },
    "function null() { }": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "function true() { }": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "function false() { }": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "function if() { }": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "a b;": {
      type: "Error",
      message: "Unexpected token (1:2)"
    },
    "if.a;": {
      type: "Error",
      message: "Unexpected token (1:2)"
    },
    "a if;": {
      type: "Error",
      message: "Unexpected token (1:2)"
    },
    "a class;": {
      type: "Error",
      message: "Unexpected token (1:2)"
    },
    "break\n": {
      type: "Error",
      message: "Unsyntactic break (1:0)"
    },
    "break 1;": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "continue\n": {
      type: "Error",
      message: "Unsyntactic continue (1:0)"
    },
    "continue 2;": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "throw": {
      type: "Error",
      message: "Unexpected token (1:5)"
    },
    "throw;": {
      type: "Error",
      message: "Unexpected token (1:5)"
    },
    "for (var i, i2 in {});": {
      type: "Error",
      message: "Unexpected token (1:15)"
    },
    "for ((i in {}));": {
      type: "Error",
      message: "Unexpected token (1:14)"
    },
    "for (i + 1 in {});": {
      type: "Error",
      message: "Assigning to rvalue (1:5)"
    },
    "for (+i in {});": {
      type: "Error",
      message: "Assigning to rvalue (1:5)"
    },
    "if(false)": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "if(false) doThis(); else": {
      type: "Error",
      message: "Unexpected token (1:24)"
    },
    "do": {
      type: "Error",
      message: "Unexpected token (1:2)"
    },
    "while(false)": {
      type: "Error",
      message: "Unexpected token (1:12)"
    },
    "for(;;)": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "with(x)": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "try { }": {
      type: "Error",
      message: "Missing catch or finally clause (1:0)"
    },
    "‿ = 10": {
      type: "Error",
      message: "Unexpected character '‿' (1:0)"
    },
    "if(true) let a = 1;": {
      type: "Error",
      message: "Unexpected token (1:13)"
    },
    "switch (c) { default: default: }": {
      type: "Error",
      message: "Multiple default clauses (1:22)"
    },
    "new X().\"s\"": {
      type: "Error",
      message: "Unexpected token (1:8)"
    },
    "/*": {
      type: "Error",
      message: "Unterminated comment (1:0)"
    },
    "/*\n\n\n": {
      type: "Error",
      message: "Unterminated comment (1:0)"
    },
    "/**": {
      type: "Error",
      message: "Unterminated comment (1:0)"
    },
    "/*\n\n*": {
      type: "Error",
      message: "Unterminated comment (1:0)"
    },
    "/*hello": {
      type: "Error",
      message: "Unterminated comment (1:0)"
    },
    "/*hello  *": {
      type: "Error",
      message: "Unterminated comment (1:0)"
    },
    "\n]": {
      type: "Error",
      message: "Unexpected token (2:0)"
    },
    "\r]": {
      type: "Error",
      message: "Unexpected token (2:0)"
    },
    "\r\n]": {
      type: "Error",
      message: "Unexpected token (2:0)"
    },
    "\n\r]": {
      type: "Error",
      message: "Unexpected token (3:0)"
    },
    "//\r\n]": {
      type: "Error",
      message: "Unexpected token (2:0)"
    },
    "//\n\r]": {
      type: "Error",
      message: "Unexpected token (3:0)"
    },
    "/a\\\n/": {
      type: "Error",
      message: "Unterminated regular expression (1:1)"
    },
    "//\r \n]": {
      type: "Error",
      message: "Unexpected token (3:0)"
    },
    "/*\r\n*/]": {
      type: "Error",
      message: "Unexpected token (2:2)"
    },
    "/*\n\r*/]": {
      type: "Error",
      message: "Unexpected token (3:2)"
    },
    "/*\r \n*/]": {
      type: "Error",
      message: "Unexpected token (3:2)"
    },
    "\\\\": {
      type: "Error",
      message: "Expecting Unicode escape sequence \\uXXXX (1:1)"
    },
    "\\u005c": {
      type: "Error",
      message: "Invalid Unicode escape (1:0)"
    },
    "\\x": {
      type: "Error",
      message: "Expecting Unicode escape sequence \\uXXXX (1:1)"
    },
    "\\u0000": {
      type: "Error",
      message: "Invalid Unicode escape (1:0)"
    },
    "‌ = []": {
      type: "Error",
      message: "Unexpected character '‌' (1:0)"
    },
    "‍ = []": {
      type: "Error",
      message: "Unexpected character '‍' (1:0)"
    },
    "\"\\": {
      type: "Error",
      message: "Unterminated string constant (1:0)"
    },
    "\"\\u": {
      type: "Error",
      message: "Bad character escape sequence (1:3)"
    },
    "return": {
      type: "Error",
      message: "'return' outside of function (1:0)"
    },
    "break": {
      type: "Error",
      message: "Unsyntactic break (1:0)"
    },
    "continue": {
      type: "Error",
      message: "Unsyntactic continue (1:0)"
    },
    "switch (x) { default: continue; }": {
      type: "Error",
      message: "Unsyntactic continue (1:22)"
    },
    "do { x } *": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "while (true) { break x; }": {
      type: "Error",
      message: "Unsyntactic break (1:15)"
    },
    "while (true) { continue x; }": {
      type: "Error",
      message: "Unsyntactic continue (1:15)"
    },
    "x: while (true) { (function () { break x; }); }": {
      type: "Error",
      message: "Unsyntactic break (1:33)"
    },
    "x: while (true) { (function () { continue x; }); }": {
      type: "Error",
      message: "Unsyntactic continue (1:33)"
    },
    "x: while (true) { (function () { break; }); }": {
      type: "Error",
      message: "Unsyntactic break (1:33)"
    },
    "x: while (true) { (function () { continue; }); }": {
      type: "Error",
      message: "Unsyntactic continue (1:33)"
    },
    "x: while (true) { x: while (true) { } }": {
      type: "Error",
      message: "Label 'x' is already declared (1:18)"
    },
    "(function () { 'use strict'; delete i; }())": {
      type: "Error",
      message: "Deleting local variable in strict mode (1:29)"
    },
    "function x() { '\\12'; 'use strict'; }": {
      type: "Error",
      message: "Octal literal in strict mode (1:16)"
    },
    "(function () { 'use strict'; with (i); }())": {
      type: "Error",
      message: "'with' in strict mode (1:29)"
    },
    "function hello() {'use strict'; ({ i: 42, i: 42 }) }": {
      type: "Error",
      message: "Redefinition of property (1:42)"
    },
    "function hello() {'use strict'; ({ hasOwnProperty: 42, hasOwnProperty: 42 }) }": {
      type: "Error",
      message: "Redefinition of property (1:55)"
    },
    "function hello() {'use strict'; var eval = 10; }": {
      type: "Error",
      message: "Binding eval in strict mode (1:36)"
    },
    "function hello() {'use strict'; var arguments = 10; }": {
      type: "Error",
      message: "Binding arguments in strict mode (1:36)"
    },
    "function hello() {'use strict'; try { } catch (eval) { } }": {
      type: "Error",
      message: "Binding eval in strict mode (1:47)"
    },
    "function hello() {'use strict'; try { } catch (arguments) { } }": {
      type: "Error",
      message: "Binding arguments in strict mode (1:47)"
    },
    "function hello() {'use strict'; eval = 10; }": {
      type: "Error",
      message: "Assigning to eval in strict mode (1:32)"
    },
    "function hello() {'use strict'; arguments = 10; }": {
      type: "Error",
      message: "Assigning to arguments in strict mode (1:32)"
    },
    "function hello() {'use strict'; ++eval; }": {
      type: "Error",
      message: "Assigning to eval in strict mode (1:34)"
    },
    "function hello() {'use strict'; --eval; }": {
      type: "Error",
      message: "Assigning to eval in strict mode (1:34)"
    },
    "function hello() {'use strict'; ++arguments; }": {
      type: "Error",
      message: "Assigning to arguments in strict mode (1:34)"
    },
    "function hello() {'use strict'; --arguments; }": {
      type: "Error",
      message: "Assigning to arguments in strict mode (1:34)"
    },
    "function hello() {'use strict'; eval++; }": {
      type: "Error",
      message: "Assigning to eval in strict mode (1:32)"
    },
    "function hello() {'use strict'; eval--; }": {
      type: "Error",
      message: "Assigning to eval in strict mode (1:32)"
    },
    "function hello() {'use strict'; arguments++; }": {
      type: "Error",
      message: "Assigning to arguments in strict mode (1:32)"
    },
    "function hello() {'use strict'; arguments--; }": {
      type: "Error",
      message: "Assigning to arguments in strict mode (1:32)"
    },
    "function hello() {'use strict'; function eval() { } }": {
      type: "Error",
      message: "Binding eval in strict mode (1:41)"
    },
    "function hello() {'use strict'; function arguments() { } }": {
      type: "Error",
      message: "Binding arguments in strict mode (1:41)"
    },
    "function eval() {'use strict'; }": {
      type: "Error",
      message: "Binding eval in strict mode (1:9)"
    },
    "function arguments() {'use strict'; }": {
      type: "Error",
      message: "Binding arguments in strict mode (1:9)"
    },
    "function hello() {'use strict'; (function eval() { }()) }": {
      type: "Error",
      message: "Binding eval in strict mode (1:42)"
    },
    "function hello() {'use strict'; (function arguments() { }()) }": {
      type: "Error",
      message: "Binding arguments in strict mode (1:42)"
    },
    "(function eval() {'use strict'; })()": {
      type: "Error",
      message: "Binding eval in strict mode (1:10)"
    },
    "(function arguments() {'use strict'; })()": {
      type: "Error",
      message: "Binding arguments in strict mode (1:10)"
    },
    "function hello() {'use strict'; ({ s: function eval() { } }); }": {
      type: "Error",
      message: "Binding eval in strict mode (1:47)"
    },
    "(function package() {'use strict'; })()": {
      type: "Error",
      message: "Binding package in strict mode (1:10)"
    },
    "function hello() {'use strict'; ({ i: 10, set s(eval) { } }); }": {
      type: "Error",
      message: "Binding eval in strict mode (1:48)"
    },
    "function hello() {'use strict'; ({ set s(eval) { } }); }": {
      type: "Error",
      message: "Binding eval in strict mode (1:41)"
    },
    "function hello() {'use strict'; ({ s: function s(eval) { } }); }": {
      type: "Error",
      message: "Binding eval in strict mode (1:49)"
    },
    "function hello(eval) {'use strict';}": {
      type: "Error",
      message: "Binding eval in strict mode (1:15)"
    },
    "function hello(arguments) {'use strict';}": {
      type: "Error",
      message: "Binding arguments in strict mode (1:15)"
    },
    "function hello() { 'use strict'; function inner(eval) {} }": {
      type: "Error",
      message: "Binding eval in strict mode (1:48)"
    },
    "function hello() { 'use strict'; function inner(arguments) {} }": {
      type: "Error",
      message: "Binding arguments in strict mode (1:48)"
    },
    "function hello() { 'use strict'; \"\\1\"; }": {
      type: "Error",
      message: "Octal literal in strict mode (1:34)"
    },
    "function hello() { 'use strict'; \"\\00\"; }": {
      type: "Error",
      message: "Octal literal in strict mode (1:34)"
    },
    "function hello() { 'use strict'; \"\\000\"; }": {
      type: "Error",
      message: "Octal literal in strict mode (1:34)"
    },
    "function hello() { 'use strict'; 021; }": {
      type: "Error",
      message: "Invalid number (1:33)"
    },
    "function hello() { 'use strict'; ({ \"\\1\": 42 }); }": {
      type: "Error",
      message: "Octal literal in strict mode (1:37)"
    },
    "function hello() { 'use strict'; ({ 021: 42 }); }": {
      type: "Error",
      message: "Invalid number (1:36)"
    },
    "function hello() { \"use strict\"; function inner() { \"octal directive\\1\"; } }": {
      type: "Error",
      message: "Octal literal in strict mode (1:68)"
    },
    "function hello() { \"use strict\"; var implements; }": {
      type: "Error",
      message: "The keyword 'implements' is reserved (1:37)"
    },
    "function hello() { \"use strict\"; var interface; }": {
      type: "Error",
      message: "The keyword 'interface' is reserved (1:37)"
    },
    "function hello() { \"use strict\"; var package; }": {
      type: "Error",
      message: "The keyword 'package' is reserved (1:37)"
    },
    "function hello() { \"use strict\"; var private; }": {
      type: "Error",
      message: "The keyword 'private' is reserved (1:37)"
    },
    "function hello() { \"use strict\"; var protected; }": {
      type: "Error",
      message: "The keyword 'protected' is reserved (1:37)"
    },
    "function hello() { \"use strict\"; var public; }": {
      type: "Error",
      message: "The keyword 'public' is reserved (1:37)"
    },
    "function hello() { \"use strict\"; var static; }": {
      type: "Error",
      message: "The keyword 'static' is reserved (1:37)"
    },
    "function hello(static) { \"use strict\"; }": {
      type: "Error",
      message: "Binding static in strict mode (1:15)"
    },
    "function static() { \"use strict\"; }": {
      type: "Error",
      message: "Binding static in strict mode (1:9)"
    },
    "\"use strict\"; function static() { }": {
      type: "Error",
      message: "The keyword 'static' is reserved (1:23)"
    },
    "function a(t, t) { \"use strict\"; }": {
      type: "Error",
      message: "Argument name clash (1:14)"
    },
    "function a(eval) { \"use strict\"; }": {
      type: "Error",
      message: "Binding eval in strict mode (1:11)"
    },
    "function a(package) { \"use strict\"; }": {
      type: "Error",
      message: "Binding package in strict mode (1:11)"
    },
    "function a() { \"use strict\"; function b(t, t) { }; }": {
      type: "Error",
      message: "Argument name clash (1:43)"
    },
    "(function a(t, t) { \"use strict\"; })": {
      type: "Error",
      message: "Argument name clash (1:15)"
    },
    "function a() { \"use strict\"; (function b(t, t) { }); }": {
      type: "Error",
      message: "Argument name clash (1:44)"
    },
    "(function a(eval) { \"use strict\"; })": {
      type: "Error",
      message: "Binding eval in strict mode (1:12)"
    },
    "(function a(package) { \"use strict\"; })": {
      type: "Error",
      message: "Binding package in strict mode (1:12)"
    },
    "\"use strict\";function foo(){\"use strict\";}function bar(){var v = 015}": {
      type: "Error",
      message: "Invalid number (1:65)"
    },
    "var this = 10;": {
      type: "Error",
      message: "Unexpected token (1:4)"
    },
    "throw\n10;": {
      type: "Error",
      message: "Illegal newline after throw (1:5)"
    },
    "const a;": {
      type: "Error",
      message: "The keyword 'const' is reserved (1:0)"
    },
    "let x;": {
      type: "Error",
      message: "Unexpected token (1:4)"
    },
    "const a = 1;": {
      type: "Error",
      message: "The keyword 'const' is reserved (1:0)"
    },
    "let a = 1;": {
      type: "Error",
      message: "Unexpected token (1:4)"
    },
    "for(const x = 0;;);": {
      type: "Error",
      message: "The keyword 'const' is reserved (1:4)"
    },
    "for(let x = 0;;);": {
      type: "Error",
      message: "Unexpected token (1:8)"
    },
    "function a(b = c) {}": {
      type: "Error",
      message: "Unexpected token (1:13)"
    },
    "let++": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "let"
            }
          }
        }
      ]
    },
    "for(x of a);": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "for(var x of a);": {
      type: "Error",
      message: "Unexpected token (1:10)"
    },
    "function TestComments() {\n    // Bear class\n    function Bear(x,y,z) {\n      this.position = [x||0,y||0,z||0]\n    }\n\n    Bear.prototype.roar = function(message) {\n      return 'RAWWW: ' + message; // Whatever\n    };\n\n    function Cat() {\n    /* 1\n       2\n       3*/\n    }\n\n    Cat.prototype.roar = function(message) {\n      return 'MEOOWW: ' + /*stuff*/ message;\n    };\n}": {
      type: "Program",
      start: 0,
      end: 372,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 372,
          id: {
            type: "Identifier",
            start: 9,
            end: 21,
            name: "TestComments"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 24,
            end: 372,
            body: [
              {
                type: "FunctionDeclaration",
                start: 48,
                end: 115,
                id: {
                  type: "Identifier",
                  start: 57,
                  end: 61,
                  name: "Bear"
                },
                params: [
                  {
                    type: "Identifier",
                    start: 62,
                    end: 63,
                    name: "x"
                  },
                  {
                    type: "Identifier",
                    start: 64,
                    end: 65,
                    name: "y"
                  },
                  {
                    type: "Identifier",
                    start: 66,
                    end: 67,
                    name: "z"
                  }
                ],
                body: {
                  type: "BlockStatement",
                  start: 69,
                  end: 115,
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 77,
                      end: 109,
                      expression: {
                        type: "AssignmentExpression",
                        start: 77,
                        end: 109,
                        operator: "=",
                        left: {
                          type: "MemberExpression",
                          start: 77,
                          end: 90,
                          object: {
                            type: "ThisExpression",
                            start: 77,
                            end: 81
                          },
                          property: {
                            type: "Identifier",
                            start: 82,
                            end: 90,
                            name: "position"
                          },
                          computed: false
                        },
                        right: {
                          type: "ArrayExpression",
                          start: 93,
                          end: 109,
                          elements: [
                            {
                              type: "LogicalExpression",
                              start: 94,
                              end: 98,
                              left: {
                                type: "Identifier",
                                start: 94,
                                end: 95,
                                name: "x"
                              },
                              operator: "||",
                              right: {
                                type: "Literal",
                                start: 97,
                                end: 98,
                                value: 0,
                                raw: "0"
                              }
                            },
                            {
                              type: "LogicalExpression",
                              start: 99,
                              end: 103,
                              left: {
                                type: "Identifier",
                                start: 99,
                                end: 100,
                                name: "y"
                              },
                              operator: "||",
                              right: {
                                type: "Literal",
                                start: 102,
                                end: 103,
                                value: 0,
                                raw: "0"
                              }
                            },
                            {
                              type: "LogicalExpression",
                              start: 104,
                              end: 108,
                              left: {
                                type: "Identifier",
                                start: 104,
                                end: 105,
                                name: "z"
                              },
                              operator: "||",
                              right: {
                                type: "Literal",
                                start: 107,
                                end: 108,
                                value: 0,
                                raw: "0"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                expression: false
              },
              {
                type: "ExpressionStatement",
                start: 121,
                end: 215,
                expression: {
                  type: "AssignmentExpression",
                  start: 121,
                  end: 214,
                  operator: "=",
                  left: {
                    type: "MemberExpression",
                    start: 121,
                    end: 140,
                    object: {
                      type: "MemberExpression",
                      start: 121,
                      end: 135,
                      object: {
                        type: "Identifier",
                        start: 121,
                        end: 125,
                        name: "Bear"
                      },
                      property: {
                        type: "Identifier",
                        start: 126,
                        end: 135,
                        name: "prototype"
                      },
                      computed: false
                    },
                    property: {
                      type: "Identifier",
                      start: 136,
                      end: 140,
                      name: "roar"
                    },
                    computed: false
                  },
                  right: {
                    type: "FunctionExpression",
                    start: 143,
                    end: 214,
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 152,
                        end: 159,
                        name: "message"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 161,
                      end: 214,
                      body: [
                        {
                          type: "ReturnStatement",
                          start: 169,
                          end: 196,
                          argument: {
                            type: "BinaryExpression",
                            start: 176,
                            end: 195,
                            left: {
                              type: "Literal",
                              start: 176,
                              end: 185,
                              value: "RAWWW: ",
                              raw: "'RAWWW: '"
                            },
                            operator: "+",
                            right: {
                              type: "Identifier",
                              start: 188,
                              end: 195,
                              name: "message"
                            }
                          }
                        }
                      ]
                    },
                    expression: false
                  }
                }
              },
              {
                type: "FunctionDeclaration",
                start: 221,
                end: 272,
                id: {
                  type: "Identifier",
                  start: 230,
                  end: 233,
                  name: "Cat"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 236,
                  end: 272,
                  body: []
                },
                expression: false
              },
              {
                type: "ExpressionStatement",
                start: 278,
                end: 370,
                expression: {
                  type: "AssignmentExpression",
                  start: 278,
                  end: 369,
                  operator: "=",
                  left: {
                    type: "MemberExpression",
                    start: 278,
                    end: 296,
                    object: {
                      type: "MemberExpression",
                      start: 278,
                      end: 291,
                      object: {
                        type: "Identifier",
                        start: 278,
                        end: 281,
                        name: "Cat"
                      },
                      property: {
                        type: "Identifier",
                        start: 282,
                        end: 291,
                        name: "prototype"
                      },
                      computed: false
                    },
                    property: {
                      type: "Identifier",
                      start: 292,
                      end: 296,
                      name: "roar"
                    },
                    computed: false
                  },
                  right: {
                    type: "FunctionExpression",
                    start: 299,
                    end: 369,
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 308,
                        end: 315,
                        name: "message"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 317,
                      end: 369,
                      body: [
                        {
                          type: "ReturnStatement",
                          start: 325,
                          end: 363,
                          argument: {
                            type: "BinaryExpression",
                            start: 332,
                            end: 362,
                            left: {
                              type: "Literal",
                              start: 332,
                              end: 342,
                              value: "MEOOWW: ",
                              raw: "'MEOOWW: '"
                            },
                            operator: "+",
                            right: {
                              type: "Identifier",
                              start: 355,
                              end: 362,
                              name: "message"
                            }
                          }
                        }
                      ]
                    },
                    expression: false
                  }
                }
              }
            ]
          },
          expression: false
        }
      ]
    },
    "<!--\n;": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 1
        }
      },
      body: [
        {
          type: "EmptyStatement",
          start: 5,
          end: 6,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 1
            }
          }
        }
      ]
    },
    "\nfunction plop() {\n'use strict';\n/* Comment */\n}": {
      type: "Program",
      start: 0,
      end: 48,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 5,
          column: 1
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 1,
          end: 48,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 5,
              column: 1
            }
          },
          id: {
            type: "Identifier",
            start: 10,
            end: 14,
            loc: {
              start: {
                line: 2,
                column: 9
              },
              end: {
                line: 2,
                column: 13
              }
            },
            name: "plop"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 17,
            end: 48,
            loc: {
              start: {
                line: 2,
                column: 16
              },
              end: {
                line: 5,
                column: 1
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 32,
                loc: {
                  start: {
                    line: 3,
                    column: 0
                  },
                  end: {
                    line: 3,
                    column: 13
                  }
                },
                expression: {
                  type: "Literal",
                  start: 19,
                  end: 31,
                  loc: {
                    start: {
                      line: 3,
                      column: 0
                    },
                    end: {
                      line: 3,
                      column: 12
                    }
                  },
                  value: "use strict",
                  raw: "'use strict'"
                }
              }
            ]
          },
          expression: false
        }
      ]
    },
    "// line comment": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: []
    },
    "<!-- HTML comment": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: []
    },
    ";\n--> HTML comment": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 16
        }
      },
      body: [
        {
          type: "EmptyStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          }
        }
      ]
    },
    "var x = (1 + 2)": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "BinaryExpression",
                start: 9,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                left: {
                  type: "Literal",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  value: 1,
                  raw: "1"
                },
                operator: "+",
                right: {
                  type: "Literal",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  value: 2,
                  raw: "2"
                }
              }
            }
          ],
          kind: "var"
        }
      ]
    },
    "function f(f) { 'use strict'; }": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            name: "f"
          },
          params: [
            {
              type: "Identifier",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              name: "f"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 14,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 31
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 16,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                expression: {
                  type: "Literal",
                  start: 16,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  value: "use strict",
                  raw: "'use strict'"
                }
              }
            ]
          },
          expression: false
        }
      ]
    },
    "#!/usr/bin/node\n;": {
      type: "Program",
      start: 0,
      end: 17,
      body: [
        {
          type: "EmptyStatement",
          start: 16,
          end: 17
        }
      ]
    },
    "(function () {} / 1)": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 1,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 19
              }
            },
            left: {
              type: "FunctionExpression",
              start: 1,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              id: null,
              params: [],
              body: {
                type: "BlockStatement",
                start: 13,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                body: []
              },
              expression: false
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 18,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              value: 1,
              raw: "1"
            }
          }
        }
      ]
    },
    "function f() {} / 1 /": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            name: "f"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 13,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 15
              }
            },
            body: []
          },
          expression: false
        },
        {
          type: "ExpressionStatement",
          start: 16,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 16
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "Literal",
            start: 16,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 21
              }
            },
            value: {},
            raw: "/ 1 /",
            regex: {
              pattern: " 1 ",
              flags: ""
            }
          }
        }
      ]
    },
    "do /x/; while (false);": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "DoWhileStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 3,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 7
              }
            },
            expression: {
              type: "Literal",
              start: 3,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              value: {},
              raw: "/x/",
              regex: {
                pattern: "x",
                flags: ""
              }
            }
          },
          test: {
            type: "Literal",
            start: 15,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 20
              }
            },
            value: false,
            raw: "false"
          }
        }
      ]
    },
    "({ get prop(x) {} })": {
      type: "Error",
      message: "getter should have no params (1:11)"
    },
    "({ set prop() {} })": {
      type: "Error",
      message: "setter should have exactly one param (1:11)"
    },
    "({ set prop(x, y) {} })": {
      type: "Error",
      message: "setter should have exactly one param (1:11)"
    },
    "/[a-z]/gim": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            value: {},
            raw: "/[a-z]/gim",
            regex: {
              pattern: "[a-z]",
              flags: "gim"
            }
          }
        }
      ]
    },
    "/[a-z]/u": {
      type: "Error",
      message: "Invalid regular expression flag (1:1)"
    },
    "/[a-z]/y": {
      type: "Error",
      message: "Invalid regular expression flag (1:1)"
    },
    "/[a-z]/s": {
      type: "Error",
      message: "Invalid regular expression flag (1:1)"
    },
    "function(){}": {
      type: "Error",
      message: "Unexpected token (1:8)"
    },
    "0123. in/foo/i": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              left: {
                type: "MemberExpression",
                start: 0,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                object: {
                  type: "Literal",
                  start: 0,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 0
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  value: 83,
                  raw: "0123"
                },
                property: {
                  type: "Identifier",
                  start: 6,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  name: "in"
                },
                computed: false
              },
              operator: "/",
              right: {
                type: "Identifier",
                start: 9,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                name: "foo"
              }
            },
            operator: "/",
            right: {
              type: "Identifier",
              start: 13,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              name: "i"
            }
          }
        }
      ]
    },
    "0128": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 128,
            raw: "0128"
          }
        }
      ]
    },
    "(x=1)=2": {
      type: "Error",
      message: "Parenthesized pattern (1:0)"
    },
    "(foo = [])[0] = 4;": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            operator: "=",
            left: {
              type: "MemberExpression",
              start: 0,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              object: {
                type: "AssignmentExpression",
                start: 1,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                operator: "=",
                left: {
                  type: "Identifier",
                  start: 1,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  name: "foo"
                },
                right: {
                  type: "ArrayExpression",
                  start: 7,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  elements: []
                }
              },
              property: {
                type: "Literal",
                start: 11,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                value: 0,
                raw: "0"
              },
              computed: true
            },
            right: {
              type: "Literal",
              start: 16,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: 4,
              raw: "4"
            }
          }
        }
      ]
    },
    "for ((foo = []).bar in {}) {}": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          left: {
            type: "MemberExpression",
            start: 5,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 19
              }
            },
            object: {
              type: "AssignmentExpression",
              start: 6,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              operator: "=",
              left: {
                type: "Identifier",
                start: 6,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "foo"
              },
              right: {
                type: "ArrayExpression",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                elements: []
              }
            },
            property: {
              type: "Identifier",
              start: 16,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              name: "bar"
            },
            computed: false
          },
          right: {
            type: "ObjectExpression",
            start: 23,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 25
              }
            },
            properties: []
          },
          body: {
            type: "BlockStatement",
            start: 27,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 27
              },
              end: {
                line: 1,
                column: 29
              }
            },
            body: []
          }
        }
      ]
    },
    "((b), a=1)": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "SequenceExpression",
            start: 1,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 9
              }
            },
            expressions: [
              {
                type: "Identifier",
                start: 2,
                end: 3,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 3
                  }
                },
                name: "b"
              },
              {
                type: "AssignmentExpression",
                start: 6,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                operator: "=",
                left: {
                  type: "Identifier",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 7
                    }
                  },
                  name: "a"
                },
                right: {
                  type: "Literal",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  value: 1,
                  raw: "1"
                }
              }
            ]
          }
        }
      ]
    },
    "(x) = 1": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 1,
              raw: "1"
            }
          }
        }
      ]
    },
    "try {} catch (foo) { var foo; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:25)"
    },
    "try {} catch (foo) { try {} catch (_) { var foo; } }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:44)"
    },
    "try {} catch (foo) { function foo() {} }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:30)"
    },
    "try {} catch (foo) {} var foo;": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 6
              }
            },
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 21
              }
            },
            param: {
              type: "Identifier",
              start: 14,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              name: "foo"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              body: []
            }
          },
          finalizer: null
        },
        {
          type: "VariableDeclaration",
          start: 22,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 22
            },
            end: {
              line: 1,
              column: 30
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 26,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              id: {
                type: "Identifier",
                start: 26,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 26
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                name: "foo"
              },
              init: null
            }
          ],
          kind: "var"
        }
      ]
    },
    "var 𫠝_ = 10;": {
      type: "Error",
      message: "Unexpected character '𫠝' (1:4)"
    }
  },
  "es5-parens": {
    "(1 + 2 ) * 3": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            left: {
              type: "ParenthesizedExpression",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              expression: {
                type: "BinaryExpression",
                start: 1,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                left: {
                  type: "Literal",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  value: 1,
                  raw: "1"
                },
                operator: "+",
                right: {
                  type: "Literal",
                  start: 5,
                  end: 6,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 6
                    }
                  },
                  value: 2,
                  raw: "2"
                }
              }
            },
            operator: "*",
            right: {
              type: "Literal",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              value: 3,
              raw: "3"
            }
          }
        }
      ]
    },
    "(x = 23)": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "ParenthesizedExpression",
            start: 0,
            end: 8,
            expression: {
              type: "AssignmentExpression",
              start: 1,
              end: 7,
              operator: "=",
              left: {
                type: "Identifier",
                start: 1,
                end: 2,
                name: "x"
              },
              right: {
                type: "Literal",
                start: 5,
                end: 7,
                value: 23,
                raw: "23"
              }
            }
          }
        }
      ]
    }
  },
  "es6": {
    "function hello(...rest) { }": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "RestElement",
              start: 15,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              argument: {
                type: "Identifier",
                start: 18,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                name: "rest"
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 24,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 24
              },
              end: {
                line: 1,
                column: 27
              }
            },
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function hello(a, ...rest) { }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "Identifier",
              start: 15,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "a"
            },
            {
              type: "RestElement",
              start: 18,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              argument: {
                type: "Identifier",
                start: 21,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 21
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                name: "rest"
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 27,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 27
              },
              end: {
                line: 1,
                column: 30
              }
            },
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "var hi = function (...r) { sayHi() };": {
      type: "Program",
      start: 0,
      end: 37,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 37
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 37,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 37
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "hi"
              },
              init: {
                type: "FunctionExpression",
                start: 9,
                end: 36,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 36
                  }
                },
                id: null,
                generator: false,
                expression: false,
                params: [
                  {
                    type: "RestElement",
                    start: 19,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    argument: {
                      type: "Identifier",
                      start: 22,
                      end: 23,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 23
                        }
                      },
                      name: "r"
                    }
                  }
                ],
                body: {
                  type: "BlockStatement",
                  start: 25,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 25
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 27,
                      end: 34,
                      loc: {
                        start: {
                          line: 1,
                          column: 27
                        },
                        end: {
                          line: 1,
                          column: 34
                        }
                      },
                      expression: {
                        type: "CallExpression",
                        start: 27,
                        end: 34,
                        loc: {
                          start: {
                            line: 1,
                            column: 27
                          },
                          end: {
                            line: 1,
                            column: 34
                          }
                        },
                        callee: {
                          type: "Identifier",
                          start: 27,
                          end: 32,
                          loc: {
                            start: {
                              line: 1,
                              column: 27
                            },
                            end: {
                              line: 1,
                              column: 32
                            }
                          },
                          name: "sayHi"
                        },
                        arguments: []
                      }
                    }
                  ]
                }
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "function t(...) { }": {
      type: "Error",
      message: "Unexpected token (1:14)"
    },
    "function t(...rest, b) { }": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:18)"
    },
    "let x": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: null
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "let x, y;": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              id: {
                type: "Identifier",
                start: 7,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "y"
              },
              init: null
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "let x = 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "let eval = 42, arguments = 42": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "eval"
              },
              init: {
                type: "Literal",
                start: 11,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                value: 42,
                raw: "42"
              }
            },
            {
              type: "VariableDeclarator",
              start: 15,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              id: {
                type: "Identifier",
                start: 15,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "arguments"
              },
              init: {
                type: "Literal",
                start: 27,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 27
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "let x = 14, y = 3, z = 1977": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                value: 14,
                raw: "14"
              }
            },
            {
              type: "VariableDeclarator",
              start: 12,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              id: {
                type: "Identifier",
                start: 12,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "y"
              },
              init: {
                type: "Literal",
                start: 16,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                value: 3,
                raw: "3"
              }
            },
            {
              type: "VariableDeclarator",
              start: 19,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              id: {
                type: "Identifier",
                start: 19,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                name: "z"
              },
              init: {
                type: "Literal",
                start: 23,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                value: 1977,
                raw: "1977"
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "for(let x = 0;;);": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          init: {
            type: "VariableDeclaration",
            start: 4,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 13
              }
            },
            declarations: [
              {
                type: "VariableDeclarator",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                id: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  value: 0,
                  raw: "0"
                }
              }
            ],
            kind: "let"
          },
          test: null,
          update: null,
          body: {
            type: "EmptyStatement",
            start: 16,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 17
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for(let x = 0, y = 1;;);": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          init: {
            type: "VariableDeclaration",
            start: 4,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 20
              }
            },
            declarations: [
              {
                type: "VariableDeclarator",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                id: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  value: 0,
                  raw: "0"
                }
              },
              {
                type: "VariableDeclarator",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                id: {
                  type: "Identifier",
                  start: 15,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 15
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  name: "y"
                },
                init: {
                  type: "Literal",
                  start: 19,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  value: 1,
                  raw: "1"
                }
              }
            ],
            kind: "let"
          },
          test: null,
          update: null,
          body: {
            type: "EmptyStatement",
            start: 23,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 24
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for (let x in list) process(x);": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 10
              }
            },
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  name: "x"
                },
                init: null
              }
            ],
            kind: "let"
          },
          right: {
            type: "Identifier",
            start: 14,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 18
              }
            },
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 20,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 31
              }
            },
            expression: {
              type: "CallExpression",
              start: 20,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              callee: {
                type: "Identifier",
                start: 20,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 28,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "const x = 42": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              id: {
                type: "Identifier",
                start: 6,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ],
          kind: "const"
        }
      ],
      sourceType: "script"
    },
    "const eval = 42, arguments = 42": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              id: {
                type: "Identifier",
                start: 6,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                name: "eval"
              },
              init: {
                type: "Literal",
                start: 13,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                value: 42,
                raw: "42"
              }
            },
            {
              type: "VariableDeclarator",
              start: 17,
              end: 31,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 31
                }
              },
              id: {
                type: "Identifier",
                start: 17,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                name: "arguments"
              },
              init: {
                type: "Literal",
                start: 29,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 29
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ],
          kind: "const"
        }
      ],
      sourceType: "script"
    },
    "const x = 14, y = 3, z = 1977": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              id: {
                type: "Identifier",
                start: 6,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                value: 14,
                raw: "14"
              }
            },
            {
              type: "VariableDeclarator",
              start: 14,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              id: {
                type: "Identifier",
                start: 14,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 14
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                name: "y"
              },
              init: {
                type: "Literal",
                start: 18,
                end: 19,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 19
                  }
                },
                value: 3,
                raw: "3"
              }
            },
            {
              type: "VariableDeclarator",
              start: 21,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              id: {
                type: "Identifier",
                start: 21,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 21
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                name: "z"
              },
              init: {
                type: "Literal",
                start: 25,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 25
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                value: 1977,
                raw: "1977"
              }
            }
          ],
          kind: "const"
        }
      ],
      sourceType: "script"
    },
    "const a;": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "for(const x = 0;;);": {
      type: "Program",
      start: 0,
      end: 19,
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 19,
          range: [
            0,
            19
          ],
          init: {
            type: "VariableDeclaration",
            start: 4,
            end: 15,
            range: [
              4,
              15
            ],
            declarations: [
              {
                type: "VariableDeclarator",
                start: 10,
                end: 15,
                range: [
                  10,
                  15
                ],
                id: {
                  type: "Identifier",
                  start: 10,
                  end: 11,
                  range: [
                    10,
                    11
                  ],
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 14,
                  end: 15,
                  range: [
                    14,
                    15
                  ],
                  value: 0,
                  raw: "0"
                }
              }
            ],
            kind: "const"
          },
          test: null,
          update: null,
          body: {
            type: "EmptyStatement",
            start: 18,
            end: 19,
            range: [
              18,
              19
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "\\u{74}rue": {
      type: "Error",
      message: "Escape sequence in keyword true (1:0)"
    },
    "try {} catch (foo) { let foo; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:25)"
    },
    "try {} catch ([foo]) { var foo; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:27)"
    },
    "try {} catch ({ foo }) { var foo; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:29)"
    },
    "try {} catch ([foo, foo]) {}": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:20)"
    },
    "try {} catch ({ a: foo, b: { c: [foo] } }) {}": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:33)"
    },
    "let foo; try {} catch (foo) {} let foo;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:35)"
    },
    "try {} catch (foo) {} let foo;": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 21,
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 21,
            param: {
              type: "Identifier",
              start: 14,
              end: 17,
              name: "foo"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 21,
              body: []
            }
          },
          finalizer: null
        },
        {
          type: "VariableDeclaration",
          start: 22,
          end: 30,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 26,
              end: 29,
              id: {
                type: "Identifier",
                start: 26,
                end: 29,
                name: "foo"
              },
              init: null
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "try {} catch (foo) { { let foo; } }": {
      type: "Program",
      start: 0,
      end: 35,
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 35,
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 35,
            param: {
              type: "Identifier",
              start: 14,
              end: 17,
              name: "foo"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 35,
              body: [
                {
                  type: "BlockStatement",
                  start: 21,
                  end: 33,
                  body: [
                    {
                      type: "VariableDeclaration",
                      start: 23,
                      end: 31,
                      declarations: [
                        {
                          type: "VariableDeclarator",
                          start: 27,
                          end: 30,
                          id: {
                            type: "Identifier",
                            start: 27,
                            end: 30,
                            name: "foo"
                          },
                          init: null
                        }
                      ],
                      kind: "let"
                    }
                  ]
                }
              ]
            }
          },
          finalizer: null
        }
      ],
      sourceType: "script"
    },
    "try {} catch (foo) { function x() { var foo; } }": {
      type: "Program",
      start: 0,
      end: 48,
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 48,
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 48,
            param: {
              type: "Identifier",
              start: 14,
              end: 17,
              name: "foo"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 48,
              body: [
                {
                  type: "FunctionDeclaration",
                  start: 21,
                  end: 46,
                  id: {
                    type: "Identifier",
                    start: 30,
                    end: 31,
                    name: "x"
                  },
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 34,
                    end: 46,
                    body: [
                      {
                        type: "VariableDeclaration",
                        start: 36,
                        end: 44,
                        declarations: [
                          {
                            type: "VariableDeclarator",
                            start: 40,
                            end: 43,
                            id: {
                              type: "Identifier",
                              start: 40,
                              end: 43,
                              name: "foo"
                            },
                            init: null
                          }
                        ],
                        kind: "var"
                      }
                    ]
                  }
                }
              ]
            }
          },
          finalizer: null
        }
      ],
      sourceType: "script"
    },
    "try {} catch (foo) { function x(foo) {} }": {
      type: "Program",
      start: 0,
      end: 41,
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 41,
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 41,
            param: {
              type: "Identifier",
              start: 14,
              end: 17,
              name: "foo"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 41,
              body: [
                {
                  type: "FunctionDeclaration",
                  start: 21,
                  end: 39,
                  id: {
                    type: "Identifier",
                    start: 30,
                    end: 31,
                    name: "x"
                  },
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 32,
                      end: 35,
                      name: "foo"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 37,
                    end: 39,
                    body: []
                  }
                }
              ]
            }
          },
          finalizer: null
        }
      ],
      sourceType: "script"
    },
    "'use strict'; let foo = function foo() {}": {
      type: "Program",
      start: 0,
      end: 41,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            value: "use strict",
            raw: "'use strict'"
          }
        },
        {
          type: "VariableDeclaration",
          start: 14,
          end: 41,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 18,
              end: 41,
              id: {
                type: "Identifier",
                start: 18,
                end: 21,
                name: "foo"
              },
              init: {
                type: "FunctionExpression",
                start: 24,
                end: 41,
                id: {
                  type: "Identifier",
                  start: 33,
                  end: 36,
                  name: "foo"
                },
                generator: false,
                expression: false,
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 39,
                  end: 41,
                  body: []
                }
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "\"\\u{714E}\\u{8336}\"": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              0,
              18
            ],
            value: "煎茶",
            raw: "\"\\u{714E}\\u{8336}\""
          }
        }
      ],
      sourceType: "script"
    },
    "\"\\u{20BB7}\\u{91CE}\\u{5BB6}\"": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              0,
              27
            ],
            value: "𠮷野家",
            raw: "\"\\u{20BB7}\\u{91CE}\\u{5BB6}\""
          }
        }
      ],
      sourceType: "script"
    },
    "00": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      range: [
        0,
        2
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          range: [
            0,
            2
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            range: [
              0,
              2
            ],
            value: 0,
            raw: "00"
          }
        }
      ],
      sourceType: "script"
    },
    "0o0": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 0,
            raw: "0o0"
          }
        }
      ],
      sourceType: "script"
    },
    "function test() {'use strict'; 0o0; }": {
      type: "Program",
      start: 0,
      end: 37,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 37
        }
      },
      range: [
        0,
        37
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 37,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 37
            }
          },
          range: [
            0,
            37
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              9,
              13
            ],
            name: "test"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 16,
            end: 37,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 37
              }
            },
            range: [
              16,
              37
            ],
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 30,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 30
                  }
                },
                range: [
                  17,
                  30
                ],
                expression: {
                  type: "Literal",
                  start: 17,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    17,
                    29
                  ],
                  value: "use strict",
                  raw: "'use strict'"
                }
              },
              {
                type: "ExpressionStatement",
                start: 31,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 31
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                range: [
                  31,
                  35
                ],
                expression: {
                  type: "Literal",
                  start: 31,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 31
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  range: [
                    31,
                    34
                  ],
                  value: 0,
                  raw: "0o0"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "0o2": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 2,
            raw: "0o2"
          }
        }
      ],
      sourceType: "script"
    },
    "0o12": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      range: [
        0,
        4
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          range: [
            0,
            4
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            range: [
              0,
              4
            ],
            value: 10,
            raw: "0o12"
          }
        }
      ],
      sourceType: "script"
    },
    "0O0": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 0,
            raw: "0O0"
          }
        }
      ],
      sourceType: "script"
    },
    "function test() {'use strict'; 0O0; }": {
      type: "Program",
      start: 0,
      end: 37,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 37
        }
      },
      range: [
        0,
        37
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 37,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 37
            }
          },
          range: [
            0,
            37
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              9,
              13
            ],
            name: "test"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 16,
            end: 37,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 37
              }
            },
            range: [
              16,
              37
            ],
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 30,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 30
                  }
                },
                range: [
                  17,
                  30
                ],
                expression: {
                  type: "Literal",
                  start: 17,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    17,
                    29
                  ],
                  value: "use strict",
                  raw: "'use strict'"
                }
              },
              {
                type: "ExpressionStatement",
                start: 31,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 31
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                range: [
                  31,
                  35
                ],
                expression: {
                  type: "Literal",
                  start: 31,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 31
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  range: [
                    31,
                    34
                  ],
                  value: 0,
                  raw: "0O0"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "0O2": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 2,
            raw: "0O2"
          }
        }
      ],
      sourceType: "script"
    },
    "0O12": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      range: [
        0,
        4
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          range: [
            0,
            4
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            range: [
              0,
              4
            ],
            value: 10,
            raw: "0O12"
          }
        }
      ],
      sourceType: "script"
    },
    "0b0": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 0,
            raw: "0b0"
          }
        }
      ],
      sourceType: "script"
    },
    "0b1": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 1,
            raw: "0b1"
          }
        }
      ],
      sourceType: "script"
    },
    "0b10": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      range: [
        0,
        4
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          range: [
            0,
            4
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            range: [
              0,
              4
            ],
            value: 2,
            raw: "0b10"
          }
        }
      ],
      sourceType: "script"
    },
    "0B0": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 0,
            raw: "0B0"
          }
        }
      ],
      sourceType: "script"
    },
    "0B1": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 1,
            raw: "0B1"
          }
        }
      ],
      sourceType: "script"
    },
    "0B10": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      range: [
        0,
        4
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          range: [
            0,
            4
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            range: [
              0,
              4
            ],
            value: 2,
            raw: "0B10"
          }
        }
      ],
      sourceType: "script"
    },
    "`42`": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      range: [
        0,
        4
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          range: [
            0,
            4
          ],
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            range: [
              0,
              4
            ],
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 3,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 3
                  }
                },
                range: [
                  1,
                  3
                ],
                value: {
                  raw: "42",
                  cooked: "42"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "raw`42`": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      range: [
        0,
        7
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          range: [
            0,
            7
          ],
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              0,
              7
            ],
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              range: [
                0,
                3
              ],
              name: "raw"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              range: [
                3,
                7
              ],
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 6,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 6
                    }
                  },
                  range: [
                    4,
                    6
                  ],
                  value: {
                    raw: "42",
                    cooked: "42"
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "raw`hello ${name}`": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              0,
              18
            ],
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              range: [
                0,
                3
              ],
              name: "raw"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                3,
                18
              ],
              expressions: [
                {
                  type: "Identifier",
                  start: 12,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    12,
                    16
                  ],
                  name: "name"
                }
              ],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    4,
                    10
                  ],
                  value: {
                    raw: "hello ",
                    cooked: "hello "
                  },
                  tail: false
                },
                {
                  type: "TemplateElement",
                  start: 17,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    17,
                    17
                  ],
                  value: {
                    raw: "",
                    cooked: ""
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "`$`": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                value: {
                  raw: "$",
                  cooked: "$"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`\\n\\r\\b\\v\\t\\f\\\n\\\r\n`": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 3,
          column: 1
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 3,
              column: 1
            }
          },
          range: [
            0,
            19
          ],
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 3,
                column: 1
              }
            },
            range: [
              0,
              19
            ],
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 3,
                    column: 0
                  }
                },
                range: [
                  1,
                  18
                ],
                value: {
                  raw: "\\n\\r\\b\\v\\t\\f\\\n\\\n",
                  cooked: "\n\r\b\u000b\t\f"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`\n\r\n\r`": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 4,
          column: 1
        }
      },
      range: [
        0,
        6
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 4,
              column: 1
            }
          },
          range: [
            0,
            6
          ],
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 4,
                column: 1
              }
            },
            range: [
              0,
              6
            ],
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 4,
                    column: 0
                  }
                },
                range: [
                  1,
                  5
                ],
                value: {
                  raw: "\n\n\n",
                  cooked: "\n\n\n"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`\\u{000042}\\u0042\\x42u0\\A`": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          range: [
            0,
            26
          ],
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 26
              }
            },
            range: [
              0,
              26
            ],
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  1,
                  25
                ],
                value: {
                  raw: "\\u{000042}\\u0042\\x42u0\\A",
                  cooked: "BBBu0A"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "new raw`42`": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      range: [
        0,
        11
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          range: [
            0,
            11
          ],
          expression: {
            type: "NewExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            range: [
              0,
              11
            ],
            callee: {
              type: "TaggedTemplateExpression",
              start: 4,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              range: [
                4,
                11
              ],
              tag: {
                type: "Identifier",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                range: [
                  4,
                  7
                ],
                name: "raw"
              },
              quasi: {
                type: "TemplateLiteral",
                start: 7,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                range: [
                  7,
                  11
                ],
                expressions: [],
                quasis: [
                  {
                    type: "TemplateElement",
                    start: 8,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      8,
                      10
                    ],
                    value: {
                      raw: "42",
                      cooked: "42"
                    },
                    tail: true
                  }
                ]
              }
            },
            arguments: []
          }
        }
      ],
      sourceType: "script"
    },
    "`outer${{x: {y: 10}}}bar${`nested${function(){return 1;}}endnest`}end`": {
      type: "Program",
      start: 0,
      end: 70,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 70,
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 70,
            expressions: [
              {
                type: "ObjectExpression",
                start: 8,
                end: 20,
                properties: [
                  {
                    type: "Property",
                    start: 9,
                    end: 19,
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 9,
                      end: 10,
                      name: "x"
                    },
                    value: {
                      type: "ObjectExpression",
                      start: 12,
                      end: 19,
                      properties: [
                        {
                          type: "Property",
                          start: 13,
                          end: 18,
                          method: false,
                          shorthand: false,
                          computed: false,
                          key: {
                            type: "Identifier",
                            start: 13,
                            end: 14,
                            name: "y"
                          },
                          value: {
                            type: "Literal",
                            start: 16,
                            end: 18,
                            value: 10,
                            raw: "10"
                          },
                          kind: "init"
                        }
                      ]
                    },
                    kind: "init"
                  }
                ]
              },
              {
                type: "TemplateLiteral",
                start: 26,
                end: 65,
                expressions: [
                  {
                    type: "FunctionExpression",
                    start: 35,
                    end: 56,
                    id: null,
                    generator: false,
                    expression: false,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 45,
                      end: 56,
                      body: [
                        {
                          type: "ReturnStatement",
                          start: 46,
                          end: 55,
                          argument: {
                            type: "Literal",
                            start: 53,
                            end: 54,
                            value: 1,
                            raw: "1"
                          }
                        }
                      ]
                    }
                  }
                ],
                quasis: [
                  {
                    type: "TemplateElement",
                    start: 27,
                    end: 33,
                    value: {
                      raw: "nested",
                      cooked: "nested"
                    },
                    tail: false
                  },
                  {
                    type: "TemplateElement",
                    start: 57,
                    end: 64,
                    value: {
                      raw: "endnest",
                      cooked: "endnest"
                    },
                    tail: true
                  }
                ]
              }
            ],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 6,
                value: {
                  raw: "outer",
                  cooked: "outer"
                },
                tail: false
              },
              {
                type: "TemplateElement",
                start: 21,
                end: 24,
                value: {
                  raw: "bar",
                  cooked: "bar"
                },
                tail: false
              },
              {
                type: "TemplateElement",
                start: 66,
                end: 69,
                value: {
                  raw: "end",
                  cooked: "end"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "switch (answer) { case 42: let t = 42; break; }": {
      type: "Program",
      start: 0,
      end: 47,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 47
        }
      },
      range: [
        0,
        47
      ],
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 47,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 47
            }
          },
          range: [
            0,
            47
          ],
          discriminant: {
            type: "Identifier",
            start: 8,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 14
              }
            },
            range: [
              8,
              14
            ],
            name: "answer"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 18,
              end: 45,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 45
                }
              },
              range: [
                18,
                45
              ],
              consequent: [
                {
                  type: "VariableDeclaration",
                  start: 27,
                  end: 38,
                  loc: {
                    start: {
                      line: 1,
                      column: 27
                    },
                    end: {
                      line: 1,
                      column: 38
                    }
                  },
                  range: [
                    27,
                    38
                  ],
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 31,
                      end: 37,
                      loc: {
                        start: {
                          line: 1,
                          column: 31
                        },
                        end: {
                          line: 1,
                          column: 37
                        }
                      },
                      range: [
                        31,
                        37
                      ],
                      id: {
                        type: "Identifier",
                        start: 31,
                        end: 32,
                        loc: {
                          start: {
                            line: 1,
                            column: 31
                          },
                          end: {
                            line: 1,
                            column: 32
                          }
                        },
                        range: [
                          31,
                          32
                        ],
                        name: "t"
                      },
                      init: {
                        type: "Literal",
                        start: 35,
                        end: 37,
                        loc: {
                          start: {
                            line: 1,
                            column: 35
                          },
                          end: {
                            line: 1,
                            column: 37
                          }
                        },
                        range: [
                          35,
                          37
                        ],
                        value: 42,
                        raw: "42"
                      }
                    }
                  ],
                  kind: "let"
                },
                {
                  type: "BreakStatement",
                  start: 39,
                  end: 45,
                  loc: {
                    start: {
                      line: 1,
                      column: 39
                    },
                    end: {
                      line: 1,
                      column: 45
                    }
                  },
                  range: [
                    39,
                    45
                  ],
                  label: null
                }
              ],
              test: {
                type: "Literal",
                start: 23,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  23,
                  25
                ],
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "() => \"test\"": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            id: null,
            generator: false,
            expression: true,
            params: [],
            body: {
              type: "Literal",
              start: 6,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                6,
                12
              ],
              value: "test",
              raw: "\"test\""
            }
          }
        }
      ],
      sourceType: "script"
    },
    "e => \"test\"": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      range: [
        0,
        11
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          range: [
            0,
            11
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            range: [
              0,
              11
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "e"
              }
            ],
            body: {
              type: "Literal",
              start: 5,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              range: [
                5,
                11
              ],
              value: "test",
              raw: "\"test\""
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(e) => \"test\"": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "e"
              }
            ],
            body: {
              type: "Literal",
              start: 7,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              range: [
                7,
                13
              ],
              value: "test",
              raw: "\"test\""
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a, b) => \"test\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      range: [
        0,
        16
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          range: [
            0,
            16
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            range: [
              0,
              16
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "a"
              },
              {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  4,
                  5
                ],
                name: "b"
              }
            ],
            body: {
              type: "Literal",
              start: 10,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                10,
                16
              ],
              value: "test",
              raw: "\"test\""
            }
          }
        }
      ],
      sourceType: "script"
    },
    "e => { 42; }": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "e"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 5,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                5,
                12
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 7,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    7,
                    10
                  ],
                  expression: {
                    type: "Literal",
                    start: 7,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      7,
                      9
                    ],
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "e => ({ property: 42 })": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          range: [
            0,
            23
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              0,
              23
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "e"
              }
            ],
            body: {
              type: "ObjectExpression",
              start: 6,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                6,
                22
              ],
              properties: [
                {
                  type: "Property",
                  start: 8,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    8,
                    20
                  ],
                  method: false,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 8,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    range: [
                      8,
                      16
                    ],
                    name: "property"
                  },
                  value: {
                    type: "Literal",
                    start: 18,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    range: [
                      18,
                      20
                    ],
                    value: 42,
                    raw: "42"
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "e => { label: 42 }": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              0,
              18
            ],
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "e"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 5,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                5,
                18
              ],
              body: [
                {
                  type: "LabeledStatement",
                  start: 7,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    7,
                    16
                  ],
                  body: {
                    type: "ExpressionStatement",
                    start: 14,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    range: [
                      14,
                      16
                    ],
                    expression: {
                      type: "Literal",
                      start: 14,
                      end: 16,
                      loc: {
                        start: {
                          line: 1,
                          column: 14
                        },
                        end: {
                          line: 1,
                          column: 16
                        }
                      },
                      range: [
                        14,
                        16
                      ],
                      value: 42,
                      raw: "42"
                    }
                  },
                  label: {
                    type: "Identifier",
                    start: 7,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      7,
                      12
                    ],
                    name: "label"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a, b) => { 42; }": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "a"
              },
              {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  4,
                  5
                ],
                name: "b"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 10,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                10,
                17
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 12,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    12,
                    15
                  ],
                  expression: {
                    type: "Literal",
                    start: 12,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      12,
                      14
                    ],
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "([a, , b]) => 42": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      range: [
        0,
        16
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          range: [
            0,
            16
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            range: [
              0,
              16
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "ArrayPattern",
                start: 1,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  1,
                  9
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 2,
                    end: 3,
                    loc: {
                      start: {
                        line: 1,
                        column: 2
                      },
                      end: {
                        line: 1,
                        column: 3
                      }
                    },
                    range: [
                      2,
                      3
                    ],
                    name: "a"
                  },
                  null,
                  {
                    type: "Identifier",
                    start: 7,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      7,
                      8
                    ],
                    name: "b"
                  }
                ]
              }
            ],
            body: {
              type: "Literal",
              start: 14,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                14,
                16
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "([a.a]) => 42": {
      type: "Error",
      message: "Assigning to rvalue (1:2)"
    },
    "() => {}()": {
      type: "Error",
      message: "Unexpected token (1:8)"
    },
    "(a) => {}()": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "a => {}()": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "console.log(typeof () => {});": {
      type: "Error",
      message: "Unexpected token (1:20)"
    },
    "(() => {})()": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            callee: {
              type: "ArrowFunctionExpression",
              start: 1,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              range: [
                1,
                9
              ],
              id: null,
              generator: false,
              expression: false,
              params: [],
              body: {
                type: "BlockStatement",
                start: 7,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  7,
                  9
                ],
                body: []
              }
            },
            arguments: []
          }
        }
      ],
      sourceType: "script"
    },
    "((() => {}))()": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            range: [
              0,
              14
            ],
            callee: {
              type: "ArrowFunctionExpression",
              start: 2,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              range: [
                2,
                10
              ],
              id: null,
              generator: false,
              expression: false,
              params: [],
              body: {
                type: "BlockStatement",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  8,
                  10
                ],
                body: []
              }
            },
            arguments: []
          }
        }
      ],
      sourceType: "script"
    },
    "(x=1) => x * x": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            range: [
              0,
              14
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "AssignmentPattern",
                start: 1,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                range: [
                  1,
                  4
                ],
                left: {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  range: [
                    1,
                    2
                  ],
                  name: "x"
                },
                right: {
                  type: "Literal",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  value: 1,
                  raw: "1"
                }
              }
            ],
            body: {
              type: "BinaryExpression",
              start: 9,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                9,
                14
              ],
              left: {
                type: "Identifier",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  9,
                  10
                ],
                name: "x"
              },
              operator: "*",
              right: {
                type: "Identifier",
                start: 13,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  13,
                  14
                ],
                name: "x"
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "eval => 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      range: [
        0,
        10
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          range: [
            0,
            10
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              0,
              10
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                range: [
                  0,
                  4
                ],
                name: "eval"
              }
            ],
            body: {
              type: "Literal",
              start: 8,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              range: [
                8,
                10
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "arguments => 42": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          range: [
            0,
            15
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              0,
              15
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  0,
                  9
                ],
                name: "arguments"
              }
            ],
            body: {
              type: "Literal",
              start: 13,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              range: [
                13,
                15
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a) => 00": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      range: [
        0,
        9
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          range: [
            0,
            9
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            range: [
              0,
              9
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "a"
              }
            ],
            body: {
              type: "Literal",
              start: 7,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              range: [
                7,
                9
              ],
              value: 0,
              raw: "00"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(eval, a) => 42": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          range: [
            0,
            15
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              0,
              15
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  1,
                  5
                ],
                name: "eval"
              },
              {
                type: "Identifier",
                start: 7,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                range: [
                  7,
                  8
                ],
                name: "a"
              }
            ],
            body: {
              type: "Literal",
              start: 13,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              range: [
                13,
                15
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(eval = 10) => 42": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "AssignmentPattern",
                start: 1,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  1,
                  10
                ],
                left: {
                  type: "Identifier",
                  start: 1,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  range: [
                    1,
                    5
                  ],
                  name: "eval"
                },
                right: {
                  type: "Literal",
                  start: 8,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    8,
                    10
                  ],
                  value: 10,
                  raw: "10"
                }
              }
            ],
            body: {
              type: "Literal",
              start: 15,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                15,
                17
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(eval, a = 10) => 42": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      range: [
        0,
        20
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          range: [
            0,
            20
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            range: [
              0,
              20
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  1,
                  5
                ],
                name: "eval"
              },
              {
                type: "AssignmentPattern",
                start: 7,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                range: [
                  7,
                  13
                ],
                left: {
                  type: "Identifier",
                  start: 7,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  range: [
                    7,
                    8
                  ],
                  name: "a"
                },
                right: {
                  type: "Literal",
                  start: 11,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    11,
                    13
                  ],
                  value: 10,
                  raw: "10"
                }
              }
            ],
            body: {
              type: "Literal",
              start: 18,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                18,
                20
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(x => x)": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      range: [
        0,
        8
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          range: [
            0,
            8
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 1,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              1,
              7
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "x"
              }
            ],
            body: {
              type: "Identifier",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              range: [
                6,
                7
              ],
              name: "x"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x => y => 42": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "x"
              }
            ],
            body: {
              type: "ArrowFunctionExpression",
              start: 5,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                5,
                12
              ],
              id: null,
              generator: false,
              expression: true,
              params: [
                {
                  type: "Identifier",
                  start: 5,
                  end: 6,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 6
                    }
                  },
                  range: [
                    5,
                    6
                  ],
                  name: "y"
                }
              ],
              body: {
                type: "Literal",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  10,
                  12
                ],
                value: 42,
                raw: "42"
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(x) => ((y, z) => (x, y, z))": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      range: [
        0,
        28
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          range: [
            0,
            28
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 28
              }
            },
            range: [
              0,
              28
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "x"
              }
            ],
            body: {
              type: "ArrowFunctionExpression",
              start: 8,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                8,
                27
              ],
              id: null,
              generator: false,
              expression: true,
              params: [
                {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    9,
                    10
                  ],
                  name: "y"
                },
                {
                  type: "Identifier",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    12,
                    13
                  ],
                  name: "z"
                }
              ],
              body: {
                type: "SequenceExpression",
                start: 19,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                range: [
                  19,
                  26
                ],
                expressions: [
                  {
                    type: "Identifier",
                    start: 19,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    range: [
                      19,
                      20
                    ],
                    name: "x"
                  },
                  {
                    type: "Identifier",
                    start: 22,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 22
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    range: [
                      22,
                      23
                    ],
                    name: "y"
                  },
                  {
                    type: "Identifier",
                    start: 25,
                    end: 26,
                    loc: {
                      start: {
                        line: 1,
                        column: 25
                      },
                      end: {
                        line: 1,
                        column: 26
                      }
                    },
                    range: [
                      25,
                      26
                    ],
                    name: "z"
                  }
                ]
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo(() => {})": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            callee: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              range: [
                0,
                3
              ],
              name: "foo"
            },
            arguments: [
              {
                type: "ArrowFunctionExpression",
                start: 4,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  4,
                  12
                ],
                id: null,
                generator: false,
                expression: false,
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 10,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    10,
                    12
                  ],
                  body: []
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "foo((x, y) => {})": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            callee: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              range: [
                0,
                3
              ],
              name: "foo"
            },
            arguments: [
              {
                type: "ArrowFunctionExpression",
                start: 4,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  4,
                  16
                ],
                id: null,
                generator: false,
                expression: false,
                params: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    name: "x"
                  },
                  {
                    type: "Identifier",
                    start: 8,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      8,
                      9
                    ],
                    name: "y"
                  }
                ],
                body: {
                  type: "BlockStatement",
                  start: 14,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    14,
                    16
                  ],
                  body: []
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "x = { method() { } }": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      range: [
        0,
        20
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          range: [
            0,
            20
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            range: [
              0,
              20
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                4,
                20
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    6,
                    18
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      6,
                      12
                    ],
                    name: "method"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      12,
                      18
                    ],
                    id: null,
                    generator: false,
                    expression: false,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 15,
                      end: 18,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 18
                        }
                      },
                      range: [
                        15,
                        18
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { method(test) { } }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 24
              }
            },
            range: [
              0,
              24
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              range: [
                4,
                24
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    6,
                    22
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      6,
                      12
                    ],
                    name: "method"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    range: [
                      12,
                      22
                    ],
                    id: null,
                    generator: false,
                    expression: false,
                    params: [
                      {
                        type: "Identifier",
                        start: 13,
                        end: 17,
                        loc: {
                          start: {
                            line: 1,
                            column: 13
                          },
                          end: {
                            line: 1,
                            column: 17
                          }
                        },
                        range: [
                          13,
                          17
                        ],
                        name: "test"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 19,
                      end: 22,
                      loc: {
                        start: {
                          line: 1,
                          column: 19
                        },
                        end: {
                          line: 1,
                          column: 22
                        }
                      },
                      range: [
                        19,
                        22
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { 'method'() { } }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              0,
              22
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                4,
                22
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    6,
                    20
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Literal",
                    start: 6,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      6,
                      14
                    ],
                    value: "method",
                    raw: "'method'"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 14,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    range: [
                      14,
                      20
                    ],
                    id: null,
                    generator: false,
                    expression: false,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 17,
                      end: 20,
                      loc: {
                        start: {
                          line: 1,
                          column: 17
                        },
                        end: {
                          line: 1,
                          column: 20
                        }
                      },
                      range: [
                        17,
                        20
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { get() { } }": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                4,
                17
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    6,
                    15
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      6,
                      9
                    ],
                    name: "get"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 9,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      9,
                      15
                    ],
                    id: null,
                    generator: false,
                    expression: false,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 12,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 12
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        12,
                        15
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { set() { } }": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                4,
                17
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    6,
                    15
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      6,
                      9
                    ],
                    name: "set"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 9,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      9,
                      15
                    ],
                    id: null,
                    generator: false,
                    expression: false,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 12,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 12
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        12,
                        15
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { y, z }": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                4,
                12
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 7
                    }
                  },
                  range: [
                    6,
                    7
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    range: [
                      6,
                      7
                    ],
                    name: "y"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    range: [
                      6,
                      7
                    ],
                    name: "y"
                  }
                },
                {
                  type: "Property",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    9,
                    10
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 9,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      9,
                      10
                    ],
                    name: "z"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 9,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      9,
                      10
                    ],
                    name: "z"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[a, b] = [b, a]": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          range: [
            0,
            15
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              0,
              15
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              range: [
                0,
                6
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  range: [
                    1,
                    2
                  ],
                  name: "a"
                },
                {
                  type: "Identifier",
                  start: 4,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  range: [
                    4,
                    5
                  ],
                  name: "b"
                }
              ]
            },
            right: {
              type: "ArrayExpression",
              start: 9,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              range: [
                9,
                15
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 10,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  range: [
                    10,
                    11
                  ],
                  name: "b"
                },
                {
                  type: "Identifier",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  range: [
                    13,
                    14
                  ],
                  name: "a"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ responseText: text } = res)": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      range: [
        0,
        30
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          range: [
            0,
            30
          ],
          expression: {
            type: "AssignmentExpression",
            start: 1,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 29
              }
            },
            range: [
              1,
              29
            ],
            operator: "=",
            left: {
              type: "ObjectPattern",
              start: 1,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                1,
                23
              ],
              properties: [
                {
                  type: "Property",
                  start: 3,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    3,
                    21
                  ],
                  method: false,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 3,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      3,
                      15
                    ],
                    name: "responseText"
                  },
                  value: {
                    type: "Identifier",
                    start: 17,
                    end: 21,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 21
                      }
                    },
                    range: [
                      17,
                      21
                    ],
                    name: "text"
                  },
                  kind: "init"
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 26,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              range: [
                26,
                29
              ],
              name: "res"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "const {a} = {}": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                6,
                14
              ],
              id: {
                type: "ObjectPattern",
                start: 6,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  6,
                  9
                ],
                properties: [
                  {
                    type: "Property",
                    start: 7,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      7,
                      8
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 7,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 7
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      range: [
                        7,
                        8
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 7,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 7
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      range: [
                        7,
                        8
                      ],
                      name: "a"
                    }
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  12,
                  14
                ],
                properties: []
              }
            }
          ],
          kind: "const"
        }
      ],
      sourceType: "script"
    },
    "const [a] = []": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                6,
                14
              ],
              id: {
                type: "ArrayPattern",
                start: 6,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  6,
                  9
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 7,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      7,
                      8
                    ],
                    name: "a"
                  }
                ]
              },
              init: {
                type: "ArrayExpression",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  12,
                  14
                ],
                elements: []
              }
            }
          ],
          kind: "const"
        }
      ],
      sourceType: "script"
    },
    "let {a} = {}": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                4,
                12
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                range: [
                  4,
                  7
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    }
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  10,
                  12
                ],
                properties: []
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "let [a] = []": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                4,
                12
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                range: [
                  4,
                  7
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    name: "a"
                  }
                ]
              },
              init: {
                type: "ArrayExpression",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  10,
                  12
                ],
                elements: []
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "var {a} = {}": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                4,
                12
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                range: [
                  4,
                  7
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    }
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  10,
                  12
                ],
                properties: []
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "var [a] = []": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                4,
                12
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                range: [
                  4,
                  7
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    name: "a"
                  }
                ]
              },
              init: {
                type: "ArrayExpression",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  10,
                  12
                ],
                elements: []
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "const {a:b} = {}": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      range: [
        0,
        16
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          range: [
            0,
            16
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                6,
                16
              ],
              id: {
                type: "ObjectPattern",
                start: 6,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                range: [
                  6,
                  11
                ],
                properties: [
                  {
                    type: "Property",
                    start: 7,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      7,
                      10
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 7,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 7
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      range: [
                        7,
                        8
                      ],
                      name: "a"
                    },
                    value: {
                      type: "Identifier",
                      start: 9,
                      end: 10,
                      loc: {
                        start: {
                          line: 1,
                          column: 9
                        },
                        end: {
                          line: 1,
                          column: 10
                        }
                      },
                      range: [
                        9,
                        10
                      ],
                      name: "b"
                    },
                    kind: "init"
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 14,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 14
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  14,
                  16
                ],
                properties: []
              }
            }
          ],
          kind: "const"
        }
      ],
      sourceType: "script"
    },
    "let {a:b} = {}": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                4,
                14
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  4,
                  9
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      5,
                      8
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    },
                    value: {
                      type: "Identifier",
                      start: 7,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 7
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      range: [
                        7,
                        8
                      ],
                      name: "b"
                    },
                    kind: "init"
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  12,
                  14
                ],
                properties: []
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "var {a:b} = {}": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                4,
                14
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  4,
                  9
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      5,
                      8
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    },
                    value: {
                      type: "Identifier",
                      start: 7,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 7
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      range: [
                        7,
                        8
                      ],
                      name: "b"
                    },
                    kind: "init"
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  12,
                  14
                ],
                properties: []
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "(function* () { yield *v })": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 26
              }
            },
            range: [
              1,
              26
            ],
            id: null,
            generator: true,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 14,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              range: [
                14,
                26
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 16,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    16,
                    24
                  ],
                  expression: {
                    type: "YieldExpression",
                    start: 16,
                    end: 24,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 24
                      }
                    },
                    range: [
                      16,
                      24
                    ],
                    delegate: true,
                    argument: {
                      type: "Identifier",
                      start: 23,
                      end: 24,
                      loc: {
                        start: {
                          line: 1,
                          column: 23
                        },
                        end: {
                          line: 1,
                          column: 24
                        }
                      },
                      range: [
                        23,
                        24
                      ],
                      name: "v"
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function* test () { yield *v }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      range: [
        0,
        30
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          range: [
            0,
            30
          ],
          id: {
            type: "Identifier",
            start: 10,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 10
              },
              end: {
                line: 1,
                column: 14
              }
            },
            range: [
              10,
              14
            ],
            name: "test"
          },
          generator: true,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 18,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 30
              }
            },
            range: [
              18,
              30
            ],
            body: [
              {
                type: "ExpressionStatement",
                start: 20,
                end: 28,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 28
                  }
                },
                range: [
                  20,
                  28
                ],
                expression: {
                  type: "YieldExpression",
                  start: 20,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  range: [
                    20,
                    28
                  ],
                  delegate: true,
                  argument: {
                    type: "Identifier",
                    start: 27,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    range: [
                      27,
                      28
                    ],
                    name: "v"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var x = { *test () { yield *v } };": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      range: [
        0,
        34
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          range: [
            0,
            34
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              range: [
                4,
                33
              ],
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  4,
                  5
                ],
                name: "x"
              },
              init: {
                type: "ObjectExpression",
                start: 8,
                end: 33,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 33
                  }
                },
                range: [
                  8,
                  33
                ],
                properties: [
                  {
                    type: "Property",
                    start: 10,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    range: [
                      10,
                      31
                    ],
                    method: true,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 11,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 11
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        11,
                        15
                      ],
                      name: "test"
                    },
                    kind: "init",
                    value: {
                      type: "FunctionExpression",
                      start: 16,
                      end: 31,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 31
                        }
                      },
                      range: [
                        16,
                        31
                      ],
                      id: null,
                      generator: true,
                      expression: false,
                      params: [],
                      body: {
                        type: "BlockStatement",
                        start: 19,
                        end: 31,
                        loc: {
                          start: {
                            line: 1,
                            column: 19
                          },
                          end: {
                            line: 1,
                            column: 31
                          }
                        },
                        range: [
                          19,
                          31
                        ],
                        body: [
                          {
                            type: "ExpressionStatement",
                            start: 21,
                            end: 29,
                            loc: {
                              start: {
                                line: 1,
                                column: 21
                              },
                              end: {
                                line: 1,
                                column: 29
                              }
                            },
                            range: [
                              21,
                              29
                            ],
                            expression: {
                              type: "YieldExpression",
                              start: 21,
                              end: 29,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 21
                                },
                                end: {
                                  line: 1,
                                  column: 29
                                }
                              },
                              range: [
                                21,
                                29
                              ],
                              delegate: true,
                              argument: {
                                type: "Identifier",
                                start: 28,
                                end: 29,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 28
                                  },
                                  end: {
                                    line: 1,
                                    column: 29
                                  }
                                },
                                range: [
                                  28,
                                  29
                                ],
                                name: "v"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "function* foo() { console.log(yield); }": {
      type: "Program",
      start: 0,
      end: 39,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 39,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "foo"
          },
          generator: true,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 16,
            end: 39,
            body: [
              {
                type: "ExpressionStatement",
                start: 18,
                end: 37,
                expression: {
                  type: "CallExpression",
                  start: 18,
                  end: 36,
                  callee: {
                    type: "MemberExpression",
                    start: 18,
                    end: 29,
                    object: {
                      type: "Identifier",
                      start: 18,
                      end: 25,
                      name: "console"
                    },
                    property: {
                      type: "Identifier",
                      start: 26,
                      end: 29,
                      name: "log"
                    },
                    computed: false
                  },
                  arguments: [
                    {
                      type: "YieldExpression",
                      start: 30,
                      end: 35,
                      delegate: false,
                      argument: null
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function* t() {}": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      range: [
        0,
        16
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          range: [
            0,
            16
          ],
          id: {
            type: "Identifier",
            start: 10,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 10
              },
              end: {
                line: 1,
                column: 11
              }
            },
            range: [
              10,
              11
            ],
            name: "t"
          },
          generator: true,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 14,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 16
              }
            },
            range: [
              14,
              16
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "(function* () { yield yield 10 })": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 32
              }
            },
            range: [
              1,
              32
            ],
            id: null,
            generator: true,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 14,
              end: 32,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 32
                }
              },
              range: [
                14,
                32
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 16,
                  end: 30,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 30
                    }
                  },
                  range: [
                    16,
                    30
                  ],
                  expression: {
                    type: "YieldExpression",
                    start: 16,
                    end: 30,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 30
                      }
                    },
                    range: [
                      16,
                      30
                    ],
                    delegate: false,
                    argument: {
                      type: "YieldExpression",
                      start: 22,
                      end: 30,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 30
                        }
                      },
                      range: [
                        22,
                        30
                      ],
                      delegate: false,
                      argument: {
                        type: "Literal",
                        start: 28,
                        end: 30,
                        loc: {
                          start: {
                            line: 1,
                            column: 28
                          },
                          end: {
                            line: 1,
                            column: 30
                          }
                        },
                        range: [
                          28,
                          30
                        ],
                        value: 10,
                        raw: "10"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function *g() { (x = yield) => {} }": {
      type: "Error",
      message: "Yield expression cannot be a default value (1:21)"
    },
    "function *g() { ({x = yield}) => {} }": {
      type: "Error",
      message: "Yield expression cannot be a default value (1:22)"
    },
    "for(x of list) process(x);": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          range: [
            0,
            26
          ],
          left: {
            type: "Identifier",
            start: 4,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 5
              }
            },
            range: [
              4,
              5
            ],
            name: "x"
          },
          right: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              9,
              13
            ],
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 15,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 26
              }
            },
            range: [
              15,
              26
            ],
            expression: {
              type: "CallExpression",
              start: 15,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              range: [
                15,
                25
              ],
              callee: {
                type: "Identifier",
                start: 15,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                range: [
                  15,
                  22
                ],
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 23,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    23,
                    24
                  ],
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for (var x of list) process(x);": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      range: [
        0,
        31
      ],
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          range: [
            0,
            31
          ],
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              5,
              10
            ],
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  9,
                  10
                ],
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    9,
                    10
                  ],
                  name: "x"
                },
                init: null
              }
            ],
            kind: "var"
          },
          right: {
            type: "Identifier",
            start: 14,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              14,
              18
            ],
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 20,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 31
              }
            },
            range: [
              20,
              31
            ],
            expression: {
              type: "CallExpression",
              start: 20,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              range: [
                20,
                30
              ],
              callee: {
                type: "Identifier",
                start: 20,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  20,
                  27
                ],
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 28,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    28,
                    29
                  ],
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for (var x = 42 of list) process(x);": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      range: [
        0,
        36
      ],
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          range: [
            0,
            36
          ],
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              5,
              15
            ],
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                range: [
                  9,
                  15
                ],
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    9,
                    10
                  ],
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 13,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    13,
                    15
                  ],
                  value: 42,
                  raw: "42"
                }
              }
            ],
            kind: "var"
          },
          right: {
            type: "Identifier",
            start: 19,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 19
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              19,
              23
            ],
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 25,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 25
              },
              end: {
                line: 1,
                column: 36
              }
            },
            range: [
              25,
              36
            ],
            expression: {
              type: "CallExpression",
              start: 25,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              range: [
                25,
                35
              ],
              callee: {
                type: "Identifier",
                start: 25,
                end: 32,
                loc: {
                  start: {
                    line: 1,
                    column: 25
                  },
                  end: {
                    line: 1,
                    column: 32
                  }
                },
                range: [
                  25,
                  32
                ],
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 33,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 33
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  range: [
                    33,
                    34
                  ],
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for (let x of list) process(x);": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      range: [
        0,
        31
      ],
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          range: [
            0,
            31
          ],
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              5,
              10
            ],
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  9,
                  10
                ],
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    9,
                    10
                  ],
                  name: "x"
                },
                init: null
              }
            ],
            kind: "let"
          },
          right: {
            type: "Identifier",
            start: 14,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              14,
              18
            ],
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 20,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 31
              }
            },
            range: [
              20,
              31
            ],
            expression: {
              type: "CallExpression",
              start: 20,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              range: [
                20,
                30
              ],
              callee: {
                type: "Identifier",
                start: 20,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  20,
                  27
                ],
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 28,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    28,
                    29
                  ],
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "var A = class extends B {}": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          range: [
            0,
            26
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              range: [
                4,
                26
              ],
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  4,
                  5
                ],
                name: "A"
              },
              init: {
                type: "ClassExpression",
                start: 8,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                range: [
                  8,
                  26
                ],
                id: null,
                superClass: {
                  type: "Identifier",
                  start: 22,
                  end: 23,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 23
                    }
                  },
                  range: [
                    22,
                    23
                  ],
                  name: "B"
                },
                body: {
                  type: "ClassBody",
                  start: 24,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    24,
                    26
                  ],
                  body: []
                }
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "class A extends class B extends C {} {}": {
      type: "Program",
      start: 0,
      end: 39,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 39
        }
      },
      range: [
        0,
        39
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 39,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 39
            }
          },
          range: [
            0,
            39
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: {
            type: "ClassExpression",
            start: 16,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 36
              }
            },
            range: [
              16,
              36
            ],
            id: {
              type: "Identifier",
              start: 22,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 22
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                22,
                23
              ],
              name: "B"
            },
            superClass: {
              type: "Identifier",
              start: 32,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 32
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              range: [
                32,
                33
              ],
              name: "C"
            },
            body: {
              type: "ClassBody",
              start: 34,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 34
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              range: [
                34,
                36
              ],
              body: []
            }
          },
          body: {
            type: "ClassBody",
            start: 37,
            end: 39,
            loc: {
              start: {
                line: 1,
                column: 37
              },
              end: {
                line: 1,
                column: 39
              }
            },
            range: [
              37,
              39
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "class A {get() {}}": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              8,
              18
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                range: [
                  9,
                  17
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    9,
                    12
                  ],
                  name: "get"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    12,
                    17
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      15,
                      17
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static get() {}}": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          range: [
            0,
            26
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 26
              }
            },
            range: [
              8,
              26
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  10,
                  25
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 17,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    17,
                    20
                  ],
                  name: "get"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 20,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  range: [
                    20,
                    25
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 23,
                    end: 25,
                    loc: {
                      start: {
                        line: 1,
                        column: 23
                      },
                      end: {
                        line: 1,
                        column: 25
                      }
                    },
                    range: [
                      23,
                      25
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A extends B {get foo() {}}": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 32
        }
      },
      range: [
        0,
        32
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 32
            }
          },
          range: [
            0,
            32
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: {
            type: "Identifier",
            start: 16,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              16,
              17
            ],
            name: "B"
          },
          body: {
            type: "ClassBody",
            start: 18,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 32
              }
            },
            range: [
              18,
              32
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 19,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                range: [
                  19,
                  31
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 23,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    23,
                    26
                  ],
                  name: "foo"
                },
                static: false,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 26,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  range: [
                    26,
                    31
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 29,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 29
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    range: [
                      29,
                      31
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A extends B { static get foo() {}}": {
      type: "Program",
      start: 0,
      end: 40,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 40
        }
      },
      range: [
        0,
        40
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 40,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 40
            }
          },
          range: [
            0,
            40
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: {
            type: "Identifier",
            start: 16,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              16,
              17
            ],
            name: "B"
          },
          body: {
            type: "ClassBody",
            start: 18,
            end: 40,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 40
              }
            },
            range: [
              18,
              40
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 20,
                end: 39,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 39
                  }
                },
                range: [
                  20,
                  39
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 31,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 31
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  range: [
                    31,
                    34
                  ],
                  name: "foo"
                },
                static: true,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 34,
                  end: 39,
                  loc: {
                    start: {
                      line: 1,
                      column: 34
                    },
                    end: {
                      line: 1,
                      column: 39
                    }
                  },
                  range: [
                    34,
                    39
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 37,
                    end: 39,
                    loc: {
                      start: {
                        line: 1,
                        column: 37
                      },
                      end: {
                        line: 1,
                        column: 39
                      }
                    },
                    range: [
                      37,
                      39
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {set a(v) {}}": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      range: [
        0,
        21
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          range: [
            0,
            21
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 21
              }
            },
            range: [
              8,
              21
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  9,
                  20
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  range: [
                    13,
                    14
                  ],
                  name: "a"
                },
                static: false,
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 14,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    14,
                    20
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 15,
                      end: 16,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 16
                        }
                      },
                      range: [
                        15,
                        16
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 18,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    range: [
                      18,
                      20
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static set a(v) {}}": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      range: [
        0,
        29
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          range: [
            0,
            29
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 29
              }
            },
            range: [
              8,
              29
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 28,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 28
                  }
                },
                range: [
                  10,
                  28
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    21,
                    22
                  ],
                  name: "a"
                },
                static: true,
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 22,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  range: [
                    22,
                    28
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 23,
                      end: 24,
                      loc: {
                        start: {
                          line: 1,
                          column: 23
                        },
                        end: {
                          line: 1,
                          column: 24
                        }
                      },
                      range: [
                        23,
                        24
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 26,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 26
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    range: [
                      26,
                      28
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {set(v) {};}": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      range: [
        0,
        20
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          range: [
            0,
            20
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 20
              }
            },
            range: [
              8,
              20
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  9,
                  18
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    9,
                    12
                  ],
                  name: "set"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    12,
                    18
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 13,
                      end: 14,
                      loc: {
                        start: {
                          line: 1,
                          column: 13
                        },
                        end: {
                          line: 1,
                          column: 14
                        }
                      },
                      range: [
                        13,
                        14
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 16,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      16,
                      18
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static set(v) {};}": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      range: [
        0,
        28
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          range: [
            0,
            28
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 28
              }
            },
            range: [
              8,
              28
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                range: [
                  10,
                  26
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 17,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    17,
                    20
                  ],
                  name: "set"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 20,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    20,
                    26
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 21,
                      end: 22,
                      loc: {
                        start: {
                          line: 1,
                          column: 21
                        },
                        end: {
                          line: 1,
                          column: 22
                        }
                      },
                      range: [
                        21,
                        22
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 24,
                    end: 26,
                    loc: {
                      start: {
                        line: 1,
                        column: 24
                      },
                      end: {
                        line: 1,
                        column: 26
                      }
                    },
                    range: [
                      24,
                      26
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {*gen(v) { yield v; }}": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      range: [
        0,
        30
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          range: [
            0,
            30
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 30
              }
            },
            range: [
              8,
              30
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  9,
                  29
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    10,
                    13
                  ],
                  name: "gen"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 13,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    13,
                    29
                  ],
                  id: null,
                  generator: true,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 14,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 14
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        14,
                        15
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 17,
                    end: 29,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 29
                      }
                    },
                    range: [
                      17,
                      29
                    ],
                    body: [
                      {
                        type: "ExpressionStatement",
                        start: 19,
                        end: 27,
                        loc: {
                          start: {
                            line: 1,
                            column: 19
                          },
                          end: {
                            line: 1,
                            column: 27
                          }
                        },
                        range: [
                          19,
                          27
                        ],
                        expression: {
                          type: "YieldExpression",
                          start: 19,
                          end: 26,
                          loc: {
                            start: {
                              line: 1,
                              column: 19
                            },
                            end: {
                              line: 1,
                              column: 26
                            }
                          },
                          range: [
                            19,
                            26
                          ],
                          delegate: false,
                          argument: {
                            type: "Identifier",
                            start: 25,
                            end: 26,
                            loc: {
                              start: {
                                line: 1,
                                column: 25
                              },
                              end: {
                                line: 1,
                                column: 26
                              }
                            },
                            range: [
                              25,
                              26
                            ],
                            name: "v"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static *gen(v) { yield v; }}": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      range: [
        0,
        38
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          range: [
            0,
            38
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 38
              }
            },
            range: [
              8,
              38
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 37,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 37
                  }
                },
                range: [
                  10,
                  37
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 18,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 18
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    18,
                    21
                  ],
                  name: "gen"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 21,
                  end: 37,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 37
                    }
                  },
                  range: [
                    21,
                    37
                  ],
                  id: null,
                  generator: true,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 22,
                      end: 23,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 23
                        }
                      },
                      range: [
                        22,
                        23
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 25,
                    end: 37,
                    loc: {
                      start: {
                        line: 1,
                        column: 25
                      },
                      end: {
                        line: 1,
                        column: 37
                      }
                    },
                    range: [
                      25,
                      37
                    ],
                    body: [
                      {
                        type: "ExpressionStatement",
                        start: 27,
                        end: 35,
                        loc: {
                          start: {
                            line: 1,
                            column: 27
                          },
                          end: {
                            line: 1,
                            column: 35
                          }
                        },
                        range: [
                          27,
                          35
                        ],
                        expression: {
                          type: "YieldExpression",
                          start: 27,
                          end: 34,
                          loc: {
                            start: {
                              line: 1,
                              column: 27
                            },
                            end: {
                              line: 1,
                              column: 34
                            }
                          },
                          range: [
                            27,
                            34
                          ],
                          delegate: false,
                          argument: {
                            type: "Identifier",
                            start: 33,
                            end: 34,
                            loc: {
                              start: {
                                line: 1,
                                column: 33
                              },
                              end: {
                                line: 1,
                                column: 34
                              }
                            },
                            range: [
                              33,
                              34
                            ],
                            name: "v"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "\"use strict\"; (class A {constructor() { super() }})": {
      type: "Program",
      start: 0,
      end: 51,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 51
        }
      },
      range: [
        0,
        51
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            value: "use strict",
            raw: "\"use strict\""
          }
        },
        {
          type: "ExpressionStatement",
          start: 14,
          end: 51,
          loc: {
            start: {
              line: 1,
              column: 14
            },
            end: {
              line: 1,
              column: 51
            }
          },
          range: [
            14,
            51
          ],
          expression: {
            type: "ClassExpression",
            start: 15,
            end: 50,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 50
              }
            },
            range: [
              15,
              50
            ],
            id: {
              type: "Identifier",
              start: 21,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                21,
                22
              ],
              name: "A"
            },
            superClass: null,
            body: {
              type: "ClassBody",
              start: 23,
              end: 50,
              loc: {
                start: {
                  line: 1,
                  column: 23
                },
                end: {
                  line: 1,
                  column: 50
                }
              },
              range: [
                23,
                50
              ],
              body: [
                {
                  type: "MethodDefinition",
                  start: 24,
                  end: 49,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 49
                    }
                  },
                  range: [
                    24,
                    49
                  ],
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 24,
                    end: 35,
                    loc: {
                      start: {
                        line: 1,
                        column: 24
                      },
                      end: {
                        line: 1,
                        column: 35
                      }
                    },
                    range: [
                      24,
                      35
                    ],
                    name: "constructor"
                  },
                  static: false,
                  kind: "constructor",
                  value: {
                    type: "FunctionExpression",
                    start: 35,
                    end: 49,
                    loc: {
                      start: {
                        line: 1,
                        column: 35
                      },
                      end: {
                        line: 1,
                        column: 49
                      }
                    },
                    range: [
                      35,
                      49
                    ],
                    id: null,
                    generator: false,
                    expression: false,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 38,
                      end: 49,
                      loc: {
                        start: {
                          line: 1,
                          column: 38
                        },
                        end: {
                          line: 1,
                          column: 49
                        }
                      },
                      range: [
                        38,
                        49
                      ],
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 40,
                          end: 47,
                          loc: {
                            start: {
                              line: 1,
                              column: 40
                            },
                            end: {
                              line: 1,
                              column: 47
                            }
                          },
                          range: [
                            40,
                            47
                          ],
                          expression: {
                            type: "CallExpression",
                            start: 40,
                            end: 47,
                            loc: {
                              start: {
                                line: 1,
                                column: 40
                              },
                              end: {
                                line: 1,
                                column: 47
                              }
                            },
                            range: [
                              40,
                              47
                            ],
                            callee: {
                              type: "Super",
                              start: 40,
                              end: 45,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 40
                                },
                                end: {
                                  line: 1,
                                  column: 45
                                }
                              },
                              range: [
                                40,
                                45
                              ]
                            },
                            arguments: []
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "class A {'constructor'() {}}": {
      type: "Program",
      start: 0,
      end: 28,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 28,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 28,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 27,
                computed: false,
                key: {
                  type: "Literal",
                  start: 9,
                  end: 22,
                  value: "constructor",
                  raw: "'constructor'"
                },
                static: false,
                kind: "constructor",
                value: {
                  type: "FunctionExpression",
                  start: 22,
                  end: 27,
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 25,
                    end: 27,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { constructor() {} 'constructor'() }": {
      type: "Error",
      message: "Duplicate constructor in the same class (1:27)"
    },
    "class A { get constructor() {} }": {
      type: "Error",
      message: "Constructor can't have get/set modifier (1:14)"
    },
    "class A { *constructor() {} }": {
      type: "Error",
      message: "Constructor can't be a generator (1:11)"
    },
    "class A {static foo() {}}": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      range: [
        0,
        25
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          range: [
            0,
            25
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 25
              }
            },
            range: [
              8,
              25
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                range: [
                  9,
                  24
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 16,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    16,
                    19
                  ],
                  name: "foo"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 19,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    19,
                    24
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 22,
                    end: 24,
                    loc: {
                      start: {
                        line: 1,
                        column: 22
                      },
                      end: {
                        line: 1,
                        column: 24
                      }
                    },
                    range: [
                      22,
                      24
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {foo() {} static bar() {}}": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      range: [
        0,
        34
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          range: [
            0,
            34
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 34,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 34
              }
            },
            range: [
              8,
              34
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                range: [
                  9,
                  17
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    9,
                    12
                  ],
                  name: "foo"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    12,
                    17
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      15,
                      17
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 18,
                end: 33,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 33
                  }
                },
                range: [
                  18,
                  33
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 25,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 25
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  range: [
                    25,
                    28
                  ],
                  name: "bar"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 28,
                  end: 33,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 33
                    }
                  },
                  range: [
                    28,
                    33
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 31,
                    end: 33,
                    loc: {
                      start: {
                        line: 1,
                        column: 31
                      },
                      end: {
                        line: 1,
                        column: 33
                      }
                    },
                    range: [
                      31,
                      33
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "\"use strict\"; (class A { static constructor() { super() }})": {
      type: "Program",
      start: 0,
      end: 59,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 59
        }
      },
      range: [
        0,
        59
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            value: "use strict",
            raw: "\"use strict\""
          }
        },
        {
          type: "ExpressionStatement",
          start: 14,
          end: 59,
          loc: {
            start: {
              line: 1,
              column: 14
            },
            end: {
              line: 1,
              column: 59
            }
          },
          range: [
            14,
            59
          ],
          expression: {
            type: "ClassExpression",
            start: 15,
            end: 58,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 58
              }
            },
            range: [
              15,
              58
            ],
            id: {
              type: "Identifier",
              start: 21,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                21,
                22
              ],
              name: "A"
            },
            superClass: null,
            body: {
              type: "ClassBody",
              start: 23,
              end: 58,
              loc: {
                start: {
                  line: 1,
                  column: 23
                },
                end: {
                  line: 1,
                  column: 58
                }
              },
              range: [
                23,
                58
              ],
              body: [
                {
                  type: "MethodDefinition",
                  start: 25,
                  end: 57,
                  loc: {
                    start: {
                      line: 1,
                      column: 25
                    },
                    end: {
                      line: 1,
                      column: 57
                    }
                  },
                  range: [
                    25,
                    57
                  ],
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 32,
                    end: 43,
                    loc: {
                      start: {
                        line: 1,
                        column: 32
                      },
                      end: {
                        line: 1,
                        column: 43
                      }
                    },
                    range: [
                      32,
                      43
                    ],
                    name: "constructor"
                  },
                  static: true,
                  kind: "method",
                  value: {
                    type: "FunctionExpression",
                    start: 43,
                    end: 57,
                    loc: {
                      start: {
                        line: 1,
                        column: 43
                      },
                      end: {
                        line: 1,
                        column: 57
                      }
                    },
                    range: [
                      43,
                      57
                    ],
                    id: null,
                    generator: false,
                    expression: false,
                    params: [],
                    body: {
                      type: "BlockStatement",
                      start: 46,
                      end: 57,
                      loc: {
                        start: {
                          line: 1,
                          column: 46
                        },
                        end: {
                          line: 1,
                          column: 57
                        }
                      },
                      range: [
                        46,
                        57
                      ],
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 48,
                          end: 55,
                          loc: {
                            start: {
                              line: 1,
                              column: 48
                            },
                            end: {
                              line: 1,
                              column: 55
                            }
                          },
                          range: [
                            48,
                            55
                          ],
                          expression: {
                            type: "CallExpression",
                            start: 48,
                            end: 55,
                            loc: {
                              start: {
                                line: 1,
                                column: 48
                              },
                              end: {
                                line: 1,
                                column: 55
                              }
                            },
                            range: [
                              48,
                              55
                            ],
                            callee: {
                              type: "Super",
                              start: 48,
                              end: 53,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 48
                                },
                                end: {
                                  line: 1,
                                  column: 53
                                }
                              },
                              range: [
                                48,
                                53
                              ]
                            },
                            arguments: []
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "class A { foo() {} bar() {}}": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      range: [
        0,
        28
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          range: [
            0,
            28
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 28
              }
            },
            range: [
              8,
              28
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  10,
                  18
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    10,
                    13
                  ],
                  name: "foo"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 13,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    13,
                    18
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 16,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      16,
                      18
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 19,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  19,
                  27
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 19,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    19,
                    22
                  ],
                  name: "bar"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 22,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  range: [
                    22,
                    27
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 25,
                    end: 27,
                    loc: {
                      start: {
                        line: 1,
                        column: 25
                      },
                      end: {
                        line: 1,
                        column: 27
                      }
                    },
                    range: [
                      25,
                      27
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { get foo() {} set foo(v) {}}": {
      type: "Program",
      start: 0,
      end: 37,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 37
        }
      },
      range: [
        0,
        37
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 37,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 37
            }
          },
          range: [
            0,
            37
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 37,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 37
              }
            },
            range: [
              8,
              37
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                range: [
                  10,
                  22
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 14,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    14,
                    17
                  ],
                  name: "foo"
                },
                static: false,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 17,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    17,
                    22
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 20,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    range: [
                      20,
                      22
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 23,
                end: 36,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 36
                  }
                },
                range: [
                  23,
                  36
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 27,
                  end: 30,
                  loc: {
                    start: {
                      line: 1,
                      column: 27
                    },
                    end: {
                      line: 1,
                      column: 30
                    }
                  },
                  range: [
                    27,
                    30
                  ],
                  name: "foo"
                },
                static: false,
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 30,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 30
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  range: [
                    30,
                    36
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 31,
                      end: 32,
                      loc: {
                        start: {
                          line: 1,
                          column: 31
                        },
                        end: {
                          line: 1,
                          column: 32
                        }
                      },
                      range: [
                        31,
                        32
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 34,
                    end: 36,
                    loc: {
                      start: {
                        line: 1,
                        column: 34
                      },
                      end: {
                        line: 1,
                        column: 36
                      }
                    },
                    range: [
                      34,
                      36
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static get foo() {} get foo() {}}": {
      type: "Program",
      start: 0,
      end: 43,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 43
        }
      },
      range: [
        0,
        43
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 43,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 43
            }
          },
          range: [
            0,
            43
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 43,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 43
              }
            },
            range: [
              8,
              43
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  10,
                  29
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    21,
                    24
                  ],
                  name: "foo"
                },
                static: true,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 24,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    24,
                    29
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 27,
                    end: 29,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 29
                      }
                    },
                    range: [
                      27,
                      29
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 30,
                end: 42,
                loc: {
                  start: {
                    line: 1,
                    column: 30
                  },
                  end: {
                    line: 1,
                    column: 42
                  }
                },
                range: [
                  30,
                  42
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 34,
                  end: 37,
                  loc: {
                    start: {
                      line: 1,
                      column: 34
                    },
                    end: {
                      line: 1,
                      column: 37
                    }
                  },
                  range: [
                    34,
                    37
                  ],
                  name: "foo"
                },
                static: false,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 37,
                  end: 42,
                  loc: {
                    start: {
                      line: 1,
                      column: 37
                    },
                    end: {
                      line: 1,
                      column: 42
                    }
                  },
                  range: [
                    37,
                    42
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 40,
                    end: 42,
                    loc: {
                      start: {
                        line: 1,
                        column: 40
                      },
                      end: {
                        line: 1,
                        column: 42
                      }
                    },
                    range: [
                      40,
                      42
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static get foo() {} static get bar() {} }": {
      type: "Program",
      start: 0,
      end: 51,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 51
        }
      },
      range: [
        0,
        51
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 51,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 51
            }
          },
          range: [
            0,
            51
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 51,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 51
              }
            },
            range: [
              8,
              51
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  10,
                  29
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    21,
                    24
                  ],
                  name: "foo"
                },
                static: true,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 24,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    24,
                    29
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 27,
                    end: 29,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 29
                      }
                    },
                    range: [
                      27,
                      29
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 30,
                end: 49,
                loc: {
                  start: {
                    line: 1,
                    column: 30
                  },
                  end: {
                    line: 1,
                    column: 49
                  }
                },
                range: [
                  30,
                  49
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 41,
                  end: 44,
                  loc: {
                    start: {
                      line: 1,
                      column: 41
                    },
                    end: {
                      line: 1,
                      column: 44
                    }
                  },
                  range: [
                    41,
                    44
                  ],
                  name: "bar"
                },
                static: true,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 44,
                  end: 49,
                  loc: {
                    start: {
                      line: 1,
                      column: 44
                    },
                    end: {
                      line: 1,
                      column: 49
                    }
                  },
                  range: [
                    44,
                    49
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 47,
                    end: 49,
                    loc: {
                      start: {
                        line: 1,
                        column: 47
                      },
                      end: {
                        line: 1,
                        column: 49
                      }
                    },
                    range: [
                      47,
                      49
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static get foo() {} static set foo(v) {} get foo() {} set foo(v) {}}": {
      type: "Program",
      start: 0,
      end: 78,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 78
        }
      },
      range: [
        0,
        78
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 78,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 78
            }
          },
          range: [
            0,
            78
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 78,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 78
              }
            },
            range: [
              8,
              78
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  10,
                  29
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    21,
                    24
                  ],
                  name: "foo"
                },
                static: true,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 24,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    24,
                    29
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 27,
                    end: 29,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 29
                      }
                    },
                    range: [
                      27,
                      29
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 30,
                end: 50,
                loc: {
                  start: {
                    line: 1,
                    column: 30
                  },
                  end: {
                    line: 1,
                    column: 50
                  }
                },
                range: [
                  30,
                  50
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 41,
                  end: 44,
                  loc: {
                    start: {
                      line: 1,
                      column: 41
                    },
                    end: {
                      line: 1,
                      column: 44
                    }
                  },
                  range: [
                    41,
                    44
                  ],
                  name: "foo"
                },
                static: true,
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 44,
                  end: 50,
                  loc: {
                    start: {
                      line: 1,
                      column: 44
                    },
                    end: {
                      line: 1,
                      column: 50
                    }
                  },
                  range: [
                    44,
                    50
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 45,
                      end: 46,
                      loc: {
                        start: {
                          line: 1,
                          column: 45
                        },
                        end: {
                          line: 1,
                          column: 46
                        }
                      },
                      range: [
                        45,
                        46
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 48,
                    end: 50,
                    loc: {
                      start: {
                        line: 1,
                        column: 48
                      },
                      end: {
                        line: 1,
                        column: 50
                      }
                    },
                    range: [
                      48,
                      50
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 51,
                end: 63,
                loc: {
                  start: {
                    line: 1,
                    column: 51
                  },
                  end: {
                    line: 1,
                    column: 63
                  }
                },
                range: [
                  51,
                  63
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 55,
                  end: 58,
                  loc: {
                    start: {
                      line: 1,
                      column: 55
                    },
                    end: {
                      line: 1,
                      column: 58
                    }
                  },
                  range: [
                    55,
                    58
                  ],
                  name: "foo"
                },
                static: false,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 58,
                  end: 63,
                  loc: {
                    start: {
                      line: 1,
                      column: 58
                    },
                    end: {
                      line: 1,
                      column: 63
                    }
                  },
                  range: [
                    58,
                    63
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 61,
                    end: 63,
                    loc: {
                      start: {
                        line: 1,
                        column: 61
                      },
                      end: {
                        line: 1,
                        column: 63
                      }
                    },
                    range: [
                      61,
                      63
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 64,
                end: 77,
                loc: {
                  start: {
                    line: 1,
                    column: 64
                  },
                  end: {
                    line: 1,
                    column: 77
                  }
                },
                range: [
                  64,
                  77
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 68,
                  end: 71,
                  loc: {
                    start: {
                      line: 1,
                      column: 68
                    },
                    end: {
                      line: 1,
                      column: 71
                    }
                  },
                  range: [
                    68,
                    71
                  ],
                  name: "foo"
                },
                static: false,
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 71,
                  end: 77,
                  loc: {
                    start: {
                      line: 1,
                      column: 71
                    },
                    end: {
                      line: 1,
                      column: 77
                    }
                  },
                  range: [
                    71,
                    77
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 72,
                      end: 73,
                      loc: {
                        start: {
                          line: 1,
                          column: 72
                        },
                        end: {
                          line: 1,
                          column: 73
                        }
                      },
                      range: [
                        72,
                        73
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 75,
                    end: 77,
                    loc: {
                      start: {
                        line: 1,
                        column: 75
                      },
                      end: {
                        line: 1,
                        column: 77
                      }
                    },
                    range: [
                      75,
                      77
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static [foo]() {} }": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      range: [
        0,
        29
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          range: [
            0,
            29
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 29
              }
            },
            range: [
              8,
              29
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  10,
                  27
                ],
                computed: true,
                key: {
                  type: "Identifier",
                  start: 18,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 18
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    18,
                    21
                  ],
                  name: "foo"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 22,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  range: [
                    22,
                    27
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 25,
                    end: 27,
                    loc: {
                      start: {
                        line: 1,
                        column: 25
                      },
                      end: {
                        line: 1,
                        column: 27
                      }
                    },
                    range: [
                      25,
                      27
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static get [foo]() {} }": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 33
              }
            },
            range: [
              8,
              33
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                range: [
                  10,
                  31
                ],
                computed: true,
                key: {
                  type: "Identifier",
                  start: 22,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  range: [
                    22,
                    25
                  ],
                  name: "foo"
                },
                static: true,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 26,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  range: [
                    26,
                    31
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 29,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 29
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    range: [
                      29,
                      31
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { set foo(v) {} get foo() {} }": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      range: [
        0,
        38
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          range: [
            0,
            38
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 38
              }
            },
            range: [
              8,
              38
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                range: [
                  10,
                  23
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 14,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    14,
                    17
                  ],
                  name: "foo"
                },
                static: false,
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 17,
                  end: 23,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 23
                    }
                  },
                  range: [
                    17,
                    23
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 18,
                      end: 19,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 19
                        }
                      },
                      range: [
                        18,
                        19
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 21,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 21
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    range: [
                      21,
                      23
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 24,
                end: 36,
                loc: {
                  start: {
                    line: 1,
                    column: 24
                  },
                  end: {
                    line: 1,
                    column: 36
                  }
                },
                range: [
                  24,
                  36
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 28,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  range: [
                    28,
                    31
                  ],
                  name: "foo"
                },
                static: false,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 31,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 31
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  range: [
                    31,
                    36
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 34,
                    end: 36,
                    loc: {
                      start: {
                        line: 1,
                        column: 34
                      },
                      end: {
                        line: 1,
                        column: 36
                      }
                    },
                    range: [
                      34,
                      36
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { foo() {} get foo() {} }": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 33
              }
            },
            range: [
              8,
              33
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  10,
                  18
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    10,
                    13
                  ],
                  name: "foo"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 13,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    13,
                    18
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 16,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      16,
                      18
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 19,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                range: [
                  19,
                  31
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 23,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    23,
                    26
                  ],
                  name: "foo"
                },
                static: false,
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 26,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  range: [
                    26,
                    31
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 29,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 29
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    range: [
                      29,
                      31
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class Semicolon { ; }": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      range: [
        0,
        21
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          range: [
            0,
            21
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              6,
              15
            ],
            name: "Semicolon"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 16,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 21
              }
            },
            range: [
              16,
              21
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "({[x]: 10})": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      range: [
        0,
        11
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          range: [
            0,
            11
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              1,
              10
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  2,
                  9
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                value: {
                  type: "Literal",
                  start: 7,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  range: [
                    7,
                    9
                  ],
                  value: 10,
                  raw: "10"
                },
                kind: "init"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({[\"x\" + \"y\"]: 10})": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          range: [
            0,
            19
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              1,
              18
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                range: [
                  2,
                  17
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "BinaryExpression",
                  start: 3,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    3,
                    12
                  ],
                  left: {
                    type: "Literal",
                    start: 3,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      3,
                      6
                    ],
                    value: "x",
                    raw: "\"x\""
                  },
                  operator: "+",
                  right: {
                    type: "Literal",
                    start: 9,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      9,
                      12
                    ],
                    value: "y",
                    raw: "\"y\""
                  }
                },
                value: {
                  type: "Literal",
                  start: 15,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 15
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    15,
                    17
                  ],
                  value: 10,
                  raw: "10"
                },
                kind: "init"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({[x]: function() {}})": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 21
              }
            },
            range: [
              1,
              21
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  2,
                  20
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                value: {
                  type: "FunctionExpression",
                  start: 7,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    7,
                    20
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 18,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    range: [
                      18,
                      20
                    ],
                    body: []
                  }
                },
                kind: "init"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({[x]: 10, y: 20})": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              1,
              17
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  2,
                  9
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                value: {
                  type: "Literal",
                  start: 7,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  range: [
                    7,
                    9
                  ],
                  value: 10,
                  raw: "10"
                },
                kind: "init"
              },
              {
                type: "Property",
                start: 11,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  11,
                  16
                ],
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 11,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    11,
                    12
                  ],
                  name: "y"
                },
                value: {
                  type: "Literal",
                  start: 14,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    14,
                    16
                  ],
                  value: 20,
                  raw: "20"
                },
                kind: "init"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({get [x]() {}, set [x](v) {}})": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      range: [
        0,
        31
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          range: [
            0,
            31
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 30
              }
            },
            range: [
              1,
              30
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  2,
                  14
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 7,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  range: [
                    7,
                    8
                  ],
                  name: "x"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 9,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  range: [
                    9,
                    14
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 12,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      12,
                      14
                    ],
                    body: []
                  }
                }
              },
              {
                type: "Property",
                start: 16,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  16,
                  29
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    21,
                    22
                  ],
                  name: "x"
                },
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 23,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    23,
                    29
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 24,
                      end: 25,
                      loc: {
                        start: {
                          line: 1,
                          column: 24
                        },
                        end: {
                          line: 1,
                          column: 25
                        }
                      },
                      range: [
                        24,
                        25
                      ],
                      name: "v"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 27,
                    end: 29,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 29
                      }
                    },
                    range: [
                      27,
                      29
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({[x]() {}})": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 11
              }
            },
            range: [
              1,
              11
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  2,
                  10
                ],
                method: true,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 5,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    5,
                    10
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 8,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      8,
                      10
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var {[x]: y} = {y}": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                4,
                18
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  4,
                  12
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 11,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 11
                      }
                    },
                    range: [
                      5,
                      11
                    ],
                    method: false,
                    shorthand: false,
                    computed: true,
                    key: {
                      type: "Identifier",
                      start: 6,
                      end: 7,
                      loc: {
                        start: {
                          line: 1,
                          column: 6
                        },
                        end: {
                          line: 1,
                          column: 7
                        }
                      },
                      range: [
                        6,
                        7
                      ],
                      name: "x"
                    },
                    value: {
                      type: "Identifier",
                      start: 10,
                      end: 11,
                      loc: {
                        start: {
                          line: 1,
                          column: 10
                        },
                        end: {
                          line: 1,
                          column: 11
                        }
                      },
                      range: [
                        10,
                        11
                      ],
                      name: "y"
                    },
                    kind: "init"
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 15,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  15,
                  18
                ],
                properties: [
                  {
                    type: "Property",
                    start: 16,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      16,
                      17
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 16,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      range: [
                        16,
                        17
                      ],
                      name: "y"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 16,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      range: [
                        16,
                        17
                      ],
                      name: "y"
                    }
                  }
                ]
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "function f({[x]: y}) {}": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      range: [
        0,
        23
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          range: [
            0,
            23
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "ObjectPattern",
              start: 11,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              range: [
                11,
                19
              ],
              properties: [
                {
                  type: "Property",
                  start: 12,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    12,
                    18
                  ],
                  method: false,
                  shorthand: false,
                  computed: true,
                  key: {
                    type: "Identifier",
                    start: 13,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      13,
                      14
                    ],
                    name: "x"
                  },
                  value: {
                    type: "Identifier",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      17,
                      18
                    ],
                    name: "y"
                  },
                  kind: "init"
                }
              ]
            }
          ],
          body: {
            type: "BlockStatement",
            start: 21,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              21,
              23
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "var x = {*[test]() { yield *v; }}": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              range: [
                4,
                33
              ],
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  4,
                  5
                ],
                name: "x"
              },
              init: {
                type: "ObjectExpression",
                start: 8,
                end: 33,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 33
                  }
                },
                range: [
                  8,
                  33
                ],
                properties: [
                  {
                    type: "Property",
                    start: 9,
                    end: 32,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 32
                      }
                    },
                    range: [
                      9,
                      32
                    ],
                    method: true,
                    shorthand: false,
                    computed: true,
                    key: {
                      type: "Identifier",
                      start: 11,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 11
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        11,
                        15
                      ],
                      name: "test"
                    },
                    kind: "init",
                    value: {
                      type: "FunctionExpression",
                      start: 16,
                      end: 32,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 32
                        }
                      },
                      range: [
                        16,
                        32
                      ],
                      id: null,
                      generator: true,
                      expression: false,
                      params: [],
                      body: {
                        type: "BlockStatement",
                        start: 19,
                        end: 32,
                        loc: {
                          start: {
                            line: 1,
                            column: 19
                          },
                          end: {
                            line: 1,
                            column: 32
                          }
                        },
                        range: [
                          19,
                          32
                        ],
                        body: [
                          {
                            type: "ExpressionStatement",
                            start: 21,
                            end: 30,
                            loc: {
                              start: {
                                line: 1,
                                column: 21
                              },
                              end: {
                                line: 1,
                                column: 30
                              }
                            },
                            range: [
                              21,
                              30
                            ],
                            expression: {
                              type: "YieldExpression",
                              start: 21,
                              end: 29,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 21
                                },
                                end: {
                                  line: 1,
                                  column: 29
                                }
                              },
                              range: [
                                21,
                                29
                              ],
                              delegate: true,
                              argument: {
                                type: "Identifier",
                                start: 28,
                                end: 29,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 28
                                  },
                                  end: {
                                    line: 1,
                                    column: 29
                                  }
                                },
                                range: [
                                  28,
                                  29
                                ],
                                name: "v"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "class A {[x]() {}}": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              8,
              18
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                range: [
                  9,
                  17
                ],
                computed: true,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  range: [
                    10,
                    11
                  ],
                  name: "x"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    12,
                    17
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      15,
                      17
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({[x]})": {
      type: "Error",
      message: "Unexpected token (1:5)"
    },
    "function f([x] = [1]) {}": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "AssignmentPattern",
              start: 11,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                11,
                20
              ],
              left: {
                type: "ArrayPattern",
                start: 11,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  11,
                  14
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 12,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    range: [
                      12,
                      13
                    ],
                    name: "x"
                  }
                ]
              },
              right: {
                type: "ArrayExpression",
                start: 17,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  17,
                  20
                ],
                elements: [
                  {
                    type: "Literal",
                    start: 18,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    range: [
                      18,
                      19
                    ],
                    value: 1,
                    raw: "1"
                  }
                ]
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 22,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 22
              },
              end: {
                line: 1,
                column: 24
              }
            },
            range: [
              22,
              24
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function f([x] = [1]) { 'use strict' }": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      range: [
        0,
        38
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          range: [
            0,
            38
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "AssignmentPattern",
              start: 11,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                11,
                20
              ],
              left: {
                type: "ArrayPattern",
                start: 11,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  11,
                  14
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 12,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    range: [
                      12,
                      13
                    ],
                    name: "x"
                  }
                ]
              },
              right: {
                type: "ArrayExpression",
                start: 17,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  17,
                  20
                ],
                elements: [
                  {
                    type: "Literal",
                    start: 18,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    range: [
                      18,
                      19
                    ],
                    value: 1,
                    raw: "1"
                  }
                ]
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 22,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 22
              },
              end: {
                line: 1,
                column: 38
              }
            },
            range: [
              22,
              38
            ],
            body: [
              {
                type: "ExpressionStatement",
                start: 24,
                end: 36,
                loc: {
                  start: {
                    line: 1,
                    column: 24
                  },
                  end: {
                    line: 1,
                    column: 36
                  }
                },
                range: [
                  24,
                  36
                ],
                expression: {
                  type: "Literal",
                  start: 24,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  range: [
                    24,
                    36
                  ],
                  value: "use strict",
                  raw: "'use strict'"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function f({x} = {x: 10}) {}": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      range: [
        0,
        28
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          range: [
            0,
            28
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "AssignmentPattern",
              start: 11,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              range: [
                11,
                24
              ],
              left: {
                type: "ObjectPattern",
                start: 11,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  11,
                  14
                ],
                properties: [
                  {
                    type: "Property",
                    start: 12,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    range: [
                      12,
                      13
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 12,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 12
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        12,
                        13
                      ],
                      name: "x"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 12,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 12
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        12,
                        13
                      ],
                      name: "x"
                    }
                  }
                ]
              },
              right: {
                type: "ObjectExpression",
                start: 17,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                range: [
                  17,
                  24
                ],
                properties: [
                  {
                    type: "Property",
                    start: 18,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    range: [
                      18,
                      23
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 18,
                      end: 19,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 19
                        }
                      },
                      range: [
                        18,
                        19
                      ],
                      name: "x"
                    },
                    value: {
                      type: "Literal",
                      start: 21,
                      end: 23,
                      loc: {
                        start: {
                          line: 1,
                          column: 21
                        },
                        end: {
                          line: 1,
                          column: 23
                        }
                      },
                      range: [
                        21,
                        23
                      ],
                      value: 10,
                      raw: "10"
                    },
                    kind: "init"
                  }
                ]
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 26,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 26
              },
              end: {
                line: 1,
                column: 28
              }
            },
            range: [
              26,
              28
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "f = function({x} = {x: 10}) {}": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      range: [
        0,
        30
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          range: [
            0,
            30
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 30
              }
            },
            range: [
              0,
              30
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "f"
            },
            right: {
              type: "FunctionExpression",
              start: 4,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              range: [
                4,
                30
              ],
              id: null,
              generator: false,
              expression: false,
              params: [
                {
                  type: "AssignmentPattern",
                  start: 13,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    13,
                    26
                  ],
                  left: {
                    type: "ObjectPattern",
                    start: 13,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    range: [
                      13,
                      16
                    ],
                    properties: [
                      {
                        type: "Property",
                        start: 14,
                        end: 15,
                        loc: {
                          start: {
                            line: 1,
                            column: 14
                          },
                          end: {
                            line: 1,
                            column: 15
                          }
                        },
                        range: [
                          14,
                          15
                        ],
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 14,
                          end: 15,
                          loc: {
                            start: {
                              line: 1,
                              column: 14
                            },
                            end: {
                              line: 1,
                              column: 15
                            }
                          },
                          range: [
                            14,
                            15
                          ],
                          name: "x"
                        },
                        kind: "init",
                        value: {
                          type: "Identifier",
                          start: 14,
                          end: 15,
                          loc: {
                            start: {
                              line: 1,
                              column: 14
                            },
                            end: {
                              line: 1,
                              column: 15
                            }
                          },
                          range: [
                            14,
                            15
                          ],
                          name: "x"
                        }
                      }
                    ]
                  },
                  right: {
                    type: "ObjectExpression",
                    start: 19,
                    end: 26,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 26
                      }
                    },
                    range: [
                      19,
                      26
                    ],
                    properties: [
                      {
                        type: "Property",
                        start: 20,
                        end: 25,
                        loc: {
                          start: {
                            line: 1,
                            column: 20
                          },
                          end: {
                            line: 1,
                            column: 25
                          }
                        },
                        range: [
                          20,
                          25
                        ],
                        method: false,
                        shorthand: false,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 20,
                          end: 21,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 21
                            }
                          },
                          range: [
                            20,
                            21
                          ],
                          name: "x"
                        },
                        value: {
                          type: "Literal",
                          start: 23,
                          end: 25,
                          loc: {
                            start: {
                              line: 1,
                              column: 23
                            },
                            end: {
                              line: 1,
                              column: 25
                            }
                          },
                          range: [
                            23,
                            25
                          ],
                          value: 10,
                          raw: "10"
                        },
                        kind: "init"
                      }
                    ]
                  }
                }
              ],
              body: {
                type: "BlockStatement",
                start: 28,
                end: 30,
                loc: {
                  start: {
                    line: 1,
                    column: 28
                  },
                  end: {
                    line: 1,
                    column: 30
                  }
                },
                range: [
                  28,
                  30
                ],
                body: []
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({f: function({x} = {x: 10}) {}})": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 32
              }
            },
            range: [
              1,
              32
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                range: [
                  2,
                  31
                ],
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 2,
                  end: 3,
                  loc: {
                    start: {
                      line: 1,
                      column: 2
                    },
                    end: {
                      line: 1,
                      column: 3
                    }
                  },
                  range: [
                    2,
                    3
                  ],
                  name: "f"
                },
                value: {
                  type: "FunctionExpression",
                  start: 5,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  range: [
                    5,
                    31
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "AssignmentPattern",
                      start: 14,
                      end: 27,
                      loc: {
                        start: {
                          line: 1,
                          column: 14
                        },
                        end: {
                          line: 1,
                          column: 27
                        }
                      },
                      range: [
                        14,
                        27
                      ],
                      left: {
                        type: "ObjectPattern",
                        start: 14,
                        end: 17,
                        loc: {
                          start: {
                            line: 1,
                            column: 14
                          },
                          end: {
                            line: 1,
                            column: 17
                          }
                        },
                        range: [
                          14,
                          17
                        ],
                        properties: [
                          {
                            type: "Property",
                            start: 15,
                            end: 16,
                            loc: {
                              start: {
                                line: 1,
                                column: 15
                              },
                              end: {
                                line: 1,
                                column: 16
                              }
                            },
                            range: [
                              15,
                              16
                            ],
                            method: false,
                            shorthand: true,
                            computed: false,
                            key: {
                              type: "Identifier",
                              start: 15,
                              end: 16,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 15
                                },
                                end: {
                                  line: 1,
                                  column: 16
                                }
                              },
                              range: [
                                15,
                                16
                              ],
                              name: "x"
                            },
                            kind: "init",
                            value: {
                              type: "Identifier",
                              start: 15,
                              end: 16,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 15
                                },
                                end: {
                                  line: 1,
                                  column: 16
                                }
                              },
                              range: [
                                15,
                                16
                              ],
                              name: "x"
                            }
                          }
                        ]
                      },
                      right: {
                        type: "ObjectExpression",
                        start: 20,
                        end: 27,
                        loc: {
                          start: {
                            line: 1,
                            column: 20
                          },
                          end: {
                            line: 1,
                            column: 27
                          }
                        },
                        range: [
                          20,
                          27
                        ],
                        properties: [
                          {
                            type: "Property",
                            start: 21,
                            end: 26,
                            loc: {
                              start: {
                                line: 1,
                                column: 21
                              },
                              end: {
                                line: 1,
                                column: 26
                              }
                            },
                            range: [
                              21,
                              26
                            ],
                            method: false,
                            shorthand: false,
                            computed: false,
                            key: {
                              type: "Identifier",
                              start: 21,
                              end: 22,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 21
                                },
                                end: {
                                  line: 1,
                                  column: 22
                                }
                              },
                              range: [
                                21,
                                22
                              ],
                              name: "x"
                            },
                            value: {
                              type: "Literal",
                              start: 24,
                              end: 26,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 24
                                },
                                end: {
                                  line: 1,
                                  column: 26
                                }
                              },
                              range: [
                                24,
                                26
                              ],
                              value: 10,
                              raw: "10"
                            },
                            kind: "init"
                          }
                        ]
                      }
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 29,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 29
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    range: [
                      29,
                      31
                    ],
                    body: []
                  }
                },
                kind: "init"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({f({x} = {x: 10}) {}})": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          range: [
            0,
            23
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              1,
              22
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                range: [
                  2,
                  21
                ],
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 2,
                  end: 3,
                  loc: {
                    start: {
                      line: 1,
                      column: 2
                    },
                    end: {
                      line: 1,
                      column: 3
                    }
                  },
                  range: [
                    2,
                    3
                  ],
                  name: "f"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 3,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    3,
                    21
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "AssignmentPattern",
                      start: 4,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 4
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      range: [
                        4,
                        17
                      ],
                      left: {
                        type: "ObjectPattern",
                        start: 4,
                        end: 7,
                        loc: {
                          start: {
                            line: 1,
                            column: 4
                          },
                          end: {
                            line: 1,
                            column: 7
                          }
                        },
                        range: [
                          4,
                          7
                        ],
                        properties: [
                          {
                            type: "Property",
                            start: 5,
                            end: 6,
                            loc: {
                              start: {
                                line: 1,
                                column: 5
                              },
                              end: {
                                line: 1,
                                column: 6
                              }
                            },
                            range: [
                              5,
                              6
                            ],
                            method: false,
                            shorthand: true,
                            computed: false,
                            key: {
                              type: "Identifier",
                              start: 5,
                              end: 6,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 5
                                },
                                end: {
                                  line: 1,
                                  column: 6
                                }
                              },
                              range: [
                                5,
                                6
                              ],
                              name: "x"
                            },
                            kind: "init",
                            value: {
                              type: "Identifier",
                              start: 5,
                              end: 6,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 5
                                },
                                end: {
                                  line: 1,
                                  column: 6
                                }
                              },
                              range: [
                                5,
                                6
                              ],
                              name: "x"
                            }
                          }
                        ]
                      },
                      right: {
                        type: "ObjectExpression",
                        start: 10,
                        end: 17,
                        loc: {
                          start: {
                            line: 1,
                            column: 10
                          },
                          end: {
                            line: 1,
                            column: 17
                          }
                        },
                        range: [
                          10,
                          17
                        ],
                        properties: [
                          {
                            type: "Property",
                            start: 11,
                            end: 16,
                            loc: {
                              start: {
                                line: 1,
                                column: 11
                              },
                              end: {
                                line: 1,
                                column: 16
                              }
                            },
                            range: [
                              11,
                              16
                            ],
                            method: false,
                            shorthand: false,
                            computed: false,
                            key: {
                              type: "Identifier",
                              start: 11,
                              end: 12,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 11
                                },
                                end: {
                                  line: 1,
                                  column: 12
                                }
                              },
                              range: [
                                11,
                                12
                              ],
                              name: "x"
                            },
                            value: {
                              type: "Literal",
                              start: 14,
                              end: 16,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 14
                                },
                                end: {
                                  line: 1,
                                  column: 16
                                }
                              },
                              range: [
                                14,
                                16
                              ],
                              value: 10,
                              raw: "10"
                            },
                            kind: "init"
                          }
                        ]
                      }
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 19,
                    end: 21,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 21
                      }
                    },
                    range: [
                      19,
                      21
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(class {f({x} = {x: 10}) {}})": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      range: [
        0,
        29
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          range: [
            0,
            29
          ],
          expression: {
            type: "ClassExpression",
            start: 1,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 28
              }
            },
            range: [
              1,
              28
            ],
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 7,
              end: 28,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 28
                }
              },
              range: [
                7,
                28
              ],
              body: [
                {
                  type: "MethodDefinition",
                  start: 8,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  range: [
                    8,
                    27
                  ],
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 8,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      8,
                      9
                    ],
                    name: "f"
                  },
                  static: false,
                  kind: "method",
                  value: {
                    type: "FunctionExpression",
                    start: 9,
                    end: 27,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 27
                      }
                    },
                    range: [
                      9,
                      27
                    ],
                    id: null,
                    generator: false,
                    expression: false,
                    params: [
                      {
                        type: "AssignmentPattern",
                        start: 10,
                        end: 23,
                        loc: {
                          start: {
                            line: 1,
                            column: 10
                          },
                          end: {
                            line: 1,
                            column: 23
                          }
                        },
                        range: [
                          10,
                          23
                        ],
                        left: {
                          type: "ObjectPattern",
                          start: 10,
                          end: 13,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 13
                            }
                          },
                          range: [
                            10,
                            13
                          ],
                          properties: [
                            {
                              type: "Property",
                              start: 11,
                              end: 12,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 11
                                },
                                end: {
                                  line: 1,
                                  column: 12
                                }
                              },
                              range: [
                                11,
                                12
                              ],
                              method: false,
                              shorthand: true,
                              computed: false,
                              key: {
                                type: "Identifier",
                                start: 11,
                                end: 12,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 11
                                  },
                                  end: {
                                    line: 1,
                                    column: 12
                                  }
                                },
                                range: [
                                  11,
                                  12
                                ],
                                name: "x"
                              },
                              kind: "init",
                              value: {
                                type: "Identifier",
                                start: 11,
                                end: 12,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 11
                                  },
                                  end: {
                                    line: 1,
                                    column: 12
                                  }
                                },
                                range: [
                                  11,
                                  12
                                ],
                                name: "x"
                              }
                            }
                          ]
                        },
                        right: {
                          type: "ObjectExpression",
                          start: 16,
                          end: 23,
                          loc: {
                            start: {
                              line: 1,
                              column: 16
                            },
                            end: {
                              line: 1,
                              column: 23
                            }
                          },
                          range: [
                            16,
                            23
                          ],
                          properties: [
                            {
                              type: "Property",
                              start: 17,
                              end: 22,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 17
                                },
                                end: {
                                  line: 1,
                                  column: 22
                                }
                              },
                              range: [
                                17,
                                22
                              ],
                              method: false,
                              shorthand: false,
                              computed: false,
                              key: {
                                type: "Identifier",
                                start: 17,
                                end: 18,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 17
                                  },
                                  end: {
                                    line: 1,
                                    column: 18
                                  }
                                },
                                range: [
                                  17,
                                  18
                                ],
                                name: "x"
                              },
                              value: {
                                type: "Literal",
                                start: 20,
                                end: 22,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 20
                                  },
                                  end: {
                                    line: 1,
                                    column: 22
                                  }
                                },
                                range: [
                                  20,
                                  22
                                ],
                                value: 10,
                                raw: "10"
                              },
                              kind: "init"
                            }
                          ]
                        }
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 25,
                      end: 27,
                      loc: {
                        start: {
                          line: 1,
                          column: 25
                        },
                        end: {
                          line: 1,
                          column: 27
                        }
                      },
                      range: [
                        25,
                        27
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(({x} = {x: 10}) => {})": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          range: [
            0,
            23
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 1,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              1,
              22
            ],
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "AssignmentPattern",
                start: 2,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                range: [
                  2,
                  15
                ],
                left: {
                  type: "ObjectPattern",
                  start: 2,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 2
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  range: [
                    2,
                    5
                  ],
                  properties: [
                    {
                      type: "Property",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 3,
                        end: 4,
                        loc: {
                          start: {
                            line: 1,
                            column: 3
                          },
                          end: {
                            line: 1,
                            column: 4
                          }
                        },
                        range: [
                          3,
                          4
                        ],
                        name: "x"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 3,
                        end: 4,
                        loc: {
                          start: {
                            line: 1,
                            column: 3
                          },
                          end: {
                            line: 1,
                            column: 4
                          }
                        },
                        range: [
                          3,
                          4
                        ],
                        name: "x"
                      }
                    }
                  ]
                },
                right: {
                  type: "ObjectExpression",
                  start: 8,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    8,
                    15
                  ],
                  properties: [
                    {
                      type: "Property",
                      start: 9,
                      end: 14,
                      loc: {
                        start: {
                          line: 1,
                          column: 9
                        },
                        end: {
                          line: 1,
                          column: 14
                        }
                      },
                      range: [
                        9,
                        14
                      ],
                      method: false,
                      shorthand: false,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 9,
                        end: 10,
                        loc: {
                          start: {
                            line: 1,
                            column: 9
                          },
                          end: {
                            line: 1,
                            column: 10
                          }
                        },
                        range: [
                          9,
                          10
                        ],
                        name: "x"
                      },
                      value: {
                        type: "Literal",
                        start: 12,
                        end: 14,
                        loc: {
                          start: {
                            line: 1,
                            column: 12
                          },
                          end: {
                            line: 1,
                            column: 14
                          }
                        },
                        range: [
                          12,
                          14
                        ],
                        value: 10,
                        raw: "10"
                      },
                      kind: "init"
                    }
                  ]
                }
              }
            ],
            body: {
              type: "BlockStatement",
              start: 20,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                20,
                22
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = function(y = 1) {}": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              0,
              22
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "FunctionExpression",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                4,
                22
              ],
              id: null,
              generator: false,
              expression: false,
              params: [
                {
                  type: "AssignmentPattern",
                  start: 13,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    13,
                    18
                  ],
                  left: {
                    type: "Identifier",
                    start: 13,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      13,
                      14
                    ],
                    name: "y"
                  },
                  right: {
                    type: "Literal",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      17,
                      18
                    ],
                    value: 1,
                    raw: "1"
                  }
                }
              ],
              body: {
                type: "BlockStatement",
                start: 20,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                range: [
                  20,
                  22
                ],
                body: []
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function f(a = 1) {}": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      range: [
        0,
        20
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          range: [
            0,
            20
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "AssignmentPattern",
              start: 11,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                11,
                16
              ],
              left: {
                type: "Identifier",
                start: 11,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  11,
                  12
                ],
                name: "a"
              },
              right: {
                type: "Literal",
                start: 15,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  15,
                  16
                ],
                value: 1,
                raw: "1"
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 18,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 20
              }
            },
            range: [
              18,
              20
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "x = { f: function(a=1) {} }": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              0,
              27
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                4,
                27
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  range: [
                    6,
                    25
                  ],
                  method: false,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    range: [
                      6,
                      7
                    ],
                    name: "f"
                  },
                  value: {
                    type: "FunctionExpression",
                    start: 9,
                    end: 25,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 25
                      }
                    },
                    range: [
                      9,
                      25
                    ],
                    id: null,
                    generator: false,
                    expression: false,
                    params: [
                      {
                        type: "AssignmentPattern",
                        start: 18,
                        end: 21,
                        loc: {
                          start: {
                            line: 1,
                            column: 18
                          },
                          end: {
                            line: 1,
                            column: 21
                          }
                        },
                        range: [
                          18,
                          21
                        ],
                        left: {
                          type: "Identifier",
                          start: 18,
                          end: 19,
                          loc: {
                            start: {
                              line: 1,
                              column: 18
                            },
                            end: {
                              line: 1,
                              column: 19
                            }
                          },
                          range: [
                            18,
                            19
                          ],
                          name: "a"
                        },
                        right: {
                          type: "Literal",
                          start: 20,
                          end: 21,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 21
                            }
                          },
                          range: [
                            20,
                            21
                          ],
                          value: 1,
                          raw: "1"
                        }
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 23,
                      end: 25,
                      loc: {
                        start: {
                          line: 1,
                          column: 23
                        },
                        end: {
                          line: 1,
                          column: 25
                        }
                      },
                      range: [
                        23,
                        25
                      ],
                      body: []
                    }
                  },
                  kind: "init"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { f(a=1) {} }": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                4,
                17
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    6,
                    15
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    range: [
                      6,
                      7
                    ],
                    name: "f"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 7,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      7,
                      15
                    ],
                    id: null,
                    generator: false,
                    expression: false,
                    params: [
                      {
                        type: "AssignmentPattern",
                        start: 8,
                        end: 11,
                        loc: {
                          start: {
                            line: 1,
                            column: 8
                          },
                          end: {
                            line: 1,
                            column: 11
                          }
                        },
                        range: [
                          8,
                          11
                        ],
                        left: {
                          type: "Identifier",
                          start: 8,
                          end: 9,
                          loc: {
                            start: {
                              line: 1,
                              column: 8
                            },
                            end: {
                              line: 1,
                              column: 9
                            }
                          },
                          range: [
                            8,
                            9
                          ],
                          name: "a"
                        },
                        right: {
                          type: "Literal",
                          start: 10,
                          end: 11,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 11
                            }
                          },
                          range: [
                            10,
                            11
                          ],
                          value: 1,
                          raw: "1"
                        }
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 13,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 13
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        13,
                        15
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function f(a, ...b) {}": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "Identifier",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                11,
                12
              ],
              name: "a"
            },
            {
              type: "RestElement",
              start: 14,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                14,
                18
              ],
              argument: {
                type: "Identifier",
                start: 17,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  17,
                  18
                ],
                name: "b"
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 20,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              20,
              22
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function x([ a, b ]){}": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "x"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "ArrayPattern",
              start: 11,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              range: [
                11,
                19
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  range: [
                    13,
                    14
                  ],
                  name: "a"
                },
                {
                  type: "Identifier",
                  start: 16,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    16,
                    17
                  ],
                  name: "b"
                }
              ]
            }
          ],
          body: {
            type: "BlockStatement",
            start: 20,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              20,
              22
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function x({ a, b }){}": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "x"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "ObjectPattern",
              start: 11,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              range: [
                11,
                19
              ],
              properties: [
                {
                  type: "Property",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  range: [
                    13,
                    14
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 13,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      13,
                      14
                    ],
                    name: "a"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 13,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      13,
                      14
                    ],
                    name: "a"
                  }
                },
                {
                  type: "Property",
                  start: 16,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    16,
                    17
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 16,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      16,
                      17
                    ],
                    name: "b"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 16,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      16,
                      17
                    ],
                    name: "b"
                  }
                }
              ]
            }
          ],
          body: {
            type: "BlockStatement",
            start: 20,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              20,
              22
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function x(...[ a, b ]){}": {
      type: "Error",
      message: "Unexpected token (1:14)"
    },
    "function x({ a: { w, x }, b: [y, z] }, ...[a, b, c]){}": {
      type: "Error",
      message: "Unexpected token (1:42)"
    },
    "(function x([ a, b ]){})": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              1,
              23
            ],
            id: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              range: [
                10,
                11
              ],
              name: "x"
            },
            generator: false,
            expression: false,
            params: [
              {
                type: "ArrayPattern",
                start: 12,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  12,
                  20
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 14,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      14,
                      15
                    ],
                    name: "a"
                  },
                  {
                    type: "Identifier",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      17,
                      18
                    ],
                    name: "b"
                  }
                ]
              }
            ],
            body: {
              type: "BlockStatement",
              start: 21,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                21,
                23
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(function x({ a, b }){})": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              1,
              23
            ],
            id: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              range: [
                10,
                11
              ],
              name: "x"
            },
            generator: false,
            expression: false,
            params: [
              {
                type: "ObjectPattern",
                start: 12,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  12,
                  20
                ],
                properties: [
                  {
                    type: "Property",
                    start: 14,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      14,
                      15
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 14,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 14
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        14,
                        15
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 14,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 14
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        14,
                        15
                      ],
                      name: "a"
                    }
                  },
                  {
                    type: "Property",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      17,
                      18
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 17,
                      end: 18,
                      loc: {
                        start: {
                          line: 1,
                          column: 17
                        },
                        end: {
                          line: 1,
                          column: 18
                        }
                      },
                      range: [
                        17,
                        18
                      ],
                      name: "b"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 17,
                      end: 18,
                      loc: {
                        start: {
                          line: 1,
                          column: 17
                        },
                        end: {
                          line: 1,
                          column: 18
                        }
                      },
                      range: [
                        17,
                        18
                      ],
                      name: "b"
                    }
                  }
                ]
              }
            ],
            body: {
              type: "BlockStatement",
              start: 21,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                21,
                23
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(function x(...[ a, b ]){})": {
      type: "Error",
      message: "Unexpected token (1:15)"
    },
    "var a = { set foo(...v) {} };": {
      type: "Error",
      message: "Setter cannot use rest params (1:18)"
    },
    "class a { set foo(...v) {} };": {
      type: "Error",
      message: "Setter cannot use rest params (1:18)"
    },
    "(function x({ a: { w, x }, b: [y, z] }, ...[a, b, c]){})": {
      type: "Error",
      message: "Unexpected token (1:43)"
    },
    "({ x([ a, b ]){} })": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          range: [
            0,
            19
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              1,
              18
            ],
            properties: [
              {
                type: "Property",
                start: 3,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  3,
                  16
                ],
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 4,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    4,
                    16
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "ArrayPattern",
                      start: 5,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        5,
                        13
                      ],
                      elements: [
                        {
                          type: "Identifier",
                          start: 7,
                          end: 8,
                          loc: {
                            start: {
                              line: 1,
                              column: 7
                            },
                            end: {
                              line: 1,
                              column: 8
                            }
                          },
                          range: [
                            7,
                            8
                          ],
                          name: "a"
                        },
                        {
                          type: "Identifier",
                          start: 10,
                          end: 11,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 11
                            }
                          },
                          range: [
                            10,
                            11
                          ],
                          name: "b"
                        }
                      ]
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 14,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    range: [
                      14,
                      16
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ x(...[ a, b ]){} })": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 21
              }
            },
            range: [
              1,
              21
            ],
            properties: [
              {
                type: "Property",
                start: 3,
                end: 19,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 19
                  }
                },
                range: [
                  3,
                  19
                ],
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 4,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    4,
                    19
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "RestElement",
                      start: 5,
                      end: 16,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 16
                        }
                      },
                      range: [
                        5,
                        16
                      ],
                      argument: {
                        type: "ArrayPattern",
                        start: 8,
                        end: 16,
                        loc: {
                          start: {
                            line: 1,
                            column: 8
                          },
                          end: {
                            line: 1,
                            column: 16
                          }
                        },
                        range: [
                          8,
                          16
                        ],
                        elements: [
                          {
                            type: "Identifier",
                            start: 10,
                            end: 11,
                            loc: {
                              start: {
                                line: 1,
                                column: 10
                              },
                              end: {
                                line: 1,
                                column: 11
                              }
                            },
                            range: [
                              10,
                              11
                            ],
                            name: "a"
                          },
                          {
                            type: "Identifier",
                            start: 13,
                            end: 14,
                            loc: {
                              start: {
                                line: 1,
                                column: 13
                              },
                              end: {
                                line: 1,
                                column: 14
                              }
                            },
                            range: [
                              13,
                              14
                            ],
                            name: "b"
                          }
                        ]
                      }
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 17,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    range: [
                      17,
                      19
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ x({ a: { w, x }, b: [y, z] }, ...[a, b, c]){} })": {
      type: "Program",
      start: 0,
      end: 51,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 51
        }
      },
      range: [
        0,
        51
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 51,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 51
            }
          },
          range: [
            0,
            51
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 50,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 50
              }
            },
            range: [
              1,
              50
            ],
            properties: [
              {
                type: "Property",
                start: 3,
                end: 48,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 48
                  }
                },
                range: [
                  3,
                  48
                ],
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 4,
                  end: 48,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 48
                    }
                  },
                  range: [
                    4,
                    48
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "ObjectPattern",
                      start: 5,
                      end: 31,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 31
                        }
                      },
                      range: [
                        5,
                        31
                      ],
                      properties: [
                        {
                          type: "Property",
                          start: 7,
                          end: 18,
                          loc: {
                            start: {
                              line: 1,
                              column: 7
                            },
                            end: {
                              line: 1,
                              column: 18
                            }
                          },
                          range: [
                            7,
                            18
                          ],
                          method: false,
                          shorthand: false,
                          computed: false,
                          key: {
                            type: "Identifier",
                            start: 7,
                            end: 8,
                            loc: {
                              start: {
                                line: 1,
                                column: 7
                              },
                              end: {
                                line: 1,
                                column: 8
                              }
                            },
                            range: [
                              7,
                              8
                            ],
                            name: "a"
                          },
                          value: {
                            type: "ObjectPattern",
                            start: 10,
                            end: 18,
                            loc: {
                              start: {
                                line: 1,
                                column: 10
                              },
                              end: {
                                line: 1,
                                column: 18
                              }
                            },
                            range: [
                              10,
                              18
                            ],
                            properties: [
                              {
                                type: "Property",
                                start: 12,
                                end: 13,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 12
                                  },
                                  end: {
                                    line: 1,
                                    column: 13
                                  }
                                },
                                range: [
                                  12,
                                  13
                                ],
                                method: false,
                                shorthand: true,
                                computed: false,
                                key: {
                                  type: "Identifier",
                                  start: 12,
                                  end: 13,
                                  loc: {
                                    start: {
                                      line: 1,
                                      column: 12
                                    },
                                    end: {
                                      line: 1,
                                      column: 13
                                    }
                                  },
                                  range: [
                                    12,
                                    13
                                  ],
                                  name: "w"
                                },
                                kind: "init",
                                value: {
                                  type: "Identifier",
                                  start: 12,
                                  end: 13,
                                  loc: {
                                    start: {
                                      line: 1,
                                      column: 12
                                    },
                                    end: {
                                      line: 1,
                                      column: 13
                                    }
                                  },
                                  range: [
                                    12,
                                    13
                                  ],
                                  name: "w"
                                }
                              },
                              {
                                type: "Property",
                                start: 15,
                                end: 16,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 15
                                  },
                                  end: {
                                    line: 1,
                                    column: 16
                                  }
                                },
                                range: [
                                  15,
                                  16
                                ],
                                method: false,
                                shorthand: true,
                                computed: false,
                                key: {
                                  type: "Identifier",
                                  start: 15,
                                  end: 16,
                                  loc: {
                                    start: {
                                      line: 1,
                                      column: 15
                                    },
                                    end: {
                                      line: 1,
                                      column: 16
                                    }
                                  },
                                  range: [
                                    15,
                                    16
                                  ],
                                  name: "x"
                                },
                                kind: "init",
                                value: {
                                  type: "Identifier",
                                  start: 15,
                                  end: 16,
                                  loc: {
                                    start: {
                                      line: 1,
                                      column: 15
                                    },
                                    end: {
                                      line: 1,
                                      column: 16
                                    }
                                  },
                                  range: [
                                    15,
                                    16
                                  ],
                                  name: "x"
                                }
                              }
                            ]
                          },
                          kind: "init"
                        },
                        {
                          type: "Property",
                          start: 20,
                          end: 29,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 29
                            }
                          },
                          range: [
                            20,
                            29
                          ],
                          method: false,
                          shorthand: false,
                          computed: false,
                          key: {
                            type: "Identifier",
                            start: 20,
                            end: 21,
                            loc: {
                              start: {
                                line: 1,
                                column: 20
                              },
                              end: {
                                line: 1,
                                column: 21
                              }
                            },
                            range: [
                              20,
                              21
                            ],
                            name: "b"
                          },
                          value: {
                            type: "ArrayPattern",
                            start: 23,
                            end: 29,
                            loc: {
                              start: {
                                line: 1,
                                column: 23
                              },
                              end: {
                                line: 1,
                                column: 29
                              }
                            },
                            range: [
                              23,
                              29
                            ],
                            elements: [
                              {
                                type: "Identifier",
                                start: 24,
                                end: 25,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 24
                                  },
                                  end: {
                                    line: 1,
                                    column: 25
                                  }
                                },
                                range: [
                                  24,
                                  25
                                ],
                                name: "y"
                              },
                              {
                                type: "Identifier",
                                start: 27,
                                end: 28,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 27
                                  },
                                  end: {
                                    line: 1,
                                    column: 28
                                  }
                                },
                                range: [
                                  27,
                                  28
                                ],
                                name: "z"
                              }
                            ]
                          },
                          kind: "init"
                        }
                      ]
                    },
                    {
                      type: "RestElement",
                      start: 33,
                      end: 45,
                      loc: {
                        start: {
                          line: 1,
                          column: 33
                        },
                        end: {
                          line: 1,
                          column: 45
                        }
                      },
                      range: [
                        33,
                        45
                      ],
                      argument: {
                        type: "ArrayPattern",
                        start: 36,
                        end: 45,
                        loc: {
                          start: {
                            line: 1,
                            column: 36
                          },
                          end: {
                            line: 1,
                            column: 45
                          }
                        },
                        range: [
                          36,
                          45
                        ],
                        elements: [
                          {
                            type: "Identifier",
                            start: 37,
                            end: 38,
                            loc: {
                              start: {
                                line: 1,
                                column: 37
                              },
                              end: {
                                line: 1,
                                column: 38
                              }
                            },
                            range: [
                              37,
                              38
                            ],
                            name: "a"
                          },
                          {
                            type: "Identifier",
                            start: 40,
                            end: 41,
                            loc: {
                              start: {
                                line: 1,
                                column: 40
                              },
                              end: {
                                line: 1,
                                column: 41
                              }
                            },
                            range: [
                              40,
                              41
                            ],
                            name: "b"
                          },
                          {
                            type: "Identifier",
                            start: 43,
                            end: 44,
                            loc: {
                              start: {
                                line: 1,
                                column: 43
                              },
                              end: {
                                line: 1,
                                column: 44
                              }
                            },
                            range: [
                              43,
                              44
                            ],
                            name: "c"
                          }
                        ]
                      }
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 46,
                    end: 48,
                    loc: {
                      start: {
                        line: 1,
                        column: 46
                      },
                      end: {
                        line: 1,
                        column: 48
                      }
                    },
                    range: [
                      46,
                      48
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(...a) => {}": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "RestElement",
                start: 1,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  1,
                  5
                ],
                argument: {
                  type: "Identifier",
                  start: 4,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  range: [
                    4,
                    5
                  ],
                  name: "a"
                }
              }
            ],
            body: {
              type: "BlockStatement",
              start: 10,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                10,
                12
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a, ...b) => {}": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          range: [
            0,
            15
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              0,
              15
            ],
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "a"
              },
              {
                type: "RestElement",
                start: 4,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                range: [
                  4,
                  8
                ],
                argument: {
                  type: "Identifier",
                  start: 7,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  range: [
                    7,
                    8
                  ],
                  name: "b"
                }
              }
            ],
            body: {
              type: "BlockStatement",
              start: 13,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              range: [
                13,
                15
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ a }) => {}": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "ObjectPattern",
                start: 1,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                range: [
                  1,
                  6
                ],
                properties: [
                  {
                    type: "Property",
                    start: 3,
                    end: 4,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 4
                      }
                    },
                    range: [
                      3,
                      4
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    }
                  }
                ]
              }
            ],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              range: [
                11,
                13
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ a }, ...b) => {}": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          range: [
            0,
            19
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 19
              }
            },
            range: [
              0,
              19
            ],
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "ObjectPattern",
                start: 1,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                range: [
                  1,
                  6
                ],
                properties: [
                  {
                    type: "Property",
                    start: 3,
                    end: 4,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 4
                      }
                    },
                    range: [
                      3,
                      4
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    }
                  }
                ]
              },
              {
                type: "RestElement",
                start: 8,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  8,
                  12
                ],
                argument: {
                  type: "Identifier",
                  start: 11,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    11,
                    12
                  ],
                  name: "b"
                }
              }
            ],
            body: {
              type: "BlockStatement",
              start: 17,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              range: [
                17,
                19
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(...[a, b]) => {}": {
      type: "Error",
      message: "Unexpected token (1:4)"
    },
    "(a, ...[b]) => {}": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "({ a: [a, b] }, ...c) => {}": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              0,
              27
            ],
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "ObjectPattern",
                start: 1,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  1,
                  14
                ],
                properties: [
                  {
                    type: "Property",
                    start: 3,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      3,
                      12
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    },
                    value: {
                      type: "ArrayPattern",
                      start: 6,
                      end: 12,
                      loc: {
                        start: {
                          line: 1,
                          column: 6
                        },
                        end: {
                          line: 1,
                          column: 12
                        }
                      },
                      range: [
                        6,
                        12
                      ],
                      elements: [
                        {
                          type: "Identifier",
                          start: 7,
                          end: 8,
                          loc: {
                            start: {
                              line: 1,
                              column: 7
                            },
                            end: {
                              line: 1,
                              column: 8
                            }
                          },
                          range: [
                            7,
                            8
                          ],
                          name: "a"
                        },
                        {
                          type: "Identifier",
                          start: 10,
                          end: 11,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 11
                            }
                          },
                          range: [
                            10,
                            11
                          ],
                          name: "b"
                        }
                      ]
                    },
                    kind: "init"
                  }
                ]
              },
              {
                type: "RestElement",
                start: 16,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  16,
                  20
                ],
                argument: {
                  type: "Identifier",
                  start: 19,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    19,
                    20
                  ],
                  name: "c"
                }
              }
            ],
            body: {
              type: "BlockStatement",
              start: 25,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                25,
                27
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ a: b, c }, [d, e], ...f) => {}": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 33
              }
            },
            range: [
              0,
              33
            ],
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "ObjectPattern",
                start: 1,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  1,
                  12
                ],
                properties: [
                  {
                    type: "Property",
                    start: 3,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    range: [
                      3,
                      7
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    },
                    value: {
                      type: "Identifier",
                      start: 6,
                      end: 7,
                      loc: {
                        start: {
                          line: 1,
                          column: 6
                        },
                        end: {
                          line: 1,
                          column: 7
                        }
                      },
                      range: [
                        6,
                        7
                      ],
                      name: "b"
                    },
                    kind: "init"
                  },
                  {
                    type: "Property",
                    start: 9,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      9,
                      10
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 9,
                      end: 10,
                      loc: {
                        start: {
                          line: 1,
                          column: 9
                        },
                        end: {
                          line: 1,
                          column: 10
                        }
                      },
                      range: [
                        9,
                        10
                      ],
                      name: "c"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 9,
                      end: 10,
                      loc: {
                        start: {
                          line: 1,
                          column: 9
                        },
                        end: {
                          line: 1,
                          column: 10
                        }
                      },
                      range: [
                        9,
                        10
                      ],
                      name: "c"
                    }
                  }
                ]
              },
              {
                type: "ArrayPattern",
                start: 14,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 14
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  14,
                  20
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 15,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    range: [
                      15,
                      16
                    ],
                    name: "d"
                  },
                  {
                    type: "Identifier",
                    start: 18,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    range: [
                      18,
                      19
                    ],
                    name: "e"
                  }
                ]
              },
              {
                type: "RestElement",
                start: 22,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 22
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                range: [
                  22,
                  26
                ],
                argument: {
                  type: "Identifier",
                  start: 25,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 25
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    25,
                    26
                  ],
                  name: "f"
                }
              }
            ],
            body: {
              type: "BlockStatement",
              start: 31,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 31
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              range: [
                31,
                33
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[...a] = b": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      range: [
        0,
        10
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          range: [
            0,
            10
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              0,
              10
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              range: [
                0,
                6
              ],
              elements: [
                {
                  type: "RestElement",
                  start: 1,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  range: [
                    1,
                    5
                  ],
                  argument: {
                    type: "Identifier",
                    start: 4,
                    end: 5,
                    loc: {
                      start: {
                        line: 1,
                        column: 4
                      },
                      end: {
                        line: 1,
                        column: 5
                      }
                    },
                    range: [
                      4,
                      5
                    ],
                    name: "a"
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 9,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              range: [
                9,
                10
              ],
              name: "b"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[a, ...b] = c": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              range: [
                0,
                9
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  range: [
                    1,
                    2
                  ],
                  name: "a"
                },
                {
                  type: "RestElement",
                  start: 4,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  range: [
                    4,
                    8
                  ],
                  argument: {
                    type: "Identifier",
                    start: 7,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      7,
                      8
                    ],
                    name: "b"
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 12,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              range: [
                12,
                13
              ],
              name: "c"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[{ a, b }, ...c] = d": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      range: [
        0,
        20
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          range: [
            0,
            20
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            range: [
              0,
              20
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                0,
                16
              ],
              elements: [
                {
                  type: "ObjectPattern",
                  start: 1,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  range: [
                    1,
                    9
                  ],
                  properties: [
                    {
                      type: "Property",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 3,
                        end: 4,
                        loc: {
                          start: {
                            line: 1,
                            column: 3
                          },
                          end: {
                            line: 1,
                            column: 4
                          }
                        },
                        range: [
                          3,
                          4
                        ],
                        name: "a"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 3,
                        end: 4,
                        loc: {
                          start: {
                            line: 1,
                            column: 3
                          },
                          end: {
                            line: 1,
                            column: 4
                          }
                        },
                        range: [
                          3,
                          4
                        ],
                        name: "a"
                      }
                    },
                    {
                      type: "Property",
                      start: 6,
                      end: 7,
                      loc: {
                        start: {
                          line: 1,
                          column: 6
                        },
                        end: {
                          line: 1,
                          column: 7
                        }
                      },
                      range: [
                        6,
                        7
                      ],
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 6,
                        end: 7,
                        loc: {
                          start: {
                            line: 1,
                            column: 6
                          },
                          end: {
                            line: 1,
                            column: 7
                          }
                        },
                        range: [
                          6,
                          7
                        ],
                        name: "b"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 6,
                        end: 7,
                        loc: {
                          start: {
                            line: 1,
                            column: 6
                          },
                          end: {
                            line: 1,
                            column: 7
                          }
                        },
                        range: [
                          6,
                          7
                        ],
                        name: "b"
                      }
                    }
                  ]
                },
                {
                  type: "RestElement",
                  start: 11,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    11,
                    15
                  ],
                  argument: {
                    type: "Identifier",
                    start: 14,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      14,
                      15
                    ],
                    name: "c"
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 19,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                19,
                20
              ],
              name: "d"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[a, ...[b, c]] = d": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              0,
              18
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                0,
                14
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  range: [
                    1,
                    2
                  ],
                  name: "a"
                },
                {
                  type: "RestElement",
                  start: 4,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    4,
                    13
                  ],
                  argument: {
                    type: "ArrayPattern",
                    start: 7,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    range: [
                      7,
                      13
                    ],
                    elements: [
                      {
                        type: "Identifier",
                        start: 8,
                        end: 9,
                        loc: {
                          start: {
                            line: 1,
                            column: 8
                          },
                          end: {
                            line: 1,
                            column: 9
                          }
                        },
                        range: [
                          8,
                          9
                        ],
                        name: "b"
                      },
                      {
                        type: "Identifier",
                        start: 11,
                        end: 12,
                        loc: {
                          start: {
                            line: 1,
                            column: 11
                          },
                          end: {
                            line: 1,
                            column: 12
                          }
                        },
                        range: [
                          11,
                          12
                        ],
                        name: "c"
                      }
                    ]
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 17,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                17,
                18
              ],
              name: "d"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "var [...a] = b": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                4,
                14
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  4,
                  10
                ],
                elements: [
                  {
                    type: "RestElement",
                    start: 5,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      5,
                      9
                    ],
                    argument: {
                      type: "Identifier",
                      start: 8,
                      end: 9,
                      loc: {
                        start: {
                          line: 1,
                          column: 8
                        },
                        end: {
                          line: 1,
                          column: 9
                        }
                      },
                      range: [
                        8,
                        9
                      ],
                      name: "a"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 13,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  13,
                  14
                ],
                name: "b"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "var [a, ...b] = c": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                4,
                17
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                range: [
                  4,
                  13
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    name: "a"
                  },
                  {
                    type: "RestElement",
                    start: 8,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      8,
                      12
                    ],
                    argument: {
                      type: "Identifier",
                      start: 11,
                      end: 12,
                      loc: {
                        start: {
                          line: 1,
                          column: 11
                        },
                        end: {
                          line: 1,
                          column: 12
                        }
                      },
                      range: [
                        11,
                        12
                      ],
                      name: "b"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 16,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                range: [
                  16,
                  17
                ],
                name: "c"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "var [{ a, b }, ...c] = d": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              range: [
                4,
                24
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  4,
                  20
                ],
                elements: [
                  {
                    type: "ObjectPattern",
                    start: 5,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    range: [
                      5,
                      13
                    ],
                    properties: [
                      {
                        type: "Property",
                        start: 7,
                        end: 8,
                        loc: {
                          start: {
                            line: 1,
                            column: 7
                          },
                          end: {
                            line: 1,
                            column: 8
                          }
                        },
                        range: [
                          7,
                          8
                        ],
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 7,
                          end: 8,
                          loc: {
                            start: {
                              line: 1,
                              column: 7
                            },
                            end: {
                              line: 1,
                              column: 8
                            }
                          },
                          range: [
                            7,
                            8
                          ],
                          name: "a"
                        },
                        kind: "init",
                        value: {
                          type: "Identifier",
                          start: 7,
                          end: 8,
                          loc: {
                            start: {
                              line: 1,
                              column: 7
                            },
                            end: {
                              line: 1,
                              column: 8
                            }
                          },
                          range: [
                            7,
                            8
                          ],
                          name: "a"
                        }
                      },
                      {
                        type: "Property",
                        start: 10,
                        end: 11,
                        loc: {
                          start: {
                            line: 1,
                            column: 10
                          },
                          end: {
                            line: 1,
                            column: 11
                          }
                        },
                        range: [
                          10,
                          11
                        ],
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 10,
                          end: 11,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 11
                            }
                          },
                          range: [
                            10,
                            11
                          ],
                          name: "b"
                        },
                        kind: "init",
                        value: {
                          type: "Identifier",
                          start: 10,
                          end: 11,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 11
                            }
                          },
                          range: [
                            10,
                            11
                          ],
                          name: "b"
                        }
                      }
                    ]
                  },
                  {
                    type: "RestElement",
                    start: 15,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    range: [
                      15,
                      19
                    ],
                    argument: {
                      type: "Identifier",
                      start: 18,
                      end: 19,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 19
                        }
                      },
                      range: [
                        18,
                        19
                      ],
                      name: "c"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 23,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                range: [
                  23,
                  24
                ],
                name: "d"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "var [a, ...[b, c]] = d": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                4,
                22
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  4,
                  18
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    name: "a"
                  },
                  {
                    type: "RestElement",
                    start: 8,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      8,
                      17
                    ],
                    argument: {
                      type: "ArrayPattern",
                      start: 11,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 11
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      range: [
                        11,
                        17
                      ],
                      elements: [
                        {
                          type: "Identifier",
                          start: 12,
                          end: 13,
                          loc: {
                            start: {
                              line: 1,
                              column: 12
                            },
                            end: {
                              line: 1,
                              column: 13
                            }
                          },
                          range: [
                            12,
                            13
                          ],
                          name: "b"
                        },
                        {
                          type: "Identifier",
                          start: 15,
                          end: 16,
                          loc: {
                            start: {
                              line: 1,
                              column: 15
                            },
                            end: {
                              line: 1,
                              column: 16
                            }
                          },
                          range: [
                            15,
                            16
                          ],
                          name: "c"
                        }
                      ]
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 21,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 21
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                range: [
                  21,
                  22
                ],
                name: "d"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "func(...a)": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      range: [
        0,
        10
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          range: [
            0,
            10
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              0,
              10
            ],
            callee: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              range: [
                0,
                4
              ],
              name: "func"
            },
            arguments: [
              {
                type: "SpreadElement",
                start: 5,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  5,
                  9
                ],
                argument: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  range: [
                    8,
                    9
                  ],
                  name: "a"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "func(a, ...b)": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            callee: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              range: [
                0,
                4
              ],
              name: "func"
            },
            arguments: [
              {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                range: [
                  5,
                  6
                ],
                name: "a"
              },
              {
                type: "SpreadElement",
                start: 8,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  8,
                  12
                ],
                argument: {
                  type: "Identifier",
                  start: 11,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    11,
                    12
                  ],
                  name: "b"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "func(...a, b)": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            callee: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              range: [
                0,
                4
              ],
              name: "func"
            },
            arguments: [
              {
                type: "SpreadElement",
                start: 5,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  5,
                  9
                ],
                argument: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  range: [
                    8,
                    9
                  ],
                  name: "a"
                }
              },
              {
                type: "Identifier",
                start: 11,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  11,
                  12
                ],
                name: "b"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "/[a-z]/u": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            value: {},
            raw: "/[a-z]/u",
            regex: {
              pattern: "[a-z]",
              flags: "u"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "/[\\uD834\\uDF06-\\uD834\\uDF08a-z]/u": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 33
              }
            },
            value: {},
            raw: "/[\\uD834\\uDF06-\\uD834\\uDF08a-z]/u",
            regex: {
              pattern: "[\\uD834\\uDF06-\\uD834\\uDF08a-z]",
              flags: "u"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "do {} while (false) foo();": {
      type: "Program",
      start: 0,
      end: 26,
      body: [
        {
          type: "DoWhileStatement",
          start: 0,
          end: 19,
          body: {
            type: "BlockStatement",
            start: 3,
            end: 5,
            body: []
          },
          test: {
            type: "Literal",
            start: 13,
            end: 18,
            value: false,
            raw: "false"
          }
        },
        {
          type: "ExpressionStatement",
          start: 20,
          end: 26,
          expression: {
            type: "CallExpression",
            start: 20,
            end: 25,
            callee: {
              type: "Identifier",
              start: 20,
              end: 23,
              name: "foo"
            },
            arguments: []
          }
        }
      ],
      sourceType: "script"
    },
    "0o": {
      type: "Error",
      message: "Expected number in radix 8 (1:2)"
    },
    "0o1a": {
      type: "Error",
      message: "Identifier directly after number (1:3)"
    },
    "0o9": {
      type: "Error",
      message: "Expected number in radix 8 (1:2)"
    },
    "0o18": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "0O": {
      type: "Error",
      message: "Expected number in radix 8 (1:2)"
    },
    "0O1a": {
      type: "Error",
      message: "Identifier directly after number (1:3)"
    },
    "0O9": {
      type: "Error",
      message: "Expected number in radix 8 (1:2)"
    },
    "0O18": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "0b": {
      type: "Error",
      message: "Expected number in radix 2 (1:2)"
    },
    "0b1a": {
      type: "Error",
      message: "Identifier directly after number (1:3)"
    },
    "0b9": {
      type: "Error",
      message: "Expected number in radix 2 (1:2)"
    },
    "0b18": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "0b12": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "0B": {
      type: "Error",
      message: "Expected number in radix 2 (1:2)"
    },
    "0B1a": {
      type: "Error",
      message: "Identifier directly after number (1:3)"
    },
    "0B9": {
      type: "Error",
      message: "Expected number in radix 2 (1:2)"
    },
    "0B18": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "0B12": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "\"\\u{110000}\"": {
      type: "Error",
      message: "Code point out of bounds (1:4)"
    },
    "\"\\u{}\"": {
      type: "Error",
      message: "Bad character escape sequence (1:4)"
    },
    "\"\\u{FFFF\"": {
      type: "Error",
      message: "Bad character escape sequence (1:4)"
    },
    "\"\\u{FFZ}\"": {
      type: "Error",
      message: "Bad character escape sequence (1:4)"
    },
    "[v] += ary": {
      type: "Error",
      message: "Assigning to rvalue (1:0)"
    },
    "[2] = 42": {
      type: "Error",
      message: "Assigning to rvalue (1:1)"
    },
    "({ obj:20 }) = 42": {
      type: "Error",
      message: "Parenthesized pattern (1:0)"
    },
    "( { get x() {} } = 0)": {
      type: "Error",
      message: "Object pattern can't contain getter or setter (1:8)"
    },
    "x \n is y": {
      type: "Error",
      message: "Unexpected token (2:4)"
    },
    "x \n isnt y": {
      type: "Error",
      message: "Unexpected token (2:6)"
    },
    "function default() {}": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "function hello() {'use strict'; ({ i: 10, s(eval) { } }); }": {
      type: "Error",
      message: "Binding eval in strict mode (1:44)"
    },
    "function a() { \"use strict\"; ({ b(t, t) { } }); }": {
      type: "Error",
      message: "Argument name clash (1:37)"
    },
    "var super": {
      type: "Error",
      message: "Unexpected token (1:4)"
    },
    "var default": {
      type: "Error",
      message: "Unexpected token (1:4)"
    },
    "let default": {
      type: "Error",
      message: "Unexpected token (1:4)"
    },
    "const default": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "\"use strict\"; ({ v: eval } = obj)": {
      type: "Error",
      message: "Assigning to eval in strict mode (1:20)"
    },
    "\"use strict\"; ({ v: arguments } = obj)": {
      type: "Error",
      message: "Assigning to arguments in strict mode (1:20)"
    },
    "for (let x = 42 in list) process(x);": {
      type: "Error",
      message: "Unexpected token (1:16)"
    },
    "for (let x = 42 of list) process(x);": {
      type: "Error",
      message: "Unexpected token (1:16)"
    },
    "((a)) => 42": {
      type: "Error",
      message: "Parenthesized pattern (1:1)"
    },
    "(a, (b)) => 42": {
      type: "Error",
      message: "Parenthesized pattern (1:4)"
    },
    "\"use strict\"; (eval = 10) => 42": {
      type: "Error",
      message: "Assigning to eval in strict mode (1:15)"
    },
    "\"use strict\"; eval => 42": {
      type: "Error",
      message: "Binding eval in strict mode (1:14)"
    },
    "\"use strict\"; arguments => 42": {
      type: "Error",
      message: "Binding arguments in strict mode (1:14)"
    },
    "\"use strict\"; (eval, a) => 42": {
      type: "Error",
      message: "Binding eval in strict mode (1:15)"
    },
    "\"use strict\"; (arguments, a) => 42": {
      type: "Error",
      message: "Binding arguments in strict mode (1:15)"
    },
    "\"use strict\"; (eval, a = 10) => 42": {
      type: "Error",
      message: "Binding eval in strict mode (1:15)"
    },
    "(a, a) => 42": {
      type: "Error",
      message: "Argument name clash (1:4)"
    },
    "function foo(a, a = 2) {}": {
      type: "Error",
      message: "Argument name clash (1:16)"
    },
    "\"use strict\"; (a, a) => 42": {
      type: "Error",
      message: "Argument name clash (1:18)"
    },
    "\"use strict\"; (a) => 00": {
      type: "Error",
      message: "Invalid number (1:21)"
    },
    "() <= 42": {
      type: "Error",
      message: "Unexpected token (1:1)"
    },
    "(10) => 00": {
      type: "Error",
      message: "Assigning to rvalue (1:1)"
    },
    "(10, 20) => 00": {
      type: "Error",
      message: "Assigning to rvalue (1:1)"
    },
    "yield v": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "yield 10": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "void { [1, 2]: 3 };": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "let [this] = [10]": {
      type: "Error",
      message: "Unexpected token (1:5)"
    },
    "let {this} = x": {
      type: "Error",
      message: "'this' can not be used as shorthand property (1:5)"
    },
    "let [function] = [10]": {
      type: "Error",
      message: "Unexpected token (1:5)"
    },
    "let [function] = x": {
      type: "Error",
      message: "Unexpected token (1:5)"
    },
    "([function] = [10])": {
      type: "Error",
      message: "Unexpected token (1:10)"
    },
    "([this] = [10])": {
      type: "Error",
      message: "Assigning to rvalue (1:2)"
    },
    "({this} = x)": {
      type: "Error",
      message: "'this' can not be used as shorthand property (1:2)"
    },
    "var x = {this}": {
      type: "Error",
      message: "'this' can not be used as shorthand property (1:9)"
    },
    "yield* 10": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      range: [
        0,
        9
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          range: [
            0,
            9
          ],
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            range: [
              0,
              9
            ],
            left: {
              type: "Identifier",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              range: [
                0,
                5
              ],
              name: "yield"
            },
            operator: "*",
            right: {
              type: "Literal",
              start: 7,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              range: [
                7,
                9
              ],
              value: 10,
              raw: "10"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "e => yield* 10": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            range: [
              0,
              14
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "e"
              }
            ],
            body: {
              type: "BinaryExpression",
              start: 5,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                5,
                14
              ],
              left: {
                type: "Identifier",
                start: 5,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  5,
                  10
                ],
                name: "yield"
              },
              operator: "*",
              right: {
                type: "Literal",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  12,
                  14
                ],
                value: 10,
                raw: "10"
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(function () { yield 10 })": {
      type: "Error",
      message: "Unexpected token (1:21)"
    },
    "(function () { yield* 10 })": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 26
              }
            },
            range: [
              1,
              26
            ],
            id: null,
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 13,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              range: [
                13,
                26
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 15,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 15
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    15,
                    24
                  ],
                  expression: {
                    type: "BinaryExpression",
                    start: 15,
                    end: 24,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 24
                      }
                    },
                    range: [
                      15,
                      24
                    ],
                    left: {
                      type: "Identifier",
                      start: 15,
                      end: 20,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 20
                        }
                      },
                      range: [
                        15,
                        20
                      ],
                      name: "yield"
                    },
                    operator: "*",
                    right: {
                      type: "Literal",
                      start: 22,
                      end: 24,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 24
                        }
                      },
                      range: [
                        22,
                        24
                      ],
                      value: 10,
                      raw: "10"
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "let + 1": {
      type: "Program",
      start: 0,
      end: 7,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            left: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "let"
            },
            operator: "+",
            right: {
              type: "Literal",
              start: 6,
              end: 7,
              value: 1,
              raw: "1"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "var let = 1": {
      type: "Program",
      start: 0,
      end: 11,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 11,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "let"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 11,
                value: 1,
                raw: "1"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "'use strict'; let + 1": {
      type: "Error",
      message: "The keyword 'let' is reserved (1:14)"
    },
    "var yield = 2": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 13,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 13,
              id: {
                type: "Identifier",
                start: 4,
                end: 9,
                name: "yield"
              },
              init: {
                type: "Literal",
                start: 12,
                end: 13,
                value: 2,
                raw: "2"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "(function() { \"use strict\"; f(yield v) })": {
      type: "Error",
      message: "The keyword 'yield' is reserved (1:30)"
    },
    "var obj = { *test** }": {
      type: "Error",
      message: "Unexpected token (1:17)"
    },
    "class A extends yield B { }": {
      type: "Error",
      message: "Unexpected token (1:22)"
    },
    "class default": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "`test": {
      type: "Error",
      message: "Unterminated template (1:1)"
    },
    "switch `test`": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "`hello ${10 `test`": {
      type: "Error",
      message: "Unexpected token (1:18)"
    },
    "`hello ${10;test`": {
      type: "Error",
      message: "Unexpected token (1:11)"
    },
    "function a() 1 // expression closure is not supported": {
      type: "Error",
      message: "Unexpected token (1:13)"
    },
    "({ \"chance\" }) = obj": {
      type: "Error",
      message: "Unexpected token (1:12)"
    },
    "({ 42 }) = obj": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "function f(a, ...b, c)": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:18)"
    },
    "function f(a, ...b = 0)": {
      type: "Error",
      message: "Unexpected token (1:19)"
    },
    "function x(...{ a }){}": {
      type: "Error",
      message: "Unexpected token (1:14)"
    },
    "\"use strict\"; function x(a, { a }){}": {
      type: "Error",
      message: "Argument name clash (1:30)"
    },
    "\"use strict\"; function x({ b: { a } }, [{ b: { a } }]){}": {
      type: "Error",
      message: "Argument name clash (1:47)"
    },
    "\"use strict\"; function x(a, ...[a]){}": {
      type: "Error",
      message: "Unexpected token (1:31)"
    },
    "(...a, b) => {}": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:5)"
    },
    "([ 5 ]) => {}": {
      type: "Error",
      message: "Assigning to rvalue (1:3)"
    },
    "({ 5 }) => {}": {
      type: "Error",
      message: "Unexpected token (1:5)"
    },
    "(...[ 5 ]) => {}": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "[...{ a }] = b": {
      type: "Error",
      message: "Unexpected token (1:4)"
    },
    "[...a, b] = c": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:5)"
    },
    "({ t(eval) { \"use strict\"; } });": {
      type: "Error",
      message: "Binding eval in strict mode (1:5)"
    },
    "\"use strict\"; `${test}\\02`;": {
      type: "Error",
      message: "Octal literal in strict mode (1:22)"
    },
    "if (1) import \"acorn\";": {
      type: "Error",
      message: "'import' and 'export' may only appear at the top level (1:7)"
    },
    "[...a, ] = b": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:5)"
    },
    "if (b,...a, );": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "(b, ...a)": {
      type: "Error",
      message: "Unexpected token (1:4)"
    },
    "switch (cond) { case 10: let a = 20; ": {
      type: "Error",
      message: "Unexpected token (1:37)"
    },
    "\"use strict\"; (eval) => 42": {
      type: "Error",
      message: "Binding eval in strict mode (1:15)"
    },
    "(eval) => { \"use strict\"; 42 }": {
      type: "Error",
      message: "Binding eval in strict mode (1:1)"
    },
    "({ get test() { } }) => 42": {
      type: "Error",
      message: "Object pattern can't contain getter or setter (1:7)"
    },
    "doSmth(`${x} + ${y} = ${x + y}`)": {
      type: "Program",
      start: 0,
      end: 32,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 32,
          expression: {
            type: "CallExpression",
            start: 0,
            end: 32,
            callee: {
              type: "Identifier",
              start: 0,
              end: 6,
              name: "doSmth"
            },
            arguments: [
              {
                type: "TemplateLiteral",
                start: 7,
                end: 31,
                expressions: [
                  {
                    type: "Identifier",
                    start: 10,
                    end: 11,
                    name: "x"
                  },
                  {
                    type: "Identifier",
                    start: 17,
                    end: 18,
                    name: "y"
                  },
                  {
                    type: "BinaryExpression",
                    start: 24,
                    end: 29,
                    left: {
                      type: "Identifier",
                      start: 24,
                      end: 25,
                      name: "x"
                    },
                    operator: "+",
                    right: {
                      type: "Identifier",
                      start: 28,
                      end: 29,
                      name: "y"
                    }
                  }
                ],
                quasis: [
                  {
                    type: "TemplateElement",
                    start: 8,
                    end: 8,
                    value: {
                      raw: "",
                      cooked: ""
                    },
                    tail: false
                  },
                  {
                    type: "TemplateElement",
                    start: 12,
                    end: 15,
                    value: {
                      raw: " + ",
                      cooked: " + "
                    },
                    tail: false
                  },
                  {
                    type: "TemplateElement",
                    start: 19,
                    end: 22,
                    value: {
                      raw: " = ",
                      cooked: " = "
                    },
                    tail: false
                  },
                  {
                    type: "TemplateElement",
                    start: 30,
                    end: 30,
                    value: {
                      raw: "",
                      cooked: ""
                    },
                    tail: true
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function normal(x, y = 10) {}": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 29,
          id: {
            type: "Identifier",
            start: 9,
            end: 15,
            name: "normal"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "Identifier",
              start: 16,
              end: 17,
              name: "x"
            },
            {
              type: "AssignmentPattern",
              start: 19,
              end: 25,
              left: {
                type: "Identifier",
                start: 19,
                end: 20,
                name: "y"
              },
              right: {
                type: "Literal",
                start: 23,
                end: 25,
                value: 10,
                raw: "10"
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 27,
            end: 29,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "`{${x}}`, `}`": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "SequenceExpression",
            start: 0,
            end: 13,
            expressions: [
              {
                type: "TemplateLiteral",
                start: 0,
                end: 8,
                expressions: [
                  {
                    type: "Identifier",
                    start: 4,
                    end: 5,
                    name: "x"
                  }
                ],
                quasis: [
                  {
                    type: "TemplateElement",
                    start: 1,
                    end: 2,
                    value: {
                      raw: "{",
                      cooked: "{"
                    },
                    tail: false
                  },
                  {
                    type: "TemplateElement",
                    start: 6,
                    end: 7,
                    value: {
                      raw: "}",
                      cooked: "}"
                    },
                    tail: true
                  }
                ]
              },
              {
                type: "TemplateLiteral",
                start: 10,
                end: 13,
                expressions: [],
                quasis: [
                  {
                    type: "TemplateElement",
                    start: 11,
                    end: 12,
                    value: {
                      raw: "}",
                      cooked: "}"
                    },
                    tail: true
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var {get} = obj;": {
      type: "Program",
      start: 0,
      end: 16,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 16,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 15,
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 9,
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 8,
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 8,
                      name: "get"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 5,
                      end: 8,
                      name: "get"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 12,
                end: 15,
                name: "obj"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "var {propName: localVar = defaultValue} = obj": {
      type: "Program",
      start: 0,
      end: 45,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 45
        }
      },
      range: [
        0,
        45
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 45,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 45
            }
          },
          range: [
            0,
            45
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 45,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 45
                }
              },
              range: [
                4,
                45
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 39,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 39
                  }
                },
                range: [
                  4,
                  39
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 38,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 38
                      }
                    },
                    range: [
                      5,
                      38
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        5,
                        13
                      ],
                      name: "propName"
                    },
                    value: {
                      type: "AssignmentPattern",
                      start: 15,
                      end: 38,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 38
                        }
                      },
                      range: [
                        15,
                        38
                      ],
                      left: {
                        type: "Identifier",
                        start: 15,
                        end: 23,
                        loc: {
                          start: {
                            line: 1,
                            column: 15
                          },
                          end: {
                            line: 1,
                            column: 23
                          }
                        },
                        range: [
                          15,
                          23
                        ],
                        name: "localVar"
                      },
                      right: {
                        type: "Identifier",
                        start: 26,
                        end: 38,
                        loc: {
                          start: {
                            line: 1,
                            column: 26
                          },
                          end: {
                            line: 1,
                            column: 38
                          }
                        },
                        range: [
                          26,
                          38
                        ],
                        name: "defaultValue"
                      }
                    },
                    kind: "init"
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 42,
                end: 45,
                loc: {
                  start: {
                    line: 1,
                    column: 42
                  },
                  end: {
                    line: 1,
                    column: 45
                  }
                },
                range: [
                  42,
                  45
                ],
                name: "obj"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "var {propName = defaultValue} = obj": {
      type: "Program",
      start: 0,
      end: 35,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 35
        }
      },
      range: [
        0,
        35
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 35,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 35
            }
          },
          range: [
            0,
            35
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              range: [
                4,
                35
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  4,
                  29
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    range: [
                      5,
                      28
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        5,
                        13
                      ],
                      name: "propName"
                    },
                    kind: "init",
                    value: {
                      type: "AssignmentPattern",
                      start: 5,
                      end: 28,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 28
                        }
                      },
                      range: [
                        5,
                        28
                      ],
                      left: {
                        type: "Identifier",
                        start: 5,
                        end: 13,
                        loc: {
                          start: {
                            line: 1,
                            column: 5
                          },
                          end: {
                            line: 1,
                            column: 13
                          }
                        },
                        range: [
                          5,
                          13
                        ],
                        name: "propName"
                      },
                      right: {
                        type: "Identifier",
                        start: 16,
                        end: 28,
                        loc: {
                          start: {
                            line: 1,
                            column: 16
                          },
                          end: {
                            line: 1,
                            column: 28
                          }
                        },
                        range: [
                          16,
                          28
                        ],
                        name: "defaultValue"
                      }
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 32,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 32
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                range: [
                  32,
                  35
                ],
                name: "obj"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "var [localVar = defaultValue] = obj": {
      type: "Program",
      start: 0,
      end: 35,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 35
        }
      },
      range: [
        0,
        35
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 35,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 35
            }
          },
          range: [
            0,
            35
          ],
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              range: [
                4,
                35
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  4,
                  29
                ],
                elements: [
                  {
                    type: "AssignmentPattern",
                    start: 5,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    range: [
                      5,
                      28
                    ],
                    left: {
                      type: "Identifier",
                      start: 5,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        5,
                        13
                      ],
                      name: "localVar"
                    },
                    right: {
                      type: "Identifier",
                      start: 16,
                      end: 28,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 28
                        }
                      },
                      range: [
                        16,
                        28
                      ],
                      name: "defaultValue"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 32,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 32
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                range: [
                  32,
                  35
                ],
                name: "obj"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "({x = 0} = obj)": {
      type: "Program",
      start: 0,
      end: 15,
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          range: [
            0,
            15
          ],
          expression: {
            type: "AssignmentExpression",
            start: 1,
            end: 14,
            range: [
              1,
              14
            ],
            operator: "=",
            left: {
              type: "ObjectPattern",
              start: 1,
              end: 8,
              range: [
                1,
                8
              ],
              properties: [
                {
                  type: "Property",
                  start: 2,
                  end: 7,
                  range: [
                    2,
                    7
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 2,
                    end: 3,
                    range: [
                      2,
                      3
                    ],
                    name: "x"
                  },
                  kind: "init",
                  value: {
                    type: "AssignmentPattern",
                    start: 2,
                    end: 7,
                    range: [
                      2,
                      7
                    ],
                    left: {
                      type: "Identifier",
                      start: 2,
                      end: 3,
                      range: [
                        2,
                        3
                      ],
                      name: "x"
                    },
                    right: {
                      type: "Literal",
                      start: 6,
                      end: 7,
                      range: [
                        6,
                        7
                      ],
                      value: 0,
                      raw: "0"
                    }
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 11,
              end: 14,
              range: [
                11,
                14
              ],
              name: "obj"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({x = 0}) => x": {
      type: "Program",
      start: 0,
      end: 14,
      range: [
        0,
        14
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          range: [
            0,
            14
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 14,
            range: [
              0,
              14
            ],
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "ObjectPattern",
                start: 1,
                end: 8,
                range: [
                  1,
                  8
                ],
                properties: [
                  {
                    type: "Property",
                    start: 2,
                    end: 7,
                    range: [
                      2,
                      7
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 2,
                      end: 3,
                      range: [
                        2,
                        3
                      ],
                      name: "x"
                    },
                    kind: "init",
                    value: {
                      type: "AssignmentPattern",
                      start: 2,
                      end: 7,
                      range: [
                        2,
                        7
                      ],
                      left: {
                        type: "Identifier",
                        start: 2,
                        end: 3,
                        range: [
                          2,
                          3
                        ],
                        name: "x"
                      },
                      right: {
                        type: "Literal",
                        start: 6,
                        end: 7,
                        range: [
                          6,
                          7
                        ],
                        value: 0,
                        raw: "0"
                      }
                    }
                  }
                ]
              }
            ],
            body: {
              type: "Identifier",
              start: 13,
              end: 14,
              range: [
                13,
                14
              ],
              name: "x"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[a, {b: {c = 1}}] = arr": {
      type: "Program",
      start: 0,
      end: 23,
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          range: [
            0,
            23
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 23,
            range: [
              0,
              23
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 17,
              range: [
                0,
                17
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  range: [
                    1,
                    2
                  ],
                  name: "a"
                },
                {
                  type: "ObjectPattern",
                  start: 4,
                  end: 16,
                  range: [
                    4,
                    16
                  ],
                  properties: [
                    {
                      type: "Property",
                      start: 5,
                      end: 15,
                      range: [
                        5,
                        15
                      ],
                      method: false,
                      shorthand: false,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 5,
                        end: 6,
                        range: [
                          5,
                          6
                        ],
                        name: "b"
                      },
                      value: {
                        type: "ObjectPattern",
                        start: 8,
                        end: 15,
                        range: [
                          8,
                          15
                        ],
                        properties: [
                          {
                            type: "Property",
                            start: 9,
                            end: 14,
                            range: [
                              9,
                              14
                            ],
                            method: false,
                            shorthand: true,
                            computed: false,
                            key: {
                              type: "Identifier",
                              start: 9,
                              end: 10,
                              range: [
                                9,
                                10
                              ],
                              name: "c"
                            },
                            kind: "init",
                            value: {
                              type: "AssignmentPattern",
                              start: 9,
                              end: 14,
                              range: [
                                9,
                                14
                              ],
                              left: {
                                type: "Identifier",
                                start: 9,
                                end: 10,
                                range: [
                                  9,
                                  10
                                ],
                                name: "c"
                              },
                              right: {
                                type: "Literal",
                                start: 13,
                                end: 14,
                                range: [
                                  13,
                                  14
                                ],
                                value: 1,
                                raw: "1"
                              }
                            }
                          }
                        ]
                      },
                      kind: "init"
                    }
                  ]
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 20,
              end: 23,
              range: [
                20,
                23
              ],
              name: "arr"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for ({x = 0} in arr);": {
      type: "Program",
      start: 0,
      end: 21,
      range: [
        0,
        21
      ],
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 21,
          range: [
            0,
            21
          ],
          left: {
            type: "ObjectPattern",
            start: 5,
            end: 12,
            range: [
              5,
              12
            ],
            properties: [
              {
                type: "Property",
                start: 6,
                end: 11,
                range: [
                  6,
                  11
                ],
                method: false,
                shorthand: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 6,
                  end: 7,
                  range: [
                    6,
                    7
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "AssignmentPattern",
                  start: 6,
                  end: 11,
                  range: [
                    6,
                    11
                  ],
                  left: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    range: [
                      6,
                      7
                    ],
                    name: "x"
                  },
                  right: {
                    type: "Literal",
                    start: 10,
                    end: 11,
                    range: [
                      10,
                      11
                    ],
                    value: 0,
                    raw: "0"
                  }
                }
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 16,
            end: 19,
            range: [
              16,
              19
            ],
            name: "arr"
          },
          body: {
            type: "EmptyStatement",
            start: 20,
            end: 21,
            range: [
              20,
              21
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "obj = {x = 0}": {
      type: "Error",
      message: "Shorthand property assignments are valid only in destructuring patterns (1:9)"
    },
    "f({x = 0})": {
      type: "Error",
      message: "Shorthand property assignments are valid only in destructuring patterns (1:5)"
    },
    "try {} catch ({message}) {}": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 6
              }
            },
            range: [
              4,
              6
            ],
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              7,
              27
            ],
            param: {
              type: "ObjectPattern",
              start: 14,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                14,
                23
              ],
              properties: [
                {
                  type: "Property",
                  start: 15,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 15
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    15,
                    22
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 15,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    range: [
                      15,
                      22
                    ],
                    name: "message"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 15,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    range: [
                      15,
                      22
                    ],
                    name: "message"
                  }
                }
              ]
            },
            body: {
              type: "BlockStatement",
              start: 25,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                25,
                27
              ],
              body: []
            }
          },
          finalizer: null
        }
      ],
      sourceType: "script"
    },
    "class A { static() {} }": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          range: [
            0,
            23
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              8,
              23
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                range: [
                  10,
                  21
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    10,
                    16
                  ],
                  name: "static"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 16,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    16,
                    21
                  ],
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 19,
                    end: 21,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 21
                      }
                    },
                    range: [
                      19,
                      21
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "for (const x of list) process(x);": {
      type: "Program",
      start: 0,
      end: 33,
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 33,
          range: [
            0,
            33
          ],
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 12,
            range: [
              5,
              12
            ],
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 12,
                range: [
                  11,
                  12
                ],
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 12,
                  range: [
                    11,
                    12
                  ],
                  name: "x"
                },
                init: null
              }
            ],
            kind: "const"
          },
          right: {
            type: "Identifier",
            start: 16,
            end: 20,
            range: [
              16,
              20
            ],
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 22,
            end: 33,
            range: [
              22,
              33
            ],
            expression: {
              type: "CallExpression",
              start: 22,
              end: 32,
              range: [
                22,
                32
              ],
              callee: {
                type: "Identifier",
                start: 22,
                end: 29,
                range: [
                  22,
                  29
                ],
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 30,
                  end: 31,
                  range: [
                    30,
                    31
                  ],
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "class A { *static() {} }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 24
              }
            },
            range: [
              8,
              24
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                range: [
                  10,
                  22
                ],
                computed: false,
                key: {
                  type: "Identifier",
                  start: 11,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    11,
                    17
                  ],
                  name: "static"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 17,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    17,
                    22
                  ],
                  id: null,
                  generator: true,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 20,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    range: [
                      20,
                      22
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`${/\\d/.exec('1')[0]}`": {
      type: "Program",
      start: 0,
      end: 22,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 22,
            expressions: [
              {
                type: "MemberExpression",
                start: 3,
                end: 20,
                object: {
                  type: "CallExpression",
                  start: 3,
                  end: 17,
                  callee: {
                    type: "MemberExpression",
                    start: 3,
                    end: 12,
                    object: {
                      type: "Literal",
                      start: 3,
                      end: 7,
                      value: {},
                      raw: "/\\d/",
                      regex: {
                        pattern: "\\d",
                        flags: ""
                      }
                    },
                    property: {
                      type: "Identifier",
                      start: 8,
                      end: 12,
                      name: "exec"
                    },
                    computed: false
                  },
                  arguments: [
                    {
                      type: "Literal",
                      start: 13,
                      end: 16,
                      value: "1",
                      raw: "'1'"
                    }
                  ]
                },
                property: {
                  type: "Literal",
                  start: 18,
                  end: 19,
                  value: 0,
                  raw: "0"
                },
                computed: true
              }
            ],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 1,
                value: {
                  raw: "",
                  cooked: ""
                },
                tail: false
              },
              {
                type: "TemplateElement",
                start: 21,
                end: 21,
                value: {
                  raw: "",
                  cooked: ""
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var _𐒦 = 10;": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 13,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "_𐒦"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 12,
                value: 10,
                raw: "10"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "var 𫠝_ = 10;": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 13,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "𫠝_"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 12,
                value: 10,
                raw: "10"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "var _\\u{104A6} = 10;": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 20,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 19,
              id: {
                type: "Identifier",
                start: 4,
                end: 14,
                name: "_𐒦"
              },
              init: {
                type: "Literal",
                start: 17,
                end: 19,
                value: 10,
                raw: "10"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "let [x,] = [1]": {
      type: "Program",
      start: 0,
      end: 14,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 14,
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 8,
                elements: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    name: "x"
                  }
                ]
              },
              init: {
                type: "ArrayExpression",
                start: 11,
                end: 14,
                elements: [
                  {
                    type: "Literal",
                    start: 12,
                    end: 13,
                    value: 1,
                    raw: "1"
                  }
                ]
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "let {x} = y": {
      type: "Program",
      start: 0,
      end: 11,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 11,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 7,
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 6,
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      name: "x"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      name: "x"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 10,
                end: 11,
                name: "y"
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "[x,,] = 1": {
      type: "Program",
      start: 0,
      end: 9,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 9,
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 5,
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  name: "x"
                },
                null
              ]
            },
            right: {
              type: "Literal",
              start: 8,
              end: 9,
              value: 1,
              raw: "1"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for (var [name, value] in obj) {}": {
      type: "Program",
      start: 0,
      end: 33,
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 33,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 22,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 22,
                id: {
                  type: "ArrayPattern",
                  start: 9,
                  end: 22,
                  elements: [
                    {
                      type: "Identifier",
                      start: 10,
                      end: 14,
                      name: "name"
                    },
                    {
                      type: "Identifier",
                      start: 16,
                      end: 21,
                      name: "value"
                    }
                  ]
                },
                init: null
              }
            ],
            kind: "var"
          },
          right: {
            type: "Identifier",
            start: 26,
            end: 29,
            name: "obj"
          },
          body: {
            type: "BlockStatement",
            start: 31,
            end: 33,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "let [x]": {
      type: "Error",
      message: "Complex binding patterns require an initialization value (1:7)"
    },
    "var [x]": {
      type: "Error",
      message: "Complex binding patterns require an initialization value (1:7)"
    },
    "var _𖫵 = 11;": {
      type: "Error",
      message: "Unexpected character '𖫵' (1:5)"
    },
    "var 𫠞_ = 12;": {
      type: "Error",
      message: "Unexpected character '𫠞' (1:4)"
    },
    "if (1) let x = 10;": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "for (;;) const x = 10;": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "while (1) function foo(){}": {
      type: "Error",
      message: "Unexpected token (1:10)"
    },
    "if (1) ; else class Cls {}": {
      type: "Error",
      message: "Unexpected token (1:14)"
    },
    "'use strict'; [...eval] = arr": {
      type: "Error",
      message: "Assigning to eval in strict mode (1:18)"
    },
    "'use strict'; ({eval = defValue} = obj)": {
      type: "Error",
      message: "Assigning to eval in strict mode (1:16)"
    },
    "function* y({yield}) {}": {
      type: "Error",
      message: "Can not use 'yield' as identifier inside a generator (1:13)"
    },
    "function foo() { new.target; }": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 15,
            end: 30,
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 28,
                expression: {
                  type: "MetaProperty",
                  start: 17,
                  end: 27,
                  meta: {
                    type: "Identifier",
                    start: 17,
                    end: 20,
                    name: "new"
                  },
                  property: {
                    type: "Identifier",
                    start: 21,
                    end: 27,
                    name: "target"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "new.prop": {
      type: "Error",
      message: "The only valid meta property for new is new.target (1:4)"
    },
    "new.target": {
      type: "Error",
      message: "new.target can only be used in functions (1:0)"
    },
    "`\\07`": {
      type: "Error",
      message: "Octal literal in strict mode (1:1)"
    },
    "x = { method() 42 }": {
      type: "Error",
      message: "Unexpected token (1:15)"
    },
    "x = { get method() 42 }": {
      type: "Error",
      message: "Unexpected token (1:19)"
    },
    "x = { set method(val) v = val }": {
      type: "Error",
      message: "Unexpected token (1:22)"
    },
    "/\\u{110000}/u": {
      type: "Error",
      message: "Error parsing regular expression: Invalid regular expression: /\\u{110000}/: Invalid unicode escape (1:1)"
    },
    "super": {
      type: "Error",
      message: "'super' outside of function or class (1:0)"
    },
    "class A { get prop(x) {} }": {
      type: "Error",
      message: "getter should have no params (1:18)"
    },
    "class A { set prop() {} }": {
      type: "Error",
      message: "setter should have exactly one param (1:18)"
    },
    "class A { set prop(x, y) {} }": {
      type: "Error",
      message: "setter should have exactly one param (1:18)"
    },
    "({ __proto__: 1, __proto__: 2 })": {
      type: "Error",
      message: "Redefinition of __proto__ property (1:17)"
    },
    "({ '__proto__': 1, __proto__: 2 })": {
      type: "Error",
      message: "Redefinition of __proto__ property (1:19)"
    },
    "({ ['__proto__']: 1, __proto__: 2 })": {
      type: "Program",
      start: 0,
      end: 36,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 36,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 35,
            properties: [
              {
                type: "Property",
                start: 3,
                end: 19,
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Literal",
                  start: 4,
                  end: 15,
                  value: "__proto__",
                  raw: "'__proto__'"
                },
                value: {
                  type: "Literal",
                  start: 18,
                  end: 19,
                  value: 1,
                  raw: "1"
                },
                kind: "init"
              },
              {
                type: "Property",
                start: 21,
                end: 33,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 30,
                  name: "__proto__"
                },
                value: {
                  type: "Literal",
                  start: 32,
                  end: 33,
                  value: 2,
                  raw: "2"
                },
                kind: "init"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ __proto__() { return 1 }, __proto__: 2 })": {
      type: "Program",
      start: 0,
      end: 44,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 44,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 43,
            properties: [
              {
                type: "Property",
                start: 3,
                end: 27,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 12,
                  name: "__proto__"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 27,
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 27,
                    body: [
                      {
                        type: "ReturnStatement",
                        start: 17,
                        end: 25,
                        argument: {
                          type: "Literal",
                          start: 24,
                          end: 25,
                          value: 1,
                          raw: "1"
                        }
                      }
                    ]
                  }
                }
              },
              {
                type: "Property",
                start: 29,
                end: 41,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 29,
                  end: 38,
                  name: "__proto__"
                },
                value: {
                  type: "Literal",
                  start: 40,
                  end: 41,
                  value: 2,
                  raw: "2"
                },
                kind: "init"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ get __proto__() { return 1 }, __proto__: 2 })": {
      type: "Program",
      start: 0,
      end: 48,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 48,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 47,
            properties: [
              {
                type: "Property",
                start: 3,
                end: 31,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 7,
                  end: 16,
                  name: "__proto__"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 16,
                  end: 31,
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 19,
                    end: 31,
                    body: [
                      {
                        type: "ReturnStatement",
                        start: 21,
                        end: 29,
                        argument: {
                          type: "Literal",
                          start: 28,
                          end: 29,
                          value: 1,
                          raw: "1"
                        }
                      }
                    ]
                  }
                }
              },
              {
                type: "Property",
                start: 33,
                end: 45,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 33,
                  end: 42,
                  name: "__proto__"
                },
                value: {
                  type: "Literal",
                  start: 44,
                  end: 45,
                  value: 2,
                  raw: "2"
                },
                kind: "init"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ __proto__, __proto__: 2 })": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 29,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 28,
            properties: [
              {
                type: "Property",
                start: 3,
                end: 12,
                method: false,
                shorthand: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 12,
                  name: "__proto__"
                },
                kind: "init",
                value: {
                  type: "Identifier",
                  start: 3,
                  end: 12,
                  name: "__proto__"
                }
              },
              {
                type: "Property",
                start: 14,
                end: 26,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 14,
                  end: 23,
                  name: "__proto__"
                },
                value: {
                  type: "Literal",
                  start: 25,
                  end: 26,
                  value: 2,
                  raw: "2"
                },
                kind: "init"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var await = 0": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "await"
              },
              init: {
                type: "Literal",
                start: 12,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                value: 0,
                raw: "0"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "/[a-z]/gimuy": {
      type: "Program",
      start: 0,
      end: 12,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            value: {},
            raw: "/[a-z]/gimuy",
            regex: {
              pattern: "[a-z]",
              flags: "gimuy"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "/[a-z]/s": {
      type: "Error",
      message: "Invalid regular expression flag (1:1)"
    },
    "[...x in y] = []": {
      type: "Error",
      message: "Assigning to rvalue (1:4)"
    },
    "(([,]) => 0)": {
      type: "Program",
      start: 0,
      end: 12,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          expression: {
            type: "ArrowFunctionExpression",
            start: 1,
            end: 11,
            id: null,
            generator: false,
            expression: true,
            params: [
              {
                type: "ArrayPattern",
                start: 2,
                end: 5,
                elements: [
                  null
                ]
              }
            ],
            body: {
              type: "Literal",
              start: 10,
              end: 11,
              value: 0,
              raw: "0"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { return {arguments} }": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 37,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 15,
            end: 37,
            body: [
              {
                type: "ReturnStatement",
                start: 17,
                end: 35,
                argument: {
                  type: "ObjectExpression",
                  start: 24,
                  end: 35,
                  properties: [
                    {
                      type: "Property",
                      start: 25,
                      end: 34,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 25,
                        end: 34,
                        name: "arguments"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 25,
                        end: 34,
                        name: "arguments"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { return {eval} }": {
      type: "Program",
      start: 0,
      end: 32,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 32,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 15,
            end: 32,
            body: [
              {
                type: "ReturnStatement",
                start: 17,
                end: 30,
                argument: {
                  type: "ObjectExpression",
                  start: 24,
                  end: 30,
                  properties: [
                    {
                      type: "Property",
                      start: 25,
                      end: 29,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 25,
                        end: 29,
                        name: "eval"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 25,
                        end: 29,
                        name: "eval"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { 'use strict'; return {arguments} }": {
      type: "Program",
      start: 0,
      end: 51,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 51,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 15,
            end: 51,
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 30,
                expression: {
                  type: "Literal",
                  start: 17,
                  end: 29,
                  value: "use strict",
                  raw: "'use strict'"
                }
              },
              {
                type: "ReturnStatement",
                start: 31,
                end: 49,
                argument: {
                  type: "ObjectExpression",
                  start: 38,
                  end: 49,
                  properties: [
                    {
                      type: "Property",
                      start: 39,
                      end: 48,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 39,
                        end: 48,
                        name: "arguments"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 39,
                        end: 48,
                        name: "arguments"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { 'use strict'; return {eval} }": {
      type: "Program",
      start: 0,
      end: 46,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 46,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 15,
            end: 46,
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 30,
                expression: {
                  type: "Literal",
                  start: 17,
                  end: 29,
                  value: "use strict",
                  raw: "'use strict'"
                }
              },
              {
                type: "ReturnStatement",
                start: 31,
                end: 44,
                argument: {
                  type: "ObjectExpression",
                  start: 38,
                  end: 44,
                  properties: [
                    {
                      type: "Property",
                      start: 39,
                      end: 43,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 39,
                        end: 43,
                        name: "eval"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 39,
                        end: 43,
                        name: "eval"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { return {yield} }": {
      type: "Program",
      start: 0,
      end: 33,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 33,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 15,
            end: 33,
            body: [
              {
                type: "ReturnStatement",
                start: 17,
                end: 31,
                argument: {
                  type: "ObjectExpression",
                  start: 24,
                  end: 31,
                  properties: [
                    {
                      type: "Property",
                      start: 25,
                      end: 30,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 25,
                        end: 30,
                        name: "yield"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 25,
                        end: 30,
                        name: "yield"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { 'use strict'; return {yield} }": {
      type: "Error",
      message: "'yield' can not be used as shorthand property (1:39)"
    },
    "function foo() { 'use strict'; var {arguments} = {} }": {
      type: "Error",
      message: "Binding arguments in strict mode (1:36)"
    },
    "function foo() { 'use strict'; var {eval} = {} }": {
      type: "Error",
      message: "Binding eval in strict mode (1:36)"
    },
    "function foo() { 'use strict'; var {arguments = 1} = {} }": {
      type: "Error",
      message: "Binding arguments in strict mode (1:36)"
    },
    "function foo() { 'use strict'; var {eval = 1} = {} }": {
      type: "Error",
      message: "Binding eval in strict mode (1:36)"
    },
    "function* wrap() { function* foo(a = 1 + (yield)) {} }": {
      type: "Error",
      message: "Yield expression cannot be a default value (1:42)"
    },
    "function* wrap() { return (a = 1 + (yield)) => a }": {
      type: "Error",
      message: "Yield expression cannot be a default value (1:36)"
    },
    "function* foo(a = function*(b) { yield b }) { }": {
      type: "Program",
      start: 0,
      end: 47,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 47,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "foo"
          },
          generator: true,
          expression: false,
          params: [
            {
              type: "AssignmentPattern",
              start: 14,
              end: 42,
              left: {
                type: "Identifier",
                start: 14,
                end: 15,
                name: "a"
              },
              right: {
                type: "FunctionExpression",
                start: 18,
                end: 42,
                id: null,
                generator: true,
                expression: false,
                params: [
                  {
                    type: "Identifier",
                    start: 28,
                    end: 29,
                    name: "b"
                  }
                ],
                body: {
                  type: "BlockStatement",
                  start: 31,
                  end: 42,
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 33,
                      end: 40,
                      expression: {
                        type: "YieldExpression",
                        start: 33,
                        end: 40,
                        delegate: false,
                        argument: {
                          type: "Identifier",
                          start: 39,
                          end: 40,
                          name: "b"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 44,
            end: 47,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function* yield() {}": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 20,
          id: {
            type: "Identifier",
            start: 10,
            end: 15,
            name: "yield"
          },
          generator: true,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 18,
            end: 20,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "({*yield() {}})": {
      type: "Program",
      start: 0,
      end: 15,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 14,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 13,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 8,
                  name: "yield"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 8,
                  end: 13,
                  id: null,
                  generator: true,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 11,
                    end: 13,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {*yield() {}}": {
      type: "Program",
      start: 0,
      end: 21,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 21,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 21,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 20,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 15,
                  name: "yield"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 15,
                  end: 20,
                  id: null,
                  generator: true,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 18,
                    end: 20,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(function* yield() {})": {
      type: "Error",
      message: "Can not use 'yield' as identifier inside a generator (1:11)"
    },
    "function* wrap() {\nfunction* yield() {}\n}": {
      type: "Error",
      message: "Can not use 'yield' as identifier inside a generator (2:10)"
    },
    "function* wrap() {\n({*yield() {}})\n}": {
      type: "Error",
      message: "Can not use 'yield' as identifier inside a generator (2:3)"
    },
    "function* wrap() {\nclass A {*yield() {}}\n}": {
      type: "Error",
      message: "Can not use 'yield' as identifier inside a generator (2:10)"
    },
    "function* foo(a = yield b) {}": {
      type: "Error",
      message: "Yield expression cannot be a default value (1:18)"
    },
    "(function* foo(a = yield b) {})": {
      type: "Error",
      message: "Yield expression cannot be a default value (1:19)"
    },
    "({*foo(a = yield b) {}})": {
      type: "Error",
      message: "Yield expression cannot be a default value (1:11)"
    },
    "(class {*foo(a = yield b) {}})": {
      type: "Error",
      message: "Yield expression cannot be a default value (1:17)"
    },
    "function* foo(a = class extends (yield b) {}) {}": {
      type: "Error",
      message: "Yield expression cannot be a default value (1:33)"
    },
    "function* foo(a = function* foo() { yield b }) {}": {
      type: "Program",
      start: 0,
      end: 49,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 49,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "foo"
          },
          generator: true,
          expression: false,
          params: [
            {
              type: "AssignmentPattern",
              start: 14,
              end: 45,
              left: {
                type: "Identifier",
                start: 14,
                end: 15,
                name: "a"
              },
              right: {
                type: "FunctionExpression",
                start: 18,
                end: 45,
                id: {
                  type: "Identifier",
                  start: 28,
                  end: 31,
                  name: "foo"
                },
                generator: true,
                expression: false,
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 34,
                  end: 45,
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 36,
                      end: 43,
                      expression: {
                        type: "YieldExpression",
                        start: 36,
                        end: 43,
                        delegate: false,
                        argument: {
                          type: "Identifier",
                          start: 42,
                          end: 43,
                          name: "b"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 47,
            end: 49,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function* foo(a = {*bar() { yield b }}) {}": {
      type: "Program",
      start: 0,
      end: 42,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 42,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "foo"
          },
          generator: true,
          expression: false,
          params: [
            {
              type: "AssignmentPattern",
              start: 14,
              end: 38,
              left: {
                type: "Identifier",
                start: 14,
                end: 15,
                name: "a"
              },
              right: {
                type: "ObjectExpression",
                start: 18,
                end: 38,
                properties: [
                  {
                    type: "Property",
                    start: 19,
                    end: 37,
                    method: true,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 20,
                      end: 23,
                      name: "bar"
                    },
                    kind: "init",
                    value: {
                      type: "FunctionExpression",
                      start: 23,
                      end: 37,
                      id: null,
                      generator: true,
                      expression: false,
                      params: [],
                      body: {
                        type: "BlockStatement",
                        start: 26,
                        end: 37,
                        body: [
                          {
                            type: "ExpressionStatement",
                            start: 28,
                            end: 35,
                            expression: {
                              type: "YieldExpression",
                              start: 28,
                              end: 35,
                              delegate: false,
                              argument: {
                                type: "Identifier",
                                start: 34,
                                end: 35,
                                name: "b"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 40,
            end: 42,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function* foo(a = class {*bar() { yield b }}) {}": {
      type: "Program",
      start: 0,
      end: 48,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 48,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "foo"
          },
          generator: true,
          expression: false,
          params: [
            {
              type: "AssignmentPattern",
              start: 14,
              end: 44,
              left: {
                type: "Identifier",
                start: 14,
                end: 15,
                name: "a"
              },
              right: {
                type: "ClassExpression",
                start: 18,
                end: 44,
                id: null,
                superClass: null,
                body: {
                  type: "ClassBody",
                  start: 24,
                  end: 44,
                  body: [
                    {
                      type: "MethodDefinition",
                      start: 25,
                      end: 43,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 26,
                        end: 29,
                        name: "bar"
                      },
                      static: false,
                      kind: "method",
                      value: {
                        type: "FunctionExpression",
                        start: 29,
                        end: 43,
                        id: null,
                        generator: true,
                        expression: false,
                        params: [],
                        body: {
                          type: "BlockStatement",
                          start: 32,
                          end: 43,
                          body: [
                            {
                              type: "ExpressionStatement",
                              start: 34,
                              end: 41,
                              expression: {
                                type: "YieldExpression",
                                start: 34,
                                end: 41,
                                delegate: false,
                                argument: {
                                  type: "Identifier",
                                  start: 40,
                                  end: 41,
                                  name: "b"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 46,
            end: 48,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function* wrap() {\n(a = yield b)\n}": {
      type: "Program",
      start: 0,
      end: 34,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 34,
          id: {
            type: "Identifier",
            start: 10,
            end: 14,
            name: "wrap"
          },
          generator: true,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 17,
            end: 34,
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 32,
                expression: {
                  type: "AssignmentExpression",
                  start: 20,
                  end: 31,
                  operator: "=",
                  left: {
                    type: "Identifier",
                    start: 20,
                    end: 21,
                    name: "a"
                  },
                  right: {
                    type: "YieldExpression",
                    start: 24,
                    end: 31,
                    delegate: false,
                    argument: {
                      type: "Identifier",
                      start: 30,
                      end: 31,
                      name: "b"
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function* wrap() {\n(a = yield b) => a\n}": {
      type: "Error",
      message: "Yield expression cannot be a default value (2:5)"
    },
    "function* wrap() {\n({a = yield b} = obj)\n}": {
      type: "Program",
      start: 0,
      end: 42,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 42,
          id: {
            type: "Identifier",
            start: 10,
            end: 14,
            name: "wrap"
          },
          generator: true,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 17,
            end: 42,
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 40,
                expression: {
                  type: "AssignmentExpression",
                  start: 20,
                  end: 39,
                  operator: "=",
                  left: {
                    type: "ObjectPattern",
                    start: 20,
                    end: 33,
                    properties: [
                      {
                        type: "Property",
                        start: 21,
                        end: 32,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 21,
                          end: 22,
                          name: "a"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 21,
                          end: 32,
                          left: {
                            type: "Identifier",
                            start: 21,
                            end: 22,
                            name: "a"
                          },
                          right: {
                            type: "YieldExpression",
                            start: 25,
                            end: 32,
                            delegate: false,
                            argument: {
                              type: "Identifier",
                              start: 31,
                              end: 32,
                              name: "b"
                            }
                          }
                        }
                      }
                    ]
                  },
                  right: {
                    type: "Identifier",
                    start: 36,
                    end: 39,
                    name: "obj"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function *f() { yield\n{}/1/g\n}": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          id: {
            type: "Identifier",
            start: 10,
            end: 11,
            name: "f"
          },
          generator: true,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 14,
            end: 30,
            body: [
              {
                type: "ExpressionStatement",
                start: 16,
                end: 21,
                expression: {
                  type: "YieldExpression",
                  start: 16,
                  end: 21,
                  delegate: false,
                  argument: null
                }
              },
              {
                type: "BlockStatement",
                start: 22,
                end: 24,
                body: []
              },
              {
                type: "ExpressionStatement",
                start: 24,
                end: 28,
                expression: {
                  type: "Literal",
                  start: 24,
                  end: 28,
                  value: {},
                  raw: "/1/g",
                  regex: {
                    pattern: "1",
                    flags: "g"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class B extends A { foo(a = super.foo()) { return a }}": {
      type: "Program",
      start: 0,
      end: 54,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 54,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "B"
          },
          superClass: {
            type: "Identifier",
            start: 16,
            end: 17,
            name: "A"
          },
          body: {
            type: "ClassBody",
            start: 18,
            end: 54,
            body: [
              {
                type: "MethodDefinition",
                start: 20,
                end: 53,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 20,
                  end: 23,
                  name: "foo"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 23,
                  end: 53,
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "AssignmentPattern",
                      start: 24,
                      end: 39,
                      left: {
                        type: "Identifier",
                        start: 24,
                        end: 25,
                        name: "a"
                      },
                      right: {
                        type: "CallExpression",
                        start: 28,
                        end: 39,
                        callee: {
                          type: "MemberExpression",
                          start: 28,
                          end: 37,
                          object: {
                            type: "Super",
                            start: 28,
                            end: 33
                          },
                          property: {
                            type: "Identifier",
                            start: 34,
                            end: 37,
                            name: "foo"
                          },
                          computed: false
                        },
                        arguments: []
                      }
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 41,
                    end: 53,
                    body: [
                      {
                        type: "ReturnStatement",
                        start: 43,
                        end: 51,
                        argument: {
                          type: "Identifier",
                          start: 50,
                          end: 51,
                          name: "a"
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function* wrap() {\n({a = yield b} = obj) => a\n}": {
      type: "Error",
      message: "Yield expression cannot be a default value (2:6)"
    },
    "({*foo: 1})": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "foo: class X {}": {
      type: "Error",
      message: "Invalid labeled declaration (1:5)"
    },
    "'use strict'; bar: function x() {}": {
      type: "Error",
      message: "Invalid labeled declaration (1:19)"
    },
    "({x, y}) = {}": {
      type: "Error",
      message: "Parenthesized pattern (1:0)"
    },
    "[x, (y), {z, u: (v)}] = foo": {
      type: "Program",
      start: 0,
      end: 27,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 27,
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 21,
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  name: "x"
                },
                {
                  type: "Identifier",
                  start: 5,
                  end: 6,
                  name: "y"
                },
                {
                  type: "ObjectPattern",
                  start: 9,
                  end: 20,
                  properties: [
                    {
                      type: "Property",
                      start: 10,
                      end: 11,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "z"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "z"
                      }
                    },
                    {
                      type: "Property",
                      start: 13,
                      end: 19,
                      method: false,
                      shorthand: false,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 13,
                        end: 14,
                        name: "u"
                      },
                      value: {
                        type: "Identifier",
                        start: 17,
                        end: 18,
                        name: "v"
                      },
                      kind: "init"
                    }
                  ]
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 24,
              end: 27,
              name: "foo"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "var foo = 1; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:17)"
    },
    "{ var foo = 1; let foo = 1; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:19)"
    },
    "let foo = 1; var foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:17)"
    },
    "let foo = 1; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:17)"
    },
    "var foo = 1; const foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:19)"
    },
    "const foo = 1; var foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:19)"
    },
    "var [foo] = [1]; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:21)"
    },
    "var [{ bar: [foo] }] = x; let {foo} = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:31)"
    },
    "if (x) var foo = 1; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:24)"
    },
    "if (x) {} else var foo = 1; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:32)"
    },
    "if (x) var foo = 1; else {} let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:32)"
    },
    "if (x) {} else if (y) {} else var foo = 1; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:47)"
    },
    "while (x) var foo = 1; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:27)"
    },
    "do var foo = 1; while (x) let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:30)"
    },
    "for (;;) var foo = 1; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:26)"
    },
    "for (const x of y) var foo = 1; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:36)"
    },
    "for (const x in y) var foo = 1; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:36)"
    },
    "label: var foo = 1; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:24)"
    },
    "switch (x) { case 0: var foo = 1 } let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:39)"
    },
    "try { var foo = 1; } catch (e) {} let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:38)"
    },
    "function foo() {} let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:22)"
    },
    "{ var foo = 1; } let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:21)"
    },
    "let foo = 1; { var foo = 1; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:19)"
    },
    "let foo = 1; function x(foo) {} { var foo = 1; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:38)"
    },
    "if (x) { if (y) var foo = 1; } let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:35)"
    },
    "var foo = 1; function x() {} let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:33)"
    },
    "{ let foo = 1; { let foo = 2; } let foo = 1; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:36)"
    },
    "for (var foo of y) {} let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:26)"
    },
    "function x(foo) { let foo = 1; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:22)"
    },
    "var [...foo] = x; let foo = 1;": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:22)"
    },
    "foo => { let foo; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:13)"
    },
    "({ x(foo) { let foo; } })": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:16)"
    },
    "try {} catch (foo) { let foo = 1; }": {
      type: "Error",
      message: "Identifier 'foo' has already been declared (1:25)"
    },
    "var foo = 1; var foo = 1;": {
      type: "Program",
      start: 0,
      end: 25,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 11,
                value: 1,
                raw: "1"
              }
            }
          ],
          kind: "var"
        },
        {
          type: "VariableDeclaration",
          start: 13,
          end: 25,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 17,
              end: 24,
              id: {
                type: "Identifier",
                start: 17,
                end: 20,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 23,
                end: 24,
                value: 1,
                raw: "1"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "if (x) var foo = 1; var foo = 1;": {
      type: "Program",
      start: 0,
      end: 32,
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 19,
          test: {
            type: "Identifier",
            start: 4,
            end: 5,
            name: "x"
          },
          consequent: {
            type: "VariableDeclaration",
            start: 7,
            end: 19,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 18,
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 14,
                  name: "foo"
                },
                init: {
                  type: "Literal",
                  start: 17,
                  end: 18,
                  value: 1,
                  raw: "1"
                }
              }
            ],
            kind: "var"
          },
          alternate: null
        },
        {
          type: "VariableDeclaration",
          start: 20,
          end: 32,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 24,
              end: 31,
              id: {
                type: "Identifier",
                start: 24,
                end: 27,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 30,
                end: 31,
                value: 1,
                raw: "1"
              }
            }
          ],
          kind: "var"
        }
      ],
      sourceType: "script"
    },
    "function x() { var foo = 1; } let foo = 1;": {
      type: "Program",
      start: 0,
      end: 42,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 29,
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            name: "x"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 13,
            end: 29,
            body: [
              {
                type: "VariableDeclaration",
                start: 15,
                end: 27,
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 19,
                    end: 26,
                    id: {
                      type: "Identifier",
                      start: 19,
                      end: 22,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 25,
                      end: 26,
                      value: 1,
                      raw: "1"
                    }
                  }
                ],
                kind: "var"
              }
            ]
          }
        },
        {
          type: "VariableDeclaration",
          start: 30,
          end: 42,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 34,
              end: 41,
              id: {
                type: "Identifier",
                start: 34,
                end: 37,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 40,
                end: 41,
                value: 1,
                raw: "1"
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "function foo() { let foo = 1; }": {
      type: "Program",
      start: 0,
      end: 31,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 31,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 15,
            end: 31,
            body: [
              {
                type: "VariableDeclaration",
                start: 17,
                end: 29,
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 21,
                    end: 28,
                    id: {
                      type: "Identifier",
                      start: 21,
                      end: 24,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 27,
                      end: 28,
                      value: 1,
                      raw: "1"
                    }
                  }
                ],
                kind: "let"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var foo = 1; { let foo = 1; }": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 11,
                value: 1,
                raw: "1"
              }
            }
          ],
          kind: "var"
        },
        {
          type: "BlockStatement",
          start: 13,
          end: 29,
          body: [
            {
              type: "VariableDeclaration",
              start: 15,
              end: 27,
              declarations: [
                {
                  type: "VariableDeclarator",
                  start: 19,
                  end: 26,
                  id: {
                    type: "Identifier",
                    start: 19,
                    end: 22,
                    name: "foo"
                  },
                  init: {
                    type: "Literal",
                    start: 25,
                    end: 26,
                    value: 1,
                    raw: "1"
                  }
                }
              ],
              kind: "let"
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "{ let foo = 1; { let foo = 2; } }": {
      type: "Program",
      start: 0,
      end: 33,
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 33,
          body: [
            {
              type: "VariableDeclaration",
              start: 2,
              end: 14,
              declarations: [
                {
                  type: "VariableDeclarator",
                  start: 6,
                  end: 13,
                  id: {
                    type: "Identifier",
                    start: 6,
                    end: 9,
                    name: "foo"
                  },
                  init: {
                    type: "Literal",
                    start: 12,
                    end: 13,
                    value: 1,
                    raw: "1"
                  }
                }
              ],
              kind: "let"
            },
            {
              type: "BlockStatement",
              start: 15,
              end: 31,
              body: [
                {
                  type: "VariableDeclaration",
                  start: 17,
                  end: 29,
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 21,
                      end: 28,
                      id: {
                        type: "Identifier",
                        start: 21,
                        end: 24,
                        name: "foo"
                      },
                      init: {
                        type: "Literal",
                        start: 27,
                        end: 28,
                        value: 2,
                        raw: "2"
                      }
                    }
                  ],
                  kind: "let"
                }
              ]
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var foo; try {} catch (_) { let foo; }": {
      type: "Program",
      start: 0,
      end: 38,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 8,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 7,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "foo"
              },
              init: null
            }
          ],
          kind: "var"
        },
        {
          type: "TryStatement",
          start: 9,
          end: 38,
          block: {
            type: "BlockStatement",
            start: 13,
            end: 15,
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 16,
            end: 38,
            param: {
              type: "Identifier",
              start: 23,
              end: 24,
              name: "_"
            },
            body: {
              type: "BlockStatement",
              start: 26,
              end: 38,
              body: [
                {
                  type: "VariableDeclaration",
                  start: 28,
                  end: 36,
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 32,
                      end: 35,
                      id: {
                        type: "Identifier",
                        start: 32,
                        end: 35,
                        name: "foo"
                      },
                      init: null
                    }
                  ],
                  kind: "let"
                }
              ]
            }
          },
          finalizer: null
        }
      ],
      sourceType: "script"
    },
    "let x = 1; function foo(x) {}": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 10,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 9,
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 9,
                value: 1,
                raw: "1"
              }
            }
          ],
          kind: "let"
        },
        {
          type: "FunctionDeclaration",
          start: 11,
          end: 29,
          id: {
            type: "Identifier",
            start: 20,
            end: 23,
            name: "foo"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "Identifier",
              start: 24,
              end: 25,
              name: "x"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 27,
            end: 29,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "for (let i = 0;;); for (let i = 0;;);": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 18,
          init: {
            type: "VariableDeclaration",
            start: 5,
            end: 14,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 14,
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  name: "i"
                },
                init: {
                  type: "Literal",
                  start: 13,
                  end: 14,
                  value: 0,
                  raw: "0"
                }
              }
            ],
            kind: "let"
          },
          test: null,
          update: null,
          body: {
            type: "EmptyStatement",
            start: 17,
            end: 18
          }
        },
        {
          type: "ForStatement",
          start: 19,
          end: 37,
          init: {
            type: "VariableDeclaration",
            start: 24,
            end: 33,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 28,
                end: 33,
                id: {
                  type: "Identifier",
                  start: 28,
                  end: 29,
                  name: "i"
                },
                init: {
                  type: "Literal",
                  start: 32,
                  end: 33,
                  value: 0,
                  raw: "0"
                }
              }
            ],
            kind: "let"
          },
          test: null,
          update: null,
          body: {
            type: "EmptyStatement",
            start: 36,
            end: 37
          }
        }
      ],
      sourceType: "script"
    },
    "for (const foo of bar); for (const foo of bar);": {
      type: "Program",
      start: 0,
      end: 47,
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 23,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 14,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 14,
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 14,
                  name: "foo"
                },
                init: null
              }
            ],
            kind: "const"
          },
          right: {
            type: "Identifier",
            start: 18,
            end: 21,
            name: "bar"
          },
          body: {
            type: "EmptyStatement",
            start: 22,
            end: 23
          }
        },
        {
          type: "ForOfStatement",
          start: 24,
          end: 47,
          left: {
            type: "VariableDeclaration",
            start: 29,
            end: 38,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 35,
                end: 38,
                id: {
                  type: "Identifier",
                  start: 35,
                  end: 38,
                  name: "foo"
                },
                init: null
              }
            ],
            kind: "const"
          },
          right: {
            type: "Identifier",
            start: 42,
            end: 45,
            name: "bar"
          },
          body: {
            type: "EmptyStatement",
            start: 46,
            end: 47
          }
        }
      ],
      sourceType: "script"
    },
    "for (const foo in bar); for (const foo in bar);": {
      type: "Program",
      start: 0,
      end: 47,
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 23,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 14,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 14,
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 14,
                  name: "foo"
                },
                init: null
              }
            ],
            kind: "const"
          },
          right: {
            type: "Identifier",
            start: 18,
            end: 21,
            name: "bar"
          },
          body: {
            type: "EmptyStatement",
            start: 22,
            end: 23
          }
        },
        {
          type: "ForInStatement",
          start: 24,
          end: 47,
          left: {
            type: "VariableDeclaration",
            start: 29,
            end: 38,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 35,
                end: 38,
                id: {
                  type: "Identifier",
                  start: 35,
                  end: 38,
                  name: "foo"
                },
                init: null
              }
            ],
            kind: "const"
          },
          right: {
            type: "Identifier",
            start: 42,
            end: 45,
            name: "bar"
          },
          body: {
            type: "EmptyStatement",
            start: 46,
            end: 47
          }
        }
      ],
      sourceType: "script"
    },
    "for (let foo in bar) { let foo = 1; }": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 37,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 12,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 12,
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "foo"
                },
                init: null
              }
            ],
            kind: "let"
          },
          right: {
            type: "Identifier",
            start: 16,
            end: 19,
            name: "bar"
          },
          body: {
            type: "BlockStatement",
            start: 21,
            end: 37,
            body: [
              {
                type: "VariableDeclaration",
                start: 23,
                end: 35,
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 27,
                    end: 34,
                    id: {
                      type: "Identifier",
                      start: 27,
                      end: 30,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 33,
                      end: 34,
                      value: 1,
                      raw: "1"
                    }
                  }
                ],
                kind: "let"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "for (let foo of bar) { let foo = 1; }": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 37,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 12,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 12,
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "foo"
                },
                init: null
              }
            ],
            kind: "let"
          },
          right: {
            type: "Identifier",
            start: 16,
            end: 19,
            name: "bar"
          },
          body: {
            type: "BlockStatement",
            start: 21,
            end: 37,
            body: [
              {
                type: "VariableDeclaration",
                start: 23,
                end: 35,
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 27,
                    end: 34,
                    id: {
                      type: "Identifier",
                      start: 27,
                      end: 30,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 33,
                      end: 34,
                      value: 1,
                      raw: "1"
                    }
                  }
                ],
                kind: "let"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class Foo { method(foo) {} method2() { let foo; } }": {
      type: "Program",
      start: 0,
      end: 51,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 51,
          id: {
            type: "Identifier",
            start: 6,
            end: 9,
            name: "Foo"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 10,
            end: 51,
            body: [
              {
                type: "MethodDefinition",
                start: 12,
                end: 26,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 12,
                  end: 18,
                  name: "method"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 18,
                  end: 26,
                  id: null,
                  generator: false,
                  expression: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 19,
                      end: 22,
                      name: "foo"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 24,
                    end: 26,
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 27,
                end: 49,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 27,
                  end: 34,
                  name: "method2"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 34,
                  end: 49,
                  id: null,
                  generator: false,
                  expression: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 37,
                    end: 49,
                    body: [
                      {
                        type: "VariableDeclaration",
                        start: 39,
                        end: 47,
                        declarations: [
                          {
                            type: "VariableDeclarator",
                            start: 43,
                            end: 46,
                            id: {
                              type: "Identifier",
                              start: 43,
                              end: 46,
                              name: "foo"
                            },
                            init: null
                          }
                        ],
                        kind: "let"
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "() => { let foo; }; foo => {}": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 18,
            id: null,
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 6,
              end: 18,
              body: [
                {
                  type: "VariableDeclaration",
                  start: 8,
                  end: 16,
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 12,
                      end: 15,
                      id: {
                        type: "Identifier",
                        start: 12,
                        end: 15,
                        name: "foo"
                      },
                      init: null
                    }
                  ],
                  kind: "let"
                }
              ]
            }
          }
        },
        {
          type: "ExpressionStatement",
          start: 20,
          end: 29,
          expression: {
            type: "ArrowFunctionExpression",
            start: 20,
            end: 29,
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "Identifier",
                start: 20,
                end: 23,
                name: "foo"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 27,
              end: 29,
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "() => { let foo; }; () => { let foo; }": {
      type: "Program",
      start: 0,
      end: 38,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 18,
            id: null,
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 6,
              end: 18,
              body: [
                {
                  type: "VariableDeclaration",
                  start: 8,
                  end: 16,
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 12,
                      end: 15,
                      id: {
                        type: "Identifier",
                        start: 12,
                        end: 15,
                        name: "foo"
                      },
                      init: null
                    }
                  ],
                  kind: "let"
                }
              ]
            }
          }
        },
        {
          type: "ExpressionStatement",
          start: 20,
          end: 38,
          expression: {
            type: "ArrowFunctionExpression",
            start: 20,
            end: 38,
            id: null,
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 26,
              end: 38,
              body: [
                {
                  type: "VariableDeclaration",
                  start: 28,
                  end: 36,
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 32,
                      end: 35,
                      id: {
                        type: "Identifier",
                        start: 32,
                        end: 35,
                        name: "foo"
                      },
                      init: null
                    }
                  ],
                  kind: "let"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "switch(x) { case 1: let foo = 1; } let foo = 1;": {
      type: "Program",
      start: 0,
      end: 47,
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 34,
          discriminant: {
            type: "Identifier",
            start: 7,
            end: 8,
            name: "x"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 12,
              end: 32,
              consequent: [
                {
                  type: "VariableDeclaration",
                  start: 20,
                  end: 32,
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 24,
                      end: 31,
                      id: {
                        type: "Identifier",
                        start: 24,
                        end: 27,
                        name: "foo"
                      },
                      init: {
                        type: "Literal",
                        start: 30,
                        end: 31,
                        value: 1,
                        raw: "1"
                      }
                    }
                  ],
                  kind: "let"
                }
              ],
              test: {
                type: "Literal",
                start: 17,
                end: 18,
                value: 1,
                raw: "1"
              }
            }
          ]
        },
        {
          type: "VariableDeclaration",
          start: 35,
          end: 47,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 39,
              end: 46,
              id: {
                type: "Identifier",
                start: 39,
                end: 42,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 45,
                end: 46,
                value: 1,
                raw: "1"
              }
            }
          ],
          kind: "let"
        }
      ],
      sourceType: "script"
    },
    "'use strict'; function foo() { let foo = 1; }": {
      type: "Program",
      start: 0,
      end: 45,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            value: "use strict",
            raw: "'use strict'"
          }
        },
        {
          type: "FunctionDeclaration",
          start: 14,
          end: 45,
          id: {
            type: "Identifier",
            start: 23,
            end: 26,
            name: "foo"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 29,
            end: 45,
            body: [
              {
                type: "VariableDeclaration",
                start: 31,
                end: 43,
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 35,
                    end: 42,
                    id: {
                      type: "Identifier",
                      start: 35,
                      end: 38,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 41,
                      end: 42,
                      value: 1,
                      raw: "1"
                    }
                  }
                ],
                kind: "let"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "let foo = 1; function x() { var foo = 1; }": {
      type: "Program",
      start: 0,
      end: 42,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 11,
                value: 1,
                raw: "1"
              }
            }
          ],
          kind: "let"
        },
        {
          type: "FunctionDeclaration",
          start: 13,
          end: 42,
          id: {
            type: "Identifier",
            start: 22,
            end: 23,
            name: "x"
          },
          generator: false,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 26,
            end: 42,
            body: [
              {
                type: "VariableDeclaration",
                start: 28,
                end: 40,
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 32,
                    end: 39,
                    id: {
                      type: "Identifier",
                      start: 32,
                      end: 35,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 38,
                      end: 39,
                      value: 1,
                      raw: "1"
                    }
                  }
                ],
                kind: "var"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "[...foo, bar = 1]": {
      type: "Program",
      start: 0,
      end: 17,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          expression: {
            type: "ArrayExpression",
            start: 0,
            end: 17,
            elements: [
              {
                type: "SpreadElement",
                start: 1,
                end: 7,
                argument: {
                  type: "Identifier",
                  start: 4,
                  end: 7,
                  name: "foo"
                }
              },
              {
                type: "AssignmentExpression",
                start: 9,
                end: 16,
                operator: "=",
                left: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "bar"
                },
                right: {
                  type: "Literal",
                  start: 15,
                  end: 16,
                  value: 1,
                  raw: "1"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "for (var a of /b/) {}": {
      type: "Program",
      start: 0,
      end: 21,
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 21,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 10,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 10,
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  name: "a"
                },
                init: null
              }
            ],
            kind: "var"
          },
          right: {
            type: "Literal",
            start: 14,
            end: 17,
            value: {},
            raw: "/b/",
            regex: {
              pattern: "b",
              flags: ""
            }
          },
          body: {
            type: "BlockStatement",
            start: 19,
            end: 21,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "for (var {a} of /b/) {}": {
      type: "Program",
      start: 0,
      end: 23,
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 23,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 12,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 12,
                id: {
                  type: "ObjectPattern",
                  start: 9,
                  end: 12,
                  properties: [
                    {
                      type: "Property",
                      start: 10,
                      end: 11,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "a"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "a"
                      }
                    }
                  ]
                },
                init: null
              }
            ],
            kind: "var"
          },
          right: {
            type: "Literal",
            start: 16,
            end: 19,
            value: {},
            raw: "/b/",
            regex: {
              pattern: "b",
              flags: ""
            }
          },
          body: {
            type: "BlockStatement",
            start: 21,
            end: 23,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "for (let {a} of /b/) {}": {
      type: "Program",
      start: 0,
      end: 23,
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 23,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 12,
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 12,
                id: {
                  type: "ObjectPattern",
                  start: 9,
                  end: 12,
                  properties: [
                    {
                      type: "Property",
                      start: 10,
                      end: 11,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "a"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "a"
                      }
                    }
                  ]
                },
                init: null
              }
            ],
            kind: "let"
          },
          right: {
            type: "Literal",
            start: 16,
            end: 19,
            value: {},
            raw: "/b/",
            regex: {
              pattern: "b",
              flags: ""
            }
          },
          body: {
            type: "BlockStatement",
            start: 21,
            end: 23,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function* bar() { yield /re/ }": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "bar"
          },
          generator: true,
          expression: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 16,
            end: 30,
            body: [
              {
                type: "ExpressionStatement",
                start: 18,
                end: 28,
                expression: {
                  type: "YieldExpression",
                  start: 18,
                  end: 28,
                  delegate: false,
                  argument: {
                    type: "Literal",
                    start: 24,
                    end: 28,
                    value: {},
                    raw: "/re/",
                    regex: {
                      pattern: "re",
                      flags: ""
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "() => {}\n/re/": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 8,
            id: null,
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 6,
              end: 8,
              body: []
            }
          }
        },
        {
          type: "ExpressionStatement",
          start: 9,
          end: 13,
          expression: {
            type: "Literal",
            start: 9,
            end: 13,
            value: {},
            raw: "/re/",
            regex: {
              pattern: "re",
              flags: ""
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(() => {}) + 2": {
      type: "Program",
      start: 0,
      end: 14,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 14,
            left: {
              type: "ArrowFunctionExpression",
              start: 1,
              end: 9,
              id: null,
              generator: false,
              expression: false,
              params: [],
              body: {
                type: "BlockStatement",
                start: 7,
                end: 9,
                body: []
              }
            },
            operator: "+",
            right: {
              type: "Literal",
              start: 13,
              end: 14,
              value: 2,
              raw: "2"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(x) => {} + 2": {
      type: "Error",
      message: "Unexpected token (1:10)"
    },
    "x **= 42": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "x ** y": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "-a * 5": {
      type: "Program",
      start: 0,
      end: 6,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            left: {
              type: "UnaryExpression",
              start: 0,
              end: 2,
              operator: "-",
              prefix: true,
              argument: {
                type: "Identifier",
                start: 1,
                end: 2,
                name: "a"
              }
            },
            operator: "*",
            right: {
              type: "Literal",
              start: 5,
              end: 6,
              value: 5,
              raw: "5"
            }
          }
        }
      ],
      sourceType: "script"
    }
  },
  "es8": {
    "undefined": {
      type: "Program",
      start: 0,
      end: 9,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          expression: {
            type: "Identifier",
            start: 0,
            end: 9,
            name: "undefined"
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { }": {
      type: "Program",
      start: 0,
      end: 18,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 18,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 15,
            end: 18,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo() { }": {
      type: "Program",
      start: 0,
      end: 24,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 24,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: true,
          params: [],
          body: {
            type: "BlockStatement",
            start: 21,
            end: 24,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async\nfunction foo() { }": {
      type: "Program",
      start: 0,
      end: 24,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          expression: {
            type: "Identifier",
            start: 0,
            end: 5,
            name: "async"
          }
        },
        {
          type: "FunctionDeclaration",
          start: 6,
          end: 24,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 21,
            end: 24,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function* foo() { }": {
      type: "Error",
      message: "Unexpected token (1:14)"
    },
    "async function await() { }": {
      type: "Program",
      start: 0,
      end: 26,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 26,
          id: {
            type: "Identifier",
            start: 15,
            end: 20,
            name: "await"
          },
          generator: false,
          expression: false,
          async: true,
          params: [],
          body: {
            type: "BlockStatement",
            start: 23,
            end: 26,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function wrap() {\nasync function await() { }\n}": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (2:15)"
    },
    "async function foo(await) { }": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:19)"
    },
    "async function foo() { return {await} }": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:31)"
    },
    "(function foo() { })": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 19,
            id: {
              type: "Identifier",
              start: 10,
              end: 13,
              name: "foo"
            },
            generator: false,
            expression: false,
            async: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 16,
              end: 19,
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(async function foo() { })": {
      type: "Program",
      start: 0,
      end: 26,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 26,
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 25,
            id: {
              type: "Identifier",
              start: 16,
              end: 19,
              name: "foo"
            },
            generator: false,
            expression: false,
            async: true,
            params: [],
            body: {
              type: "BlockStatement",
              start: 22,
              end: 25,
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(async\nfunction foo() { })": {
      type: "Error",
      message: "Unexpected token (2:0)"
    },
    "(async function* foo() { })": {
      type: "Error",
      message: "Unexpected token (1:15)"
    },
    "(async function await() { })": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:16)"
    },
    "(async function foo(await) { })": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:20)"
    },
    "(async function foo() { return {await} })": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:32)"
    },
    "a => a": {
      type: "Program",
      start: 0,
      end: 6,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 6,
            id: null,
            generator: false,
            expression: true,
            async: false,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                name: "a"
              }
            ],
            body: {
              type: "Identifier",
              start: 5,
              end: 6,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a) => a": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 8,
            id: null,
            generator: false,
            expression: true,
            async: false,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                name: "a"
              }
            ],
            body: {
              type: "Identifier",
              start: 7,
              end: 8,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async a => a": {
      type: "Program",
      start: 0,
      end: 12,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 12,
            id: null,
            generator: false,
            expression: true,
            async: true,
            params: [
              {
                type: "Identifier",
                start: 6,
                end: 7,
                name: "a"
              }
            ],
            body: {
              type: "Identifier",
              start: 11,
              end: 12,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async () => a": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 13,
            id: null,
            generator: false,
            expression: true,
            async: true,
            params: [],
            body: {
              type: "Identifier",
              start: 12,
              end: 13,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async (a, b) => a": {
      type: "Program",
      start: 0,
      end: 17,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 17,
            id: null,
            generator: false,
            expression: true,
            async: true,
            params: [
              {
                type: "Identifier",
                start: 7,
                end: 8,
                name: "a"
              },
              {
                type: "Identifier",
                start: 10,
                end: 11,
                name: "b"
              }
            ],
            body: {
              type: "Identifier",
              start: 16,
              end: 17,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async ({a = b}) => a": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 20,
            id: null,
            generator: false,
            expression: true,
            async: true,
            params: [
              {
                type: "ObjectPattern",
                start: 7,
                end: 14,
                properties: [
                  {
                    type: "Property",
                    start: 8,
                    end: 13,
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 8,
                      end: 9,
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "AssignmentPattern",
                      start: 8,
                      end: 13,
                      left: {
                        type: "Identifier",
                        start: 8,
                        end: 9,
                        name: "a"
                      },
                      right: {
                        type: "Identifier",
                        start: 12,
                        end: 13,
                        name: "b"
                      }
                    }
                  }
                ]
              }
            ],
            body: {
              type: "Identifier",
              start: 19,
              end: 20,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async ({a = b})": {
      type: "Error",
      message: "Shorthand property assignments are valid only in destructuring patterns (1:10)"
    },
    "async ({a: b = c}) => a": {
      type: "Program",
      start: 0,
      end: 23,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 23,
            id: null,
            generator: false,
            expression: true,
            async: true,
            params: [
              {
                type: "ObjectPattern",
                start: 7,
                end: 17,
                properties: [
                  {
                    type: "Property",
                    start: 8,
                    end: 16,
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 8,
                      end: 9,
                      name: "a"
                    },
                    value: {
                      type: "AssignmentPattern",
                      start: 11,
                      end: 16,
                      left: {
                        type: "Identifier",
                        start: 11,
                        end: 12,
                        name: "b"
                      },
                      right: {
                        type: "Identifier",
                        start: 15,
                        end: 16,
                        name: "c"
                      }
                    },
                    kind: "init"
                  }
                ]
              }
            ],
            body: {
              type: "Identifier",
              start: 22,
              end: 23,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async ({a: b = c})": {
      type: "Program",
      start: 0,
      end: 18,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          expression: {
            type: "CallExpression",
            start: 0,
            end: 18,
            callee: {
              type: "Identifier",
              start: 0,
              end: 5,
              name: "async"
            },
            arguments: [
              {
                type: "ObjectExpression",
                start: 7,
                end: 17,
                properties: [
                  {
                    type: "Property",
                    start: 8,
                    end: 16,
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 8,
                      end: 9,
                      name: "a"
                    },
                    value: {
                      type: "AssignmentExpression",
                      start: 11,
                      end: 16,
                      operator: "=",
                      left: {
                        type: "Identifier",
                        start: 11,
                        end: 12,
                        name: "b"
                      },
                      right: {
                        type: "Identifier",
                        start: 15,
                        end: 16,
                        name: "c"
                      }
                    },
                    kind: "init"
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async\na => a": {
      type: "Program",
      start: 0,
      end: 12,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          expression: {
            type: "Identifier",
            start: 0,
            end: 5,
            name: "async"
          }
        },
        {
          type: "ExpressionStatement",
          start: 6,
          end: 12,
          expression: {
            type: "ArrowFunctionExpression",
            start: 6,
            end: 12,
            id: null,
            generator: false,
            expression: true,
            async: false,
            params: [
              {
                type: "Identifier",
                start: 6,
                end: 7,
                name: "a"
              }
            ],
            body: {
              type: "Identifier",
              start: 11,
              end: 12,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async\n() => a": {
      type: "Error",
      message: "Unexpected token (2:3)"
    },
    "async a\n=> a": {
      type: "Error",
      message: "Unexpected token (2:0)"
    },
    "async ()\n=> a": {
      type: "Error",
      message: "Unexpected token (2:0)"
    },
    "async (await)": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            callee: {
              type: "Identifier",
              start: 0,
              end: 5,
              name: "async"
            },
            arguments: [
              {
                type: "Identifier",
                start: 7,
                end: 12,
                name: "await"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async await => 1": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:6)"
    },
    "async (await) => 1": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:7)"
    },
    "async ({await}) => 1": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:8)"
    },
    "async ({a: await}) => 1": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:11)"
    },
    "async ([await]) => 1": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:8)"
    },
    "async yield => 1": {
      type: "Program",
      start: 0,
      end: 16,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 16,
            id: null,
            generator: false,
            expression: true,
            async: true,
            params: [
              {
                type: "Identifier",
                start: 6,
                end: 11,
                name: "yield"
              }
            ],
            body: {
              type: "Literal",
              start: 15,
              end: 16,
              value: 1,
              raw: "1"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({foo() { }})": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 12,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 11,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 2,
                  end: 5,
                  name: "foo"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 5,
                  end: 11,
                  id: null,
                  generator: false,
                  expression: false,
                  async: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 8,
                    end: 11,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({async foo() { }})": {
      type: "Program",
      start: 0,
      end: 19,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 18,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 17,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 8,
                  end: 11,
                  name: "foo"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 11,
                  end: 17,
                  id: null,
                  generator: false,
                  expression: false,
                  async: true,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 14,
                    end: 17,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({async() { }})": {
      type: "Program",
      start: 0,
      end: 15,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 14,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 13,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 2,
                  end: 7,
                  name: "async"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 7,
                  end: 13,
                  id: null,
                  generator: false,
                  expression: false,
                  async: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 10,
                    end: 13,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({async\nfoo() { }})": {
      type: "Error",
      message: "Unexpected token (2:0)"
    },
    "({async get foo() { }})": {
      type: "Error",
      message: "Unexpected token (1:12)"
    },
    "({async set foo(value) { }})": {
      type: "Error",
      message: "Unexpected token (1:12)"
    },
    "({async* foo() { }})": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "({async await() { }})": {
      type: "Program",
      start: 0,
      end: 21,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 20,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 19,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 8,
                  end: 13,
                  name: "await"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 13,
                  end: 19,
                  id: null,
                  generator: false,
                  expression: false,
                  async: true,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 16,
                    end: 19,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async function wrap() {\n({async await() { }})\n}": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (2:8)"
    },
    "({async foo() { var await }})": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:20)"
    },
    "({async foo(await) { }})": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:12)"
    },
    "({async foo() { return {await} }})": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:24)"
    },
    "({async foo: 1})": {
      type: "Error",
      message: "Unexpected token (1:11)"
    },
    "class A {foo() { }}": {
      type: "Program",
      start: 0,
      end: 19,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 19,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 19,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 18,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "foo"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 18,
                  id: null,
                  generator: false,
                  expression: false,
                  async: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 18,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {async foo() { }}": {
      type: "Program",
      start: 0,
      end: 25,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 25,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 25,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 24,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 15,
                  end: 18,
                  name: "foo"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 18,
                  end: 24,
                  id: null,
                  generator: false,
                  expression: false,
                  async: true,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 21,
                    end: 24,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static async foo() { }}": {
      type: "Program",
      start: 0,
      end: 32,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 32,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 32,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 31,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 22,
                  end: 25,
                  name: "foo"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 25,
                  end: 31,
                  id: null,
                  generator: false,
                  expression: false,
                  async: true,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 28,
                    end: 31,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {async() { }}": {
      type: "Program",
      start: 0,
      end: 21,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 21,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 21,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 20,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 14,
                  name: "async"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 14,
                  end: 20,
                  id: null,
                  generator: false,
                  expression: false,
                  async: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 17,
                    end: 20,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static async() { }}": {
      type: "Program",
      start: 0,
      end: 28,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 28,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 28,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 27,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 16,
                  end: 21,
                  name: "async"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 21,
                  end: 27,
                  id: null,
                  generator: false,
                  expression: false,
                  async: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 24,
                    end: 27,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {*async() { }}": {
      type: "Program",
      start: 0,
      end: 22,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 22,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 22,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 21,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 15,
                  name: "async"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 15,
                  end: 21,
                  id: null,
                  generator: true,
                  expression: false,
                  async: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 18,
                    end: 21,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static* async() { }}": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 29,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 29,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 28,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 17,
                  end: 22,
                  name: "async"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 22,
                  end: 28,
                  id: null,
                  generator: true,
                  expression: false,
                  async: false,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 25,
                    end: 28,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {async\nfoo() { }}": {
      type: "Error",
      message: "Unexpected token (2:0)"
    },
    "class A {static async\nfoo() { }}": {
      type: "Error",
      message: "Unexpected token (2:0)"
    },
    "class A {async constructor() { }}": {
      type: "Error",
      message: "Constructor can't be an async method (1:15)"
    },
    "class A {async get foo() { }}": {
      type: "Error",
      message: "Unexpected token (1:19)"
    },
    "class A {async set foo(value) { }}": {
      type: "Error",
      message: "Unexpected token (1:19)"
    },
    "class A {async* foo() { }}": {
      type: "Error",
      message: "Unexpected token (1:14)"
    },
    "class A {static async get foo() { }}": {
      type: "Error",
      message: "Unexpected token (1:26)"
    },
    "class A {static async set foo(value) { }}": {
      type: "Error",
      message: "Unexpected token (1:26)"
    },
    "class A {static async* foo() { }}": {
      type: "Error",
      message: "Unexpected token (1:21)"
    },
    "class A {async await() { }}": {
      type: "Program",
      start: 0,
      end: 27,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 27,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 27,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 26,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 15,
                  end: 20,
                  name: "await"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 20,
                  end: 26,
                  id: null,
                  generator: false,
                  expression: false,
                  async: true,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 23,
                    end: 26,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static async await() { }}": {
      type: "Program",
      start: 0,
      end: 34,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 34,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 34,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 33,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 22,
                  end: 27,
                  name: "await"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 27,
                  end: 33,
                  id: null,
                  generator: false,
                  expression: false,
                  async: true,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 30,
                    end: 33,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async function wrap() {\nclass A {async await() { }}\n}": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (2:15)"
    },
    "class A {async foo() { var await }}": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:27)"
    },
    "class A {async foo(await) { }}": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:19)"
    },
    "class A {async foo() { return {await} }}": {
      type: "Error",
      message: "Can not use 'await' as identifier inside an async function (1:31)"
    },
    "await": {
      type: "Program",
      start: 0,
      end: 5,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          expression: {
            type: "Identifier",
            start: 0,
            end: 5,
            name: "await"
          }
        }
      ],
      sourceType: "script"
    },
    "await a": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "async function foo(a, b) { await a }": {
      type: "Program",
      start: 0,
      end: 36,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 36,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: true,
          params: [
            {
              type: "Identifier",
              start: 19,
              end: 20,
              name: "a"
            },
            {
              type: "Identifier",
              start: 22,
              end: 23,
              name: "b"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 25,
            end: 36,
            body: [
              {
                type: "ExpressionStatement",
                start: 27,
                end: 34,
                expression: {
                  type: "AwaitExpression",
                  start: 27,
                  end: 34,
                  argument: {
                    type: "Identifier",
                    start: 33,
                    end: 34,
                    name: "a"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(async function foo(a) { await a })": {
      type: "Program",
      start: 0,
      end: 35,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 35,
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 34,
            id: {
              type: "Identifier",
              start: 16,
              end: 19,
              name: "foo"
            },
            generator: false,
            expression: false,
            async: true,
            params: [
              {
                type: "Identifier",
                start: 20,
                end: 21,
                name: "a"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 23,
              end: 34,
              body: [
                {
                  type: "ExpressionStatement",
                  start: 25,
                  end: 32,
                  expression: {
                    type: "AwaitExpression",
                    start: 25,
                    end: 32,
                    argument: {
                      type: "Identifier",
                      start: 31,
                      end: 32,
                      name: "a"
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(async (a) => await a)": {
      type: "Program",
      start: 0,
      end: 22,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          expression: {
            type: "ArrowFunctionExpression",
            start: 1,
            end: 21,
            id: null,
            generator: false,
            expression: true,
            async: true,
            params: [
              {
                type: "Identifier",
                start: 8,
                end: 9,
                name: "a"
              }
            ],
            body: {
              type: "AwaitExpression",
              start: 14,
              end: 21,
              argument: {
                type: "Identifier",
                start: 20,
                end: 21,
                name: "a"
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({async foo(a) { await a }})": {
      type: "Program",
      start: 0,
      end: 28,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 28,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 27,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 26,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 8,
                  end: 11,
                  name: "foo"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 11,
                  end: 26,
                  id: null,
                  generator: false,
                  expression: false,
                  async: true,
                  params: [
                    {
                      type: "Identifier",
                      start: 12,
                      end: 13,
                      name: "a"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 26,
                    body: [
                      {
                        type: "ExpressionStatement",
                        start: 17,
                        end: 24,
                        expression: {
                          type: "AwaitExpression",
                          start: 17,
                          end: 24,
                          argument: {
                            type: "Identifier",
                            start: 23,
                            end: 24,
                            name: "a"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(class {async foo(a) { await a }})": {
      type: "Program",
      start: 0,
      end: 34,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 34,
          expression: {
            type: "ClassExpression",
            start: 1,
            end: 33,
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 7,
              end: 33,
              body: [
                {
                  type: "MethodDefinition",
                  start: 8,
                  end: 32,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 14,
                    end: 17,
                    name: "foo"
                  },
                  static: false,
                  kind: "method",
                  value: {
                    type: "FunctionExpression",
                    start: 17,
                    end: 32,
                    id: null,
                    generator: false,
                    expression: false,
                    async: true,
                    params: [
                      {
                        type: "Identifier",
                        start: 18,
                        end: 19,
                        name: "a"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 21,
                      end: 32,
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 23,
                          end: 30,
                          expression: {
                            type: "AwaitExpression",
                            start: 23,
                            end: 30,
                            argument: {
                              type: "Identifier",
                              start: 29,
                              end: 30,
                              name: "a"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo(a, b) { await a + await b }": {
      type: "Program",
      start: 0,
      end: 46,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 46,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: true,
          params: [
            {
              type: "Identifier",
              start: 19,
              end: 20,
              name: "a"
            },
            {
              type: "Identifier",
              start: 22,
              end: 23,
              name: "b"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 25,
            end: 46,
            body: [
              {
                type: "ExpressionStatement",
                start: 27,
                end: 44,
                expression: {
                  type: "BinaryExpression",
                  start: 27,
                  end: 44,
                  left: {
                    type: "AwaitExpression",
                    start: 27,
                    end: 34,
                    argument: {
                      type: "Identifier",
                      start: 33,
                      end: 34,
                      name: "a"
                    }
                  },
                  operator: "+",
                  right: {
                    type: "AwaitExpression",
                    start: 37,
                    end: 44,
                    argument: {
                      type: "Identifier",
                      start: 43,
                      end: 44,
                      name: "b"
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { await + 1 }": {
      type: "Program",
      start: 0,
      end: 28,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 28,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 15,
            end: 28,
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 26,
                expression: {
                  type: "BinaryExpression",
                  start: 17,
                  end: 26,
                  left: {
                    type: "Identifier",
                    start: 17,
                    end: 22,
                    name: "await"
                  },
                  operator: "+",
                  right: {
                    type: "Literal",
                    start: 25,
                    end: 26,
                    value: 1,
                    raw: "1"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo() { await + 1 }": {
      type: "Program",
      start: 0,
      end: 34,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 34,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: true,
          params: [],
          body: {
            type: "BlockStatement",
            start: 21,
            end: 34,
            body: [
              {
                type: "ExpressionStatement",
                start: 23,
                end: 32,
                expression: {
                  type: "AwaitExpression",
                  start: 23,
                  end: 32,
                  argument: {
                    type: "UnaryExpression",
                    start: 29,
                    end: 32,
                    operator: "+",
                    prefix: true,
                    argument: {
                      type: "Literal",
                      start: 31,
                      end: 32,
                      value: 1,
                      raw: "1"
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo() { await }": {
      type: "Error",
      message: "Unexpected token (1:29)"
    },
    "(async function foo() { await })": {
      type: "Error",
      message: "Unexpected token (1:30)"
    },
    "async () => await": {
      type: "Error",
      message: "Unexpected token (1:17)"
    },
    "({async foo() { await }})": {
      type: "Error",
      message: "Unexpected token (1:22)"
    },
    "(class {async foo() { await }})": {
      type: "Error",
      message: "Unexpected token (1:28)"
    },
    "async function foo(a = await b) {}": {
      type: "Error",
      message: "Await expression cannot be a default value (1:23)"
    },
    "(async function foo(a = await b) {})": {
      type: "Error",
      message: "Await expression cannot be a default value (1:24)"
    },
    "async (a = await b) => {}": {
      type: "Error",
      message: "Unexpected token (1:17)"
    },
    "async function wrapper() {\nasync (a = await b) => {}\n}": {
      type: "Error",
      message: "Await expression cannot be a default value (2:11)"
    },
    "({async foo(a = await b) {}})": {
      type: "Error",
      message: "Await expression cannot be a default value (1:16)"
    },
    "(class {async foo(a = await b) {}})": {
      type: "Error",
      message: "Await expression cannot be a default value (1:22)"
    },
    "async function foo(a = class extends (await b) {}) {}": {
      type: "Error",
      message: "Await expression cannot be a default value (1:38)"
    },
    "async function foo(a = async function foo() { await b }) {}": {
      type: "Program",
      start: 0,
      end: 59,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 59,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: true,
          params: [
            {
              type: "AssignmentPattern",
              start: 19,
              end: 55,
              left: {
                type: "Identifier",
                start: 19,
                end: 20,
                name: "a"
              },
              right: {
                type: "FunctionExpression",
                start: 23,
                end: 55,
                id: {
                  type: "Identifier",
                  start: 38,
                  end: 41,
                  name: "foo"
                },
                generator: false,
                expression: false,
                async: true,
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 44,
                  end: 55,
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 46,
                      end: 53,
                      expression: {
                        type: "AwaitExpression",
                        start: 46,
                        end: 53,
                        argument: {
                          type: "Identifier",
                          start: 52,
                          end: 53,
                          name: "b"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 57,
            end: 59,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo(a = async () => await b) {}": {
      type: "Program",
      start: 0,
      end: 46,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 46,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: true,
          params: [
            {
              type: "AssignmentPattern",
              start: 19,
              end: 42,
              left: {
                type: "Identifier",
                start: 19,
                end: 20,
                name: "a"
              },
              right: {
                type: "ArrowFunctionExpression",
                start: 23,
                end: 42,
                id: null,
                generator: false,
                expression: true,
                async: true,
                params: [],
                body: {
                  type: "AwaitExpression",
                  start: 35,
                  end: 42,
                  argument: {
                    type: "Identifier",
                    start: 41,
                    end: 42,
                    name: "b"
                  }
                }
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 44,
            end: 46,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo(a = {async bar() { await b }}) {}": {
      type: "Program",
      start: 0,
      end: 52,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 52,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: true,
          params: [
            {
              type: "AssignmentPattern",
              start: 19,
              end: 48,
              left: {
                type: "Identifier",
                start: 19,
                end: 20,
                name: "a"
              },
              right: {
                type: "ObjectExpression",
                start: 23,
                end: 48,
                properties: [
                  {
                    type: "Property",
                    start: 24,
                    end: 47,
                    method: true,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 30,
                      end: 33,
                      name: "bar"
                    },
                    kind: "init",
                    value: {
                      type: "FunctionExpression",
                      start: 33,
                      end: 47,
                      id: null,
                      generator: false,
                      expression: false,
                      async: true,
                      params: [],
                      body: {
                        type: "BlockStatement",
                        start: 36,
                        end: 47,
                        body: [
                          {
                            type: "ExpressionStatement",
                            start: 38,
                            end: 45,
                            expression: {
                              type: "AwaitExpression",
                              start: 38,
                              end: 45,
                              argument: {
                                type: "Identifier",
                                start: 44,
                                end: 45,
                                name: "b"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 50,
            end: 52,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo(a = class {async bar() { await b }}) {}": {
      type: "Program",
      start: 0,
      end: 58,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 58,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: true,
          params: [
            {
              type: "AssignmentPattern",
              start: 19,
              end: 54,
              left: {
                type: "Identifier",
                start: 19,
                end: 20,
                name: "a"
              },
              right: {
                type: "ClassExpression",
                start: 23,
                end: 54,
                id: null,
                superClass: null,
                body: {
                  type: "ClassBody",
                  start: 29,
                  end: 54,
                  body: [
                    {
                      type: "MethodDefinition",
                      start: 30,
                      end: 53,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 36,
                        end: 39,
                        name: "bar"
                      },
                      static: false,
                      kind: "method",
                      value: {
                        type: "FunctionExpression",
                        start: 39,
                        end: 53,
                        id: null,
                        generator: false,
                        expression: false,
                        async: true,
                        params: [],
                        body: {
                          type: "BlockStatement",
                          start: 42,
                          end: 53,
                          body: [
                            {
                              type: "ExpressionStatement",
                              start: 44,
                              end: 51,
                              expression: {
                                type: "AwaitExpression",
                                start: 44,
                                end: 51,
                                argument: {
                                  type: "Identifier",
                                  start: 50,
                                  end: 51,
                                  name: "b"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          body: {
            type: "BlockStatement",
            start: 56,
            end: 58,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function wrap() {\n(a = await b)\n}": {
      type: "Program",
      start: 0,
      end: 39,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 39,
          id: {
            type: "Identifier",
            start: 15,
            end: 19,
            name: "wrap"
          },
          generator: false,
          expression: false,
          async: true,
          params: [],
          body: {
            type: "BlockStatement",
            start: 22,
            end: 39,
            body: [
              {
                type: "ExpressionStatement",
                start: 24,
                end: 37,
                expression: {
                  type: "AssignmentExpression",
                  start: 25,
                  end: 36,
                  operator: "=",
                  left: {
                    type: "Identifier",
                    start: 25,
                    end: 26,
                    name: "a"
                  },
                  right: {
                    type: "AwaitExpression",
                    start: 29,
                    end: 36,
                    argument: {
                      type: "Identifier",
                      start: 35,
                      end: 36,
                      name: "b"
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async function wrap() {\n(a = await b) => a\n}": {
      type: "Error",
      message: "Await expression cannot be a default value (2:5)"
    },
    "async function wrap() {\n({a = await b} = obj)\n}": {
      type: "Program",
      start: 0,
      end: 47,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 47,
          id: {
            type: "Identifier",
            start: 15,
            end: 19,
            name: "wrap"
          },
          generator: false,
          expression: false,
          async: true,
          params: [],
          body: {
            type: "BlockStatement",
            start: 22,
            end: 47,
            body: [
              {
                type: "ExpressionStatement",
                start: 24,
                end: 45,
                expression: {
                  type: "AssignmentExpression",
                  start: 25,
                  end: 44,
                  operator: "=",
                  left: {
                    type: "ObjectPattern",
                    start: 25,
                    end: 38,
                    properties: [
                      {
                        type: "Property",
                        start: 26,
                        end: 37,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 26,
                          end: 27,
                          name: "a"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 26,
                          end: 37,
                          left: {
                            type: "Identifier",
                            start: 26,
                            end: 27,
                            name: "a"
                          },
                          right: {
                            type: "AwaitExpression",
                            start: 30,
                            end: 37,
                            argument: {
                              type: "Identifier",
                              start: 36,
                              end: 37,
                              name: "b"
                            }
                          }
                        }
                      }
                    ]
                  },
                  right: {
                    type: "Identifier",
                    start: 41,
                    end: 44,
                    name: "obj"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async function wrap() {\n({a = await b} = obj) => a\n}": {
      type: "Error",
      message: "Await expression cannot be a default value (2:6)"
    },
    "function* wrap() {\nasync(a = yield b)\n}": {
      type: "Program",
      start: 0,
      end: 39,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 39,
          id: {
            type: "Identifier",
            start: 10,
            end: 14,
            name: "wrap"
          },
          generator: true,
          expression: false,
          async: false,
          params: [],
          body: {
            type: "BlockStatement",
            start: 17,
            end: 39,
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 37,
                expression: {
                  type: "CallExpression",
                  start: 19,
                  end: 37,
                  callee: {
                    type: "Identifier",
                    start: 19,
                    end: 24,
                    name: "async"
                  },
                  arguments: [
                    {
                      type: "AssignmentExpression",
                      start: 25,
                      end: 36,
                      operator: "=",
                      left: {
                        type: "Identifier",
                        start: 25,
                        end: 26,
                        name: "a"
                      },
                      right: {
                        type: "YieldExpression",
                        start: 29,
                        end: 36,
                        delegate: false,
                        argument: {
                          type: "Identifier",
                          start: 35,
                          end: 36,
                          name: "b"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function* wrap() {\nasync(a = yield b) => a\n}": {
      type: "Error",
      message: "Yield expression cannot be a default value (2:10)"
    },
    "f = ({ w = counter(), x = counter(), y = counter(), z = counter() } = { w: null, x: 0, y: false, z: '' }) => {}": {
      type: "Program",
      start: 0,
      end: 111,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 111,
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 111,
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              name: "f"
            },
            right: {
              type: "ArrowFunctionExpression",
              start: 4,
              end: 111,
              id: null,
              generator: false,
              expression: false,
              async: false,
              params: [
                {
                  type: "AssignmentPattern",
                  start: 5,
                  end: 104,
                  left: {
                    type: "ObjectPattern",
                    start: 5,
                    end: 67,
                    properties: [
                      {
                        type: "Property",
                        start: 7,
                        end: 20,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 7,
                          end: 8,
                          name: "w"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 7,
                          end: 20,
                          left: {
                            type: "Identifier",
                            start: 7,
                            end: 8,
                            name: "w"
                          },
                          right: {
                            type: "CallExpression",
                            start: 11,
                            end: 20,
                            callee: {
                              type: "Identifier",
                              start: 11,
                              end: 18,
                              name: "counter"
                            },
                            arguments: []
                          }
                        }
                      },
                      {
                        type: "Property",
                        start: 22,
                        end: 35,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 22,
                          end: 23,
                          name: "x"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 22,
                          end: 35,
                          left: {
                            type: "Identifier",
                            start: 22,
                            end: 23,
                            name: "x"
                          },
                          right: {
                            type: "CallExpression",
                            start: 26,
                            end: 35,
                            callee: {
                              type: "Identifier",
                              start: 26,
                              end: 33,
                              name: "counter"
                            },
                            arguments: []
                          }
                        }
                      },
                      {
                        type: "Property",
                        start: 37,
                        end: 50,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 37,
                          end: 38,
                          name: "y"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 37,
                          end: 50,
                          left: {
                            type: "Identifier",
                            start: 37,
                            end: 38,
                            name: "y"
                          },
                          right: {
                            type: "CallExpression",
                            start: 41,
                            end: 50,
                            callee: {
                              type: "Identifier",
                              start: 41,
                              end: 48,
                              name: "counter"
                            },
                            arguments: []
                          }
                        }
                      },
                      {
                        type: "Property",
                        start: 52,
                        end: 65,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 52,
                          end: 53,
                          name: "z"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 52,
                          end: 65,
                          left: {
                            type: "Identifier",
                            start: 52,
                            end: 53,
                            name: "z"
                          },
                          right: {
                            type: "CallExpression",
                            start: 56,
                            end: 65,
                            callee: {
                              type: "Identifier",
                              start: 56,
                              end: 63,
                              name: "counter"
                            },
                            arguments: []
                          }
                        }
                      }
                    ]
                  },
                  right: {
                    type: "ObjectExpression",
                    start: 70,
                    end: 104,
                    properties: [
                      {
                        type: "Property",
                        start: 72,
                        end: 79,
                        method: false,
                        shorthand: false,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 72,
                          end: 73,
                          name: "w"
                        },
                        value: {
                          type: "Literal",
                          start: 75,
                          end: 79,
                          value: null,
                          raw: "null"
                        },
                        kind: "init"
                      },
                      {
                        type: "Property",
                        start: 81,
                        end: 85,
                        method: false,
                        shorthand: false,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 81,
                          end: 82,
                          name: "x"
                        },
                        value: {
                          type: "Literal",
                          start: 84,
                          end: 85,
                          value: 0,
                          raw: "0"
                        },
                        kind: "init"
                      },
                      {
                        type: "Property",
                        start: 87,
                        end: 95,
                        method: false,
                        shorthand: false,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 87,
                          end: 88,
                          name: "y"
                        },
                        value: {
                          type: "Literal",
                          start: 90,
                          end: 95,
                          value: false,
                          raw: "false"
                        },
                        kind: "init"
                      },
                      {
                        type: "Property",
                        start: 97,
                        end: 102,
                        method: false,
                        shorthand: false,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 97,
                          end: 98,
                          name: "z"
                        },
                        value: {
                          type: "Literal",
                          start: 100,
                          end: 102,
                          value: "",
                          raw: "''"
                        },
                        kind: "init"
                      }
                    ]
                  }
                }
              ],
              body: {
                type: "BlockStatement",
                start: 109,
                end: 111,
                body: []
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ async: true })": {
      type: "Program",
      start: 0,
      end: 17,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 16,
            properties: [
              {
                type: "Property",
                start: 3,
                end: 14,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 8,
                  name: "async"
                },
                value: {
                  type: "Literal",
                  start: 10,
                  end: 14,
                  value: true,
                  raw: "true"
                },
                kind: "init"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "if (x) async function f() {}": {
      type: "Program",
      start: 0,
      end: 28,
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 28,
          test: {
            type: "Identifier",
            start: 4,
            end: 5,
            name: "x"
          },
          consequent: {
            type: "FunctionDeclaration",
            start: 7,
            end: 28,
            id: {
              type: "Identifier",
              start: 22,
              end: 23,
              name: "f"
            },
            generator: false,
            expression: false,
            async: true,
            params: [],
            body: {
              type: "BlockStatement",
              start: 26,
              end: 28,
              body: []
            }
          },
          alternate: null
        }
      ],
      sourceType: "script"
    },
    "(async)(a) => 12": {
      type: "Error",
      message: "Unexpected token (1:11)"
    },
    "f = async ((x)) => x": {
      type: "Error",
      message: "Parenthesized pattern (1:11)"
    },
    "function foo(a,) { }": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 20,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          async: false,
          params: [
            {
              type: "Identifier",
              start: 13,
              end: 14,
              name: "a"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 17,
            end: 20,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "(function(a,) { })": {
      type: "Program",
      start: 0,
      end: 18,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 17,
            id: null,
            generator: false,
            expression: false,
            async: false,
            params: [
              {
                type: "Identifier",
                start: 10,
                end: 11,
                name: "a"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 14,
              end: 17,
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a,) => a": {
      type: "Program",
      start: 0,
      end: 9,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 9,
            id: null,
            generator: false,
            expression: true,
            async: false,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                name: "a"
              }
            ],
            body: {
              type: "Identifier",
              start: 8,
              end: 9,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async (a,) => a": {
      type: "Program",
      start: 0,
      end: 15,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 15,
            id: null,
            generator: false,
            expression: true,
            async: true,
            params: [
              {
                type: "Identifier",
                start: 7,
                end: 8,
                name: "a"
              }
            ],
            body: {
              type: "Identifier",
              start: 14,
              end: 15,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({foo(a,) {}})": {
      type: "Program",
      start: 0,
      end: 14,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 13,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 12,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 2,
                  end: 5,
                  name: "foo"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 5,
                  end: 12,
                  id: null,
                  generator: false,
                  expression: false,
                  async: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 6,
                      end: 7,
                      name: "a"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 10,
                    end: 12,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {foo(a,) {}}": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 20,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 20,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 19,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "foo"
                },
                static: false,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 19,
                  id: null,
                  generator: false,
                  expression: false,
                  async: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 13,
                      end: 14,
                      name: "a"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 17,
                    end: 19,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static foo(a,) {}}": {
      type: "Program",
      start: 0,
      end: 27,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 27,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 27,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 26,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 16,
                  end: 19,
                  name: "foo"
                },
                static: true,
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 19,
                  end: 26,
                  id: null,
                  generator: false,
                  expression: false,
                  async: false,
                  params: [
                    {
                      type: "Identifier",
                      start: 20,
                      end: 21,
                      name: "a"
                    }
                  ],
                  body: {
                    type: "BlockStatement",
                    start: 24,
                    end: 26,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(class {foo(a,) {}})": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          expression: {
            type: "ClassExpression",
            start: 1,
            end: 19,
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 7,
              end: 19,
              body: [
                {
                  type: "MethodDefinition",
                  start: 8,
                  end: 18,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 8,
                    end: 11,
                    name: "foo"
                  },
                  static: false,
                  kind: "method",
                  value: {
                    type: "FunctionExpression",
                    start: 11,
                    end: 18,
                    id: null,
                    generator: false,
                    expression: false,
                    async: false,
                    params: [
                      {
                        type: "Identifier",
                        start: 12,
                        end: 13,
                        name: "a"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 16,
                      end: 18,
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(class {static foo(a,) {}})": {
      type: "Program",
      start: 0,
      end: 27,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          expression: {
            type: "ClassExpression",
            start: 1,
            end: 26,
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 7,
              end: 26,
              body: [
                {
                  type: "MethodDefinition",
                  start: 8,
                  end: 25,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 15,
                    end: 18,
                    name: "foo"
                  },
                  static: true,
                  kind: "method",
                  value: {
                    type: "FunctionExpression",
                    start: 18,
                    end: 25,
                    id: null,
                    generator: false,
                    expression: false,
                    async: false,
                    params: [
                      {
                        type: "Identifier",
                        start: 19,
                        end: 20,
                        name: "a"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 23,
                      end: 25,
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo(a,)": {
      type: "Program",
      start: 0,
      end: 7,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          expression: {
            type: "CallExpression",
            start: 0,
            end: 7,
            callee: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            arguments: [
              {
                type: "Identifier",
                start: 4,
                end: 5,
                name: "a"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "new foo(a,)": {
      type: "Program",
      start: 0,
      end: 11,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          expression: {
            type: "NewExpression",
            start: 0,
            end: 11,
            callee: {
              type: "Identifier",
              start: 4,
              end: 7,
              name: "foo"
            },
            arguments: [
              {
                type: "Identifier",
                start: 8,
                end: 9,
                name: "a"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "foo(...a,)": {
      type: "Program",
      start: 0,
      end: 10,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          expression: {
            type: "CallExpression",
            start: 0,
            end: 10,
            callee: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            arguments: [
              {
                type: "SpreadElement",
                start: 4,
                end: 8,
                argument: {
                  type: "Identifier",
                  start: 7,
                  end: 8,
                  name: "a"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "new foo(...a,)": {
      type: "Program",
      start: 0,
      end: 14,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          expression: {
            type: "NewExpression",
            start: 0,
            end: 14,
            callee: {
              type: "Identifier",
              start: 4,
              end: 7,
              name: "foo"
            },
            arguments: [
              {
                type: "SpreadElement",
                start: 8,
                end: 12,
                argument: {
                  type: "Identifier",
                  start: 11,
                  end: 12,
                  name: "a"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo(...a,) { }": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:17)"
    },
    "(function(...a,) { })": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:14)"
    },
    "(...a,) => a": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:5)"
    },
    "async (...a,) => a": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:11)"
    },
    "({foo(...a,) {}})": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:10)"
    },
    "class A {foo(...a,) {}}": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:17)"
    },
    "class A {static foo(...a,) {}}": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:24)"
    },
    "(class {foo(...a,) {}})": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:16)"
    },
    "(class {static foo(...a,) {}})": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:23)"
    },
    "function foo(,) { }": {
      type: "Error",
      message: "Unexpected token (1:13)"
    },
    "(function(,) { })": {
      type: "Error",
      message: "Unexpected token (1:10)"
    },
    "(,) => a": {
      type: "Error",
      message: "Unexpected token (1:1)"
    },
    "async (,) => a": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "({foo(,) {}})": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "class A {foo(,) {}}": {
      type: "Error",
      message: "Unexpected token (1:13)"
    },
    "class A {static foo(,) {}}": {
      type: "Error",
      message: "Unexpected token (1:20)"
    },
    "(class {foo(,) {}})": {
      type: "Error",
      message: "Unexpected token (1:12)"
    },
    "(class {static foo(,) {}})": {
      type: "Error",
      message: "Unexpected token (1:19)"
    },
    "(a,)": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "foo`\\unicode`": {
      type: "Error",
      message: "Bad character escape sequence (1:6)"
    },
    "foo`\\xylophone`": {
      type: "Error",
      message: "Bad character escape sequence (1:6)"
    }
  },
  "es6-module": {
    "export var document": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          range: [
            0,
            19
          ],
          declaration: {
            type: "VariableDeclaration",
            start: 7,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 19
              }
            },
            range: [
              7,
              19
            ],
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 19,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 19
                  }
                },
                range: [
                  11,
                  19
                ],
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    11,
                    19
                  ],
                  name: "document"
                },
                init: null
              }
            ],
            kind: "var"
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export var document = { }": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      range: [
        0,
        25
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          range: [
            0,
            25
          ],
          declaration: {
            type: "VariableDeclaration",
            start: 7,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 25
              }
            },
            range: [
              7,
              25
            ],
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  11,
                  25
                ],
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    11,
                    19
                  ],
                  name: "document"
                },
                init: {
                  type: "ObjectExpression",
                  start: 22,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  range: [
                    22,
                    25
                  ],
                  properties: []
                }
              }
            ],
            kind: "var"
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export var await": {
      type: "Error",
      message: "The keyword 'await' is reserved (1:11)"
    },
    "export let document": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          range: [
            0,
            19
          ],
          declaration: {
            type: "VariableDeclaration",
            start: 7,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 19
              }
            },
            range: [
              7,
              19
            ],
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 19,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 19
                  }
                },
                range: [
                  11,
                  19
                ],
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    11,
                    19
                  ],
                  name: "document"
                },
                init: null
              }
            ],
            kind: "let"
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export let document = { }": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      range: [
        0,
        25
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          range: [
            0,
            25
          ],
          declaration: {
            type: "VariableDeclaration",
            start: 7,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 25
              }
            },
            range: [
              7,
              25
            ],
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  11,
                  25
                ],
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    11,
                    19
                  ],
                  name: "document"
                },
                init: {
                  type: "ObjectExpression",
                  start: 22,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  range: [
                    22,
                    25
                  ],
                  properties: []
                }
              }
            ],
            kind: "let"
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export const document = { }": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          declaration: {
            type: "VariableDeclaration",
            start: 7,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              7,
              27
            ],
            declarations: [
              {
                type: "VariableDeclarator",
                start: 13,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  13,
                  27
                ],
                id: {
                  type: "Identifier",
                  start: 13,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    13,
                    21
                  ],
                  name: "document"
                },
                init: {
                  type: "ObjectExpression",
                  start: 24,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  range: [
                    24,
                    27
                  ],
                  properties: []
                }
              }
            ],
            kind: "const"
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export function parse() { }": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          declaration: {
            type: "FunctionDeclaration",
            start: 7,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              7,
              27
            ],
            id: {
              type: "Identifier",
              start: 16,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              range: [
                16,
                21
              ],
              name: "parse"
            },
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 24,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 24
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                24,
                27
              ],
              body: []
            }
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export class Class {}": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      range: [
        0,
        21
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          range: [
            0,
            21
          ],
          declaration: {
            type: "ClassDeclaration",
            start: 7,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 21
              }
            },
            range: [
              7,
              21
            ],
            id: {
              type: "Identifier",
              start: 13,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                13,
                18
              ],
              name: "Class"
            },
            superClass: null,
            body: {
              type: "ClassBody",
              start: 19,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              range: [
                19,
                21
              ],
              body: []
            }
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export new Foo();": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "export typeof foo;": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "export default 42": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          declaration: {
            type: "Literal",
            start: 15,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              15,
              17
            ],
            value: 42,
            raw: "42"
          }
        }
      ],
      sourceType: "module"
    },
    "export default function () {}": {
      type: "Program",
      start: 0,
      end: 29,
      range: [
        0,
        29
      ],
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 29,
          range: [
            0,
            29
          ],
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 29,
            range: [
              15,
              29
            ],
            id: null,
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 27,
              end: 29,
              range: [
                27,
                29
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default function f() {}": {
      type: "Program",
      start: 0,
      end: 30,
      range: [
        0,
        30
      ],
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 30,
          range: [
            0,
            30
          ],
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 30,
            range: [
              15,
              30
            ],
            id: {
              type: "Identifier",
              start: 24,
              end: 25,
              range: [
                24,
                25
              ],
              name: "f"
            },
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 28,
              end: 30,
              range: [
                28,
                30
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default class {}": {
      type: "Program",
      start: 0,
      end: 23,
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 23,
          range: [
            0,
            23
          ],
          declaration: {
            type: "ClassDeclaration",
            start: 15,
            end: 23,
            range: [
              15,
              23
            ],
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 21,
              end: 23,
              range: [
                21,
                23
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default class A {}": {
      type: "Program",
      start: 0,
      end: 25,
      range: [
        0,
        25
      ],
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 25,
          range: [
            0,
            25
          ],
          declaration: {
            type: "ClassDeclaration",
            start: 15,
            end: 25,
            range: [
              15,
              25
            ],
            id: {
              type: "Identifier",
              start: 21,
              end: 22,
              range: [
                21,
                22
              ],
              name: "A"
            },
            superClass: null,
            body: {
              type: "ClassBody",
              start: 23,
              end: 25,
              range: [
                23,
                25
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default (class{});": {
      type: "Program",
      start: 0,
      end: 25,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 25,
          declaration: {
            type: "ClassExpression",
            start: 16,
            end: 23,
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 21,
              end: 23,
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export *": {
      type: "Error",
      message: "Unexpected token (1:8)"
    },
    "export * from \"crypto\"": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ExportAllDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          source: {
            type: "Literal",
            start: 14,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              14,
              22
            ],
            value: "crypto",
            raw: "\"crypto\""
          }
        }
      ],
      sourceType: "module"
    },
    "export { encrypt }": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                9,
                16
              ],
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              exported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              }
            }
          ],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export { encrypt, decrypt }": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                9,
                16
              ],
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              exported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              }
            },
            {
              type: "ExportSpecifier",
              start: 18,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              range: [
                18,
                25
              ],
              local: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  18,
                  25
                ],
                name: "decrypt"
              },
              exported: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  18,
                  25
                ],
                name: "decrypt"
              }
            }
          ],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export { encrypt as default }": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      range: [
        0,
        29
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          range: [
            0,
            29
          ],
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                9,
                27
              ],
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              exported: {
                type: "Identifier",
                start: 20,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  20,
                  27
                ],
                name: "default"
              }
            }
          ],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export { encrypt, decrypt as dec }": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      range: [
        0,
        34
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          range: [
            0,
            34
          ],
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                9,
                16
              ],
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              exported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              }
            },
            {
              type: "ExportSpecifier",
              start: 18,
              end: 32,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 32
                }
              },
              range: [
                18,
                32
              ],
              local: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  18,
                  25
                ],
                name: "decrypt"
              },
              exported: {
                type: "Identifier",
                start: 29,
                end: 32,
                loc: {
                  start: {
                    line: 1,
                    column: 29
                  },
                  end: {
                    line: 1,
                    column: 32
                  }
                },
                range: [
                  29,
                  32
                ],
                name: "dec"
              }
            }
          ],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export { default } from \"other\"": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      range: [
        0,
        31
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          range: [
            0,
            31
          ],
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                9,
                16
              ],
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "default"
              },
              exported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "default"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 24,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 24
              },
              end: {
                line: 1,
                column: 31
              }
            },
            range: [
              24,
              31
            ],
            value: "other",
            raw: "\"other\""
          }
        }
      ],
      sourceType: "module"
    },
    "export { default }": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "export { if }": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "export { default as foo }": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "export { if as foo }": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "import \"jquery\"": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          range: [
            0,
            15
          ],
          specifiers: [],
          source: {
            type: "Literal",
            start: 7,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              7,
              15
            ],
            value: "jquery",
            raw: "\"jquery\""
          }
        }
      ],
      sourceType: "module"
    },
    "import $ from \"jquery\"": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          specifiers: [
            {
              type: "ImportDefaultSpecifier",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              range: [
                7,
                8
              ],
              local: {
                type: "Identifier",
                start: 7,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                range: [
                  7,
                  8
                ],
                name: "$"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 14,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              14,
              22
            ],
            value: "jquery",
            raw: "\"jquery\""
          }
        }
      ],
      sourceType: "module"
    },
    "import { encrypt, decrypt } from \"crypto\"": {
      type: "Program",
      start: 0,
      end: 41,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 41
        }
      },
      range: [
        0,
        41
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 41,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 41
            }
          },
          range: [
            0,
            41
          ],
          specifiers: [
            {
              type: "ImportSpecifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                9,
                16
              ],
              imported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              }
            },
            {
              type: "ImportSpecifier",
              start: 18,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              range: [
                18,
                25
              ],
              imported: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  18,
                  25
                ],
                name: "decrypt"
              },
              local: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  18,
                  25
                ],
                name: "decrypt"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 33,
            end: 41,
            loc: {
              start: {
                line: 1,
                column: 33
              },
              end: {
                line: 1,
                column: 41
              }
            },
            range: [
              33,
              41
            ],
            value: "crypto",
            raw: "\"crypto\""
          }
        }
      ],
      sourceType: "module"
    },
    "import { encrypt as enc } from \"crypto\"": {
      type: "Program",
      start: 0,
      end: 39,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 39
        }
      },
      range: [
        0,
        39
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 39,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 39
            }
          },
          range: [
            0,
            39
          ],
          specifiers: [
            {
              type: "ImportSpecifier",
              start: 9,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                9,
                23
              ],
              imported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              local: {
                type: "Identifier",
                start: 20,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                range: [
                  20,
                  23
                ],
                name: "enc"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 31,
            end: 39,
            loc: {
              start: {
                line: 1,
                column: 31
              },
              end: {
                line: 1,
                column: 39
              }
            },
            range: [
              31,
              39
            ],
            value: "crypto",
            raw: "\"crypto\""
          }
        }
      ],
      sourceType: "module"
    },
    "import crypto, { decrypt, encrypt as enc } from \"crypto\"": {
      type: "Program",
      start: 0,
      end: 56,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 56
        }
      },
      range: [
        0,
        56
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 56,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 56
            }
          },
          range: [
            0,
            56
          ],
          specifiers: [
            {
              type: "ImportDefaultSpecifier",
              start: 7,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              range: [
                7,
                13
              ],
              local: {
                type: "Identifier",
                start: 7,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                range: [
                  7,
                  13
                ],
                name: "crypto"
              }
            },
            {
              type: "ImportSpecifier",
              start: 17,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              range: [
                17,
                24
              ],
              imported: {
                type: "Identifier",
                start: 17,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                range: [
                  17,
                  24
                ],
                name: "decrypt"
              },
              local: {
                type: "Identifier",
                start: 17,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                range: [
                  17,
                  24
                ],
                name: "decrypt"
              }
            },
            {
              type: "ImportSpecifier",
              start: 26,
              end: 40,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 40
                }
              },
              range: [
                26,
                40
              ],
              imported: {
                type: "Identifier",
                start: 26,
                end: 33,
                loc: {
                  start: {
                    line: 1,
                    column: 26
                  },
                  end: {
                    line: 1,
                    column: 33
                  }
                },
                range: [
                  26,
                  33
                ],
                name: "encrypt"
              },
              local: {
                type: "Identifier",
                start: 37,
                end: 40,
                loc: {
                  start: {
                    line: 1,
                    column: 37
                  },
                  end: {
                    line: 1,
                    column: 40
                  }
                },
                range: [
                  37,
                  40
                ],
                name: "enc"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 48,
            end: 56,
            loc: {
              start: {
                line: 1,
                column: 48
              },
              end: {
                line: 1,
                column: 56
              }
            },
            range: [
              48,
              56
            ],
            value: "crypto",
            raw: "\"crypto\""
          }
        }
      ],
      sourceType: "module"
    },
    "import default from \"foo\"": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "import { null as nil } from \"bar\"": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          specifiers: [
            {
              type: "ImportSpecifier",
              start: 9,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                9,
                20
              ],
              imported: {
                type: "Identifier",
                start: 9,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                range: [
                  9,
                  13
                ],
                name: "null"
              },
              local: {
                type: "Identifier",
                start: 17,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  17,
                  20
                ],
                name: "nil"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 28,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 28
              },
              end: {
                line: 1,
                column: 33
              }
            },
            range: [
              28,
              33
            ],
            value: "bar",
            raw: "\"bar\""
          }
        }
      ],
      sourceType: "module"
    },
    "import * as crypto from \"crypto\"": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 32
        }
      },
      range: [
        0,
        32
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 32
            }
          },
          range: [
            0,
            32
          ],
          specifiers: [
            {
              type: "ImportNamespaceSpecifier",
              start: 7,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                7,
                18
              ],
              local: {
                type: "Identifier",
                start: 12,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  12,
                  18
                ],
                name: "crypto"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 24,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 24
              },
              end: {
                line: 1,
                column: 32
              }
            },
            range: [
              24,
              32
            ],
            value: "crypto",
            raw: "\"crypto\""
          }
        }
      ],
      sourceType: "module"
    },
    "import { class } from 'foo'": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "import { class, var } from 'foo'": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "import { a as class } from 'foo'": {
      type: "Error",
      message: "Unexpected token (1:14)"
    },
    "import * as class from 'foo'": {
      type: "Error",
      message: "Unexpected token (1:12)"
    },
    "import { enum } from 'foo'": {
      type: "Error",
      message: "The keyword 'enum' is reserved (1:9)"
    },
    "import { a as enum } from 'foo'": {
      type: "Error",
      message: "The keyword 'enum' is reserved (1:14)"
    },
    "import * as enum from 'foo'": {
      type: "Error",
      message: "The keyword 'enum' is reserved (1:12)"
    },
    "(function* () { yield v })": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          range: [
            0,
            26
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 25
              }
            },
            range: [
              1,
              25
            ],
            id: null,
            generator: true,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 14,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              range: [
                14,
                25
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 16,
                  end: 23,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 23
                    }
                  },
                  range: [
                    16,
                    23
                  ],
                  expression: {
                    type: "YieldExpression",
                    start: 16,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    range: [
                      16,
                      23
                    ],
                    delegate: false,
                    argument: {
                      type: "Identifier",
                      start: 22,
                      end: 23,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 23
                        }
                      },
                      range: [
                        22,
                        23
                      ],
                      name: "v"
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "module"
    },
    "(function* () { yield\nv })": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 4
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 4
            }
          },
          range: [
            0,
            26
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 2,
                column: 3
              }
            },
            range: [
              1,
              25
            ],
            id: null,
            generator: true,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 14,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 2,
                  column: 3
                }
              },
              range: [
                14,
                25
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 16,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    16,
                    21
                  ],
                  expression: {
                    type: "YieldExpression",
                    start: 16,
                    end: 21,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 21
                      }
                    },
                    range: [
                      16,
                      21
                    ],
                    delegate: false,
                    argument: null
                  }
                },
                {
                  type: "ExpressionStatement",
                  start: 22,
                  end: 23,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 1
                    }
                  },
                  range: [
                    22,
                    23
                  ],
                  expression: {
                    type: "Identifier",
                    start: 22,
                    end: 23,
                    loc: {
                      start: {
                        line: 2,
                        column: 0
                      },
                      end: {
                        line: 2,
                        column: 1
                      }
                    },
                    range: [
                      22,
                      23
                    ],
                    name: "v"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "module"
    },
    "import foo": {
      type: "Error",
      message: "Unexpected token (1:10)"
    },
    "import { foo, bar }": {
      type: "Error",
      message: "Unexpected token (1:19)"
    },
    "import foo from bar": {
      type: "Error",
      message: "Unexpected token (1:16)"
    },
    "import foo, * as bar from 'baz';": {
      type: "Program",
      start: 0,
      end: 32,
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 32,
          specifiers: [
            {
              type: "ImportDefaultSpecifier",
              start: 7,
              end: 10,
              local: {
                type: "Identifier",
                start: 7,
                end: 10,
                name: "foo"
              }
            },
            {
              type: "ImportNamespaceSpecifier",
              start: 12,
              end: 20,
              local: {
                type: "Identifier",
                start: 17,
                end: 20,
                name: "bar"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 26,
            end: 31,
            value: "baz",
            raw: "'baz'"
          }
        }
      ],
      sourceType: "module"
    },
    "[...eval] = arr": {
      type: "Error",
      message: "Assigning to eval in strict mode (1:4)"
    },
    "export default function foo() {} false": {
      type: "Program",
      start: 0,
      end: 38,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 32,
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 32,
            id: {
              type: "Identifier",
              start: 24,
              end: 27,
              name: "foo"
            },
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 30,
              end: 32,
              body: []
            }
          }
        },
        {
          type: "ExpressionStatement",
          start: 33,
          end: 38,
          expression: {
            type: "Literal",
            start: 33,
            end: 38,
            value: false,
            raw: "false"
          }
        }
      ],
      sourceType: "module"
    },
    "export default /foo/": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 20,
          declaration: {
            type: "Literal",
            start: 15,
            end: 20,
            value: {},
            raw: "/foo/",
            regex: {
              pattern: "foo",
              flags: ""
            }
          }
        }
      ],
      sourceType: "module"
    },
    "var await = 0": {
      type: "Error",
      message: "The keyword 'await' is reserved (1:4)"
    },
    "export let x = a; export function x() {}": {
      type: "Error",
      message: "Identifier 'x' has already been declared (1:34)"
    },
    "export let [{x = 2}] = a; export {x}": {
      type: "Error",
      message: "Duplicate export 'x' (1:34)"
    },
    "export default 100; export default 3": {
      type: "Error",
      message: "Duplicate export 'default' (1:27)"
    },
    "export default class Foo {}++x": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 27,
          declaration: {
            type: "ClassDeclaration",
            start: 15,
            end: 27,
            id: {
              type: "Identifier",
              start: 21,
              end: 24,
              name: "Foo"
            },
            superClass: null,
            body: {
              type: "ClassBody",
              start: 25,
              end: 27,
              body: []
            }
          }
        },
        {
          type: "ExpressionStatement",
          start: 27,
          end: 30,
          expression: {
            type: "UpdateExpression",
            start: 27,
            end: 30,
            operator: "++",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 29,
              end: 30,
              name: "x"
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export { x as y } from './y.js';\nexport { x as z } from './z.js';": {
      type: "Program",
      start: 0,
      end: 65,
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 32,
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 15,
              local: {
                type: "Identifier",
                start: 9,
                end: 10,
                name: "x"
              },
              exported: {
                type: "Identifier",
                start: 14,
                end: 15,
                name: "y"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 23,
            end: 31,
            value: "./y.js",
            raw: "'./y.js'"
          }
        },
        {
          type: "ExportNamedDeclaration",
          start: 33,
          end: 65,
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 42,
              end: 48,
              local: {
                type: "Identifier",
                start: 42,
                end: 43,
                name: "x"
              },
              exported: {
                type: "Identifier",
                start: 47,
                end: 48,
                name: "z"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 56,
            end: 64,
            value: "./z.js",
            raw: "'./z.js'"
          }
        }
      ],
      sourceType: "module"
    },
    "export { default as y } from './y.js';\nexport default 42;": {
      type: "Program",
      start: 0,
      end: 57,
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 38,
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 21,
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                name: "default"
              },
              exported: {
                type: "Identifier",
                start: 20,
                end: 21,
                name: "y"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 29,
            end: 37,
            value: "./y.js",
            raw: "'./y.js'"
          }
        },
        {
          type: "ExportDefaultDeclaration",
          start: 39,
          end: 57,
          declaration: {
            type: "Literal",
            start: 54,
            end: 56,
            value: 42,
            raw: "42"
          }
        }
      ],
      sourceType: "module"
    },
    "export { default} from './y.js';\nexport default 42;": {
      type: "Error",
      message: "Duplicate export 'default' (2:7)"
    },
    "export default function(x) {};": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 29,
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 29,
            id: null,
            generator: false,
            expression: false,
            params: [
              {
                type: "Identifier",
                start: 24,
                end: 25,
                name: "x"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 27,
              end: 29,
              body: []
            }
          }
        },
        {
          type: "EmptyStatement",
          start: 29,
          end: 30
        }
      ],
      sourceType: "module"
    }
  },
  "es6-parens": {
    "() => 42": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 8,
            id: null,
            generator: false,
            expression: true,
            params: [],
            body: {
              type: "Literal",
              start: 6,
              end: 8,
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    }
  },
  "es7": {
    "x **= 42": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: "**=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 6,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x ** y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "**",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "3 ** 5 * 1": {
      type: "Program",
      start: 0,
      end: 10,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 10,
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 6,
              left: {
                type: "Literal",
                start: 0,
                end: 1,
                value: 3,
                raw: "3"
              },
              operator: "**",
              right: {
                type: "Literal",
                start: 5,
                end: 6,
                value: 5,
                raw: "5"
              }
            },
            operator: "*",
            right: {
              type: "Literal",
              start: 9,
              end: 10,
              value: 1,
              raw: "1"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "3 % 5 ** 1": {
      type: "Program",
      start: 0,
      end: 10,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 10,
            left: {
              type: "Literal",
              start: 0,
              end: 1,
              value: 3,
              raw: "3"
            },
            operator: "%",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 10,
              left: {
                type: "Literal",
                start: 4,
                end: 5,
                value: 5,
                raw: "5"
              },
              operator: "**",
              right: {
                type: "Literal",
                start: 9,
                end: 10,
                value: 1,
                raw: "1"
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "delete o.p ** 2;": {
      type: "Error",
      message: "Unexpected token (1:11)"
    },
    "void 2 ** 2;": {
      type: "Error",
      message: "Unexpected token (1:7)"
    },
    "typeof 2 ** 2;": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "~3 ** 2;": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "!1 ** 2;": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "-2** 2;": {
      type: "Error",
      message: "Unexpected token (1:2)"
    },
    "+2** 2;": {
      type: "Error",
      message: "Unexpected token (1:2)"
    },
    "(-5) ** y": {
      type: "Program",
      start: 0,
      end: 9,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            left: {
              type: "UnaryExpression",
              start: 1,
              end: 3,
              operator: "-",
              prefix: true,
              argument: {
                type: "Literal",
                start: 2,
                end: 3,
                value: 5,
                raw: "5"
              }
            },
            operator: "**",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              name: "y"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "++a ** 2": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 8,
            left: {
              type: "UpdateExpression",
              start: 0,
              end: 3,
              operator: "++",
              prefix: true,
              argument: {
                type: "Identifier",
                start: 2,
                end: 3,
                name: "a"
              }
            },
            operator: "**",
            right: {
              type: "Literal",
              start: 7,
              end: 8,
              value: 2,
              raw: "2"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "a-- ** 2": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 8,
            left: {
              type: "UpdateExpression",
              start: 0,
              end: 3,
              operator: "--",
              prefix: false,
              argument: {
                type: "Identifier",
                start: 0,
                end: 1,
                name: "a"
              }
            },
            operator: "**",
            right: {
              type: "Literal",
              start: 7,
              end: 8,
              value: 2,
              raw: "2"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function foo(a=2) { 'use strict'; }": {
      type: "Error",
      message: "Illegal 'use strict' directive in function with non-simple parameter list (1:0)"
    },
    "(a=2) => { 'use strict'; }": {
      type: "Error",
      message: "Illegal 'use strict' directive in function with non-simple parameter list (1:0)"
    },
    "function foo({a}) { 'use strict'; }": {
      type: "Error",
      message: "Illegal 'use strict' directive in function with non-simple parameter list (1:0)"
    },
    "({a}) => { 'use strict'; }": {
      type: "Error",
      message: "Illegal 'use strict' directive in function with non-simple parameter list (1:0)"
    },
    "function foo(a) { 'use strict'; }": {
      type: "Program",
      start: 0,
      end: 33,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 33,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          generator: false,
          expression: false,
          params: [
            {
              type: "Identifier",
              start: 13,
              end: 14,
              name: "a"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 16,
            end: 33,
            body: [
              {
                type: "ExpressionStatement",
                start: 18,
                end: 31,
                expression: {
                  type: "Literal",
                  start: 18,
                  end: 30,
                  value: "use strict",
                  raw: "'use strict'"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "if (x) function f() {}": {
      type: "Program",
      start: 0,
      end: 22,
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 22,
          test: {
            type: "Identifier",
            start: 4,
            end: 5,
            name: "x"
          },
          consequent: {
            type: "FunctionDeclaration",
            start: 7,
            end: 22,
            id: {
              type: "Identifier",
              start: 16,
              end: 17,
              name: "f"
            },
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 20,
              end: 22,
              body: []
            }
          },
          alternate: null
        }
      ],
      sourceType: "script"
    },
    "if (x) function f() { return 23; } else function f() { return 42; }": {
      type: "Program",
      start: 0,
      end: 67,
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 67,
          test: {
            type: "Identifier",
            start: 4,
            end: 5,
            name: "x"
          },
          consequent: {
            type: "FunctionDeclaration",
            start: 7,
            end: 34,
            id: {
              type: "Identifier",
              start: 16,
              end: 17,
              name: "f"
            },
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 20,
              end: 34,
              body: [
                {
                  type: "ReturnStatement",
                  start: 22,
                  end: 32,
                  argument: {
                    type: "Literal",
                    start: 29,
                    end: 31,
                    value: 23,
                    raw: "23"
                  }
                }
              ]
            }
          },
          alternate: {
            type: "FunctionDeclaration",
            start: 40,
            end: 67,
            id: {
              type: "Identifier",
              start: 49,
              end: 50,
              name: "f"
            },
            generator: false,
            expression: false,
            params: [],
            body: {
              type: "BlockStatement",
              start: 53,
              end: 67,
              body: [
                {
                  type: "ReturnStatement",
                  start: 55,
                  end: 65,
                  argument: {
                    type: "Literal",
                    start: 62,
                    end: 64,
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "'use strict'; if(x) function f() {}": {
      type: "Error",
      message: "Unexpected token (1:20)"
    },
    "'use strict'; function y(x = 1) { 'use strict' }": {
      type: "Error",
      message: "Illegal 'use strict' directive in function with non-simple parameter list (1:14)"
    },
    "function foo(a,) { }": {
      type: "Error",
      message: "Unexpected token (1:15)"
    },
    "(function(a,) { })": {
      type: "Error",
      message: "Unexpected token (1:12)"
    },
    "(a,) => a": {
      type: "Error",
      message: "Unexpected token (1:3)"
    },
    "async (a,) => a": {
      type: "Error",
      message: "Unexpected token (1:9)"
    },
    "({foo(a,) {}})": {
      type: "Error",
      message: "Unexpected token (1:8)"
    },
    "class A {foo(a,) {}}": {
      type: "Error",
      message: "Unexpected token (1:15)"
    },
    "class A {static foo(a,) {}}": {
      type: "Error",
      message: "Unexpected token (1:22)"
    },
    "(class {foo(a,) {}})": {
      type: "Error",
      message: "Unexpected token (1:14)"
    },
    "(class {static foo(a,) {}})": {
      type: "Error",
      message: "Unexpected token (1:21)"
    },
    "foo(a,)": {
      type: "Error",
      message: "Unexpected token (1:6)"
    },
    "new foo(a,)": {
      type: "Error",
      message: "Unexpected token (1:10)"
    },
    "(a,)": {
      type: "Error",
      message: "Unexpected token (1:3)"
    }
  },
  "es8-module": {
    "export async function foo() { }": {
      type: "Program",
      start: 0,
      end: 31,
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 31,
          declaration: {
            type: "FunctionDeclaration",
            start: 7,
            end: 31,
            id: {
              type: "Identifier",
              start: 22,
              end: 25,
              name: "foo"
            },
            generator: false,
            expression: false,
            async: true,
            params: [],
            body: {
              type: "BlockStatement",
              start: 28,
              end: 31,
              body: []
            }
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export default async function() { }": {
      type: "Program",
      start: 0,
      end: 35,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 35,
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 35,
            id: null,
            generator: false,
            expression: false,
            async: true,
            params: [],
            body: {
              type: "BlockStatement",
              start: 32,
              end: 35,
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default (async function() { })": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 37,
          declaration: {
            type: "FunctionExpression",
            start: 16,
            end: 36,
            id: null,
            generator: false,
            expression: false,
            async: true,
            params: [],
            body: {
              type: "BlockStatement",
              start: 33,
              end: 36,
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "await": {
      type: "Error",
      message: "The keyword 'await' is reserved (1:0)"
    },
    "await a": {
      type: "Error",
      message: "The keyword 'await' is reserved (1:0)"
    },
    "export default function foo(a,) { }": {
      type: "Program",
      start: 0,
      end: 35,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 35,
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 35,
            id: {
              type: "Identifier",
              start: 24,
              end: 27,
              name: "foo"
            },
            generator: false,
            expression: false,
            async: false,
            params: [
              {
                type: "Identifier",
                start: 28,
                end: 29,
                name: "a"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 32,
              end: 35,
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default (function foo(a,) { })": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 37,
          declaration: {
            type: "FunctionExpression",
            start: 16,
            end: 36,
            id: {
              type: "Identifier",
              start: 25,
              end: 28,
              name: "foo"
            },
            generator: false,
            expression: false,
            async: false,
            params: [
              {
                type: "Identifier",
                start: 29,
                end: 30,
                name: "a"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 33,
              end: 36,
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export function foo(a,) { }": {
      type: "Program",
      start: 0,
      end: 27,
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 27,
          declaration: {
            type: "FunctionDeclaration",
            start: 7,
            end: 27,
            id: {
              type: "Identifier",
              start: 16,
              end: 19,
              name: "foo"
            },
            generator: false,
            expression: false,
            async: false,
            params: [
              {
                type: "Identifier",
                start: 20,
                end: 21,
                name: "a"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 24,
              end: 27,
              body: []
            }
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export default function foo(...a,) { }": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:32)"
    },
    "export default (function foo(...a,) { })": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:33)"
    },
    "export function foo(...a,) { }": {
      type: "Error",
      message: "Comma is not permitted after the rest element (1:24)"
    },
    "export default function foo(,) { }": {
      type: "Error",
      message: "Unexpected token (1:28)"
    },
    "export default (function foo(,) { })": {
      type: "Error",
      message: "Unexpected token (1:29)"
    },
    "export function foo(,) { }": {
      type: "Error",
      message: "Unexpected token (1:20)"
    }
  },
  "es7-module": {
    "export default function foo(a,) { }": {
      type: "Error",
      message: "Unexpected token (1:30)"
    },
    "export default (function foo(a,) { })": {
      type: "Error",
      message: "Unexpected token (1:31)"
    },
    "export function foo(a,) { }": {
      type: "Error",
      message: "Unexpected token (1:22)"
    }
  },
  "es9": {
    "`foo`": {
      type: "Program",
      start: 0,
      end: 5,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 5,
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 4,
                value: {
                  raw: "foo",
                  cooked: "foo"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`foo\\u25a0`": {
      type: "Program",
      start: 0,
      end: 11,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 11,
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 10,
                value: {
                  raw: "foo\\u25a0",
                  cooked: "foo■"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`foo${bar}\\u25a0`": {
      type: "Program",
      start: 0,
      end: 17,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 17,
            expressions: [
              {
                type: "Identifier",
                start: 6,
                end: 9,
                name: "bar"
              }
            ],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 4,
                value: {
                  raw: "foo",
                  cooked: "foo"
                },
                tail: false
              },
              {
                type: "TemplateElement",
                start: 10,
                end: 16,
                value: {
                  raw: "\\u25a0",
                  cooked: "■"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\u25a0`": {
      type: "Program",
      start: 0,
      end: 11,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 11,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 11,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 10,
                  value: {
                    raw: "\\u25a0",
                    cooked: "■"
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`foo${bar}\\u25a0`": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 20,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 20,
              expressions: [
                {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "bar"
                }
              ],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 7,
                  value: {
                    raw: "foo",
                    cooked: "foo"
                  },
                  tail: false
                },
                {
                  type: "TemplateElement",
                  start: 13,
                  end: 19,
                  value: {
                    raw: "\\u25a0",
                    cooked: "■"
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "`\\unicode`": {
      type: "Error",
      message: "Bad escape sequence in untagged template literal (1:1)"
    },
    "`\\u`": {
      type: "Error",
      message: "Bad escape sequence in untagged template literal (1:1)"
    },
    "`\\u{`": {
      type: "Error",
      message: "Bad escape sequence in untagged template literal (1:1)"
    },
    "`\\u{abcdx`": {
      type: "Error",
      message: "Bad escape sequence in untagged template literal (1:1)"
    },
    "`\\u{abcdx}`": {
      type: "Error",
      message: "Bad escape sequence in untagged template literal (1:1)"
    },
    "`\\xylophone`": {
      type: "Error",
      message: "Bad escape sequence in untagged template literal (1:1)"
    },
    "foo`\\unicode": {
      type: "Error",
      message: "Unterminated template (1:4)"
    },
    "foo`\\unicode\\`": {
      type: "Error",
      message: "Unterminated template (1:4)"
    },
    "foo`\\unicode`": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 13,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 13,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 12,
                  value: {
                    raw: "\\unicode",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`foo${bar}\\unicode`": {
      type: "Program",
      start: 0,
      end: 22,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 22,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 22,
              expressions: [
                {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "bar"
                }
              ],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 7,
                  value: {
                    raw: "foo",
                    cooked: "foo"
                  },
                  tail: false
                },
                {
                  type: "TemplateElement",
                  start: 13,
                  end: 21,
                  value: {
                    raw: "\\unicode",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\u`": {
      type: "Program",
      start: 0,
      end: 7,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 7,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 7,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 6,
                  value: {
                    raw: "\\u",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\u{`": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 8,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 8,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 7,
                  value: {
                    raw: "\\u{",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\u{abcdx`": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 13,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 13,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 12,
                  value: {
                    raw: "\\u{abcdx",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\u{abcdx}`": {
      type: "Program",
      start: 0,
      end: 14,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 14,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 14,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 13,
                  value: {
                    raw: "\\u{abcdx}",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\unicode\\\\`": {
      type: "Program",
      start: 0,
      end: 15,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 15,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 15,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 14,
                  value: {
                    raw: "\\unicode\\\\",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    }
  },
  "es5-loose": {
    "0": {
      type: "Program",
      start: 0,
      end: 1,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 1,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            },
            value: 0,
            raw: "0"
          }
        }
      ]
    },
    "3": {
      type: "Program",
      start: 0,
      end: 1,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 1,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            },
            value: 3,
            raw: "3"
          }
        }
      ]
    },
    "5": {
      type: "Program",
      start: 0,
      end: 1,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 1,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            },
            value: 5,
            raw: "5"
          }
        }
      ]
    },
    "42": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "this\n": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 0
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "ThisExpression",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            }
          }
        }
      ]
    },
    "null\n": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 0
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: null,
            raw: "null"
          }
        }
      ]
    },
    "\n    42\n\n": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 4,
          column: 0
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 5,
          end: 7,
          loc: {
            start: {
              line: 2,
              column: 4
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 5,
            end: 7,
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/foobar/": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            regex: {
              pattern: "foobar",
              flags: ""
            },
            value: {},
            raw: "/foobar/"
          }
        }
      ]
    },
    "/[a-z]/g": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            regex: {
              pattern: "[a-z]",
              flags: "g"
            },
            value: {},
            raw: "/[a-z]/g"
          }
        }
      ]
    },
    "(1 + 2 ) * 3": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            left: {
              type: "BinaryExpression",
              start: 1,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              left: {
                type: "Literal",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                value: 1,
                raw: "1"
              },
              operator: "+",
              right: {
                type: "Literal",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                value: 2,
                raw: "2"
              }
            },
            operator: "*",
            right: {
              type: "Literal",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              value: 3,
              raw: "3"
            }
          }
        }
      ]
    },
    "x = []": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "x = [ ]": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "x = [ 42 ]": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              elements: [
                {
                  type: "Literal",
                  start: 6,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  value: 42,
                  raw: "42"
                }
              ]
            }
          }
        }
      ]
    },
    "x = [ 42, ]": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              elements: [
                {
                  type: "Literal",
                  start: 6,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  value: 42,
                  raw: "42"
                }
              ]
            }
          }
        }
      ]
    },
    "x = [ ,, 42 ]": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              elements: [
                null,
                null,
                {
                  type: "Literal",
                  start: 9,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  value: 42,
                  raw: "42"
                }
              ]
            }
          }
        }
      ]
    },
    "x = [ 1, 2, 3, ]": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              elements: [
                {
                  type: "Literal",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 7
                    }
                  },
                  value: 1,
                  raw: "1"
                },
                {
                  type: "Literal",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  value: 2,
                  raw: "2"
                },
                {
                  type: "Literal",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  value: 3,
                  raw: "3"
                }
              ]
            }
          }
        }
      ]
    },
    "x = [ 1, 2,, 3, ]": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ArrayExpression",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              elements: [
                {
                  type: "Literal",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 7
                    }
                  },
                  value: 1,
                  raw: "1"
                },
                {
                  type: "Literal",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  value: 2,
                  raw: "2"
                },
                null,
                {
                  type: "Literal",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  value: 3,
                  raw: "3"
                }
              ]
            }
          }
        }
      ]
    },
    "日本語 = []": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "日本語"
            },
            right: {
              type: "ArrayExpression",
              start: 6,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "T‿ = []": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "T‿"
            },
            right: {
              type: "ArrayExpression",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "T‌ = []": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "T‌"
            },
            right: {
              type: "ArrayExpression",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "T‍ = []": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "T‍"
            },
            right: {
              type: "ArrayExpression",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "ⅣⅡ = []": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "ⅣⅡ"
            },
            right: {
              type: "ArrayExpression",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "ⅣⅡ = []": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "ⅣⅡ"
            },
            right: {
              type: "ArrayExpression",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              elements: []
            }
          }
        }
      ]
    },
    "x = {}": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              properties: []
            }
          }
        }
      ]
    },
    "x = { }": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              properties: []
            }
          }
        }
      ]
    },
    "x = { answer: 42 }": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    name: "answer"
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 14,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { if: 42 }": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    name: "if"
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { true: 42 }": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    name: "true"
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 12,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { false: 42 }": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 11,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 11
                      }
                    },
                    name: "false"
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 13,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { null: 42 }": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    name: "null"
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 12,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { \"answer\": 42 }": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  key: {
                    type: "Literal",
                    start: 6,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    value: "answer",
                    raw: "\"answer\""
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 16,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { x: 1, x: 2 }": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    name: "x"
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 9,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    value: 1,
                    raw: "1"
                  }
                },
                {
                  type: "Property",
                  start: 12,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 12,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    name: "x"
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 15,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    value: 2,
                    raw: "2"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get width() { return m_width } }": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 38
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 38,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 38
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "width"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 15,
                    end: 36,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 36
                      }
                    },
                    id: null,
                    params: [],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 18,
                      end: 36,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 36
                        }
                      },
                      body: [
                        {
                          type: "ReturnStatement",
                          start: 20,
                          end: 34,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 34
                            }
                          },
                          argument: {
                            type: "Identifier",
                            start: 27,
                            end: 34,
                            loc: {
                              start: {
                                line: 1,
                                column: 27
                              },
                              end: {
                                line: 1,
                                column: 34
                              }
                            },
                            name: "m_width"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get undef() {} }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 22
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "undef"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 15,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    id: null,
                    params: [],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 18,
                      end: 20,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 20
                        }
                      },
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get if() {} }": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 19
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    name: "if"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    id: null,
                    params: [],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 15,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get true() {} }": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 21
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    name: "true"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 14,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    id: null,
                    params: [],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 17,
                      end: 19,
                      loc: {
                        start: {
                          line: 1,
                          column: 17
                        },
                        end: {
                          line: 1,
                          column: 19
                        }
                      },
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get false() {} }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 22
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "false"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 15,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    id: null,
                    params: [],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 18,
                      end: 20,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 20
                        }
                      },
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get null() {} }": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 21
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    name: "null"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 14,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    id: null,
                    params: [],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 17,
                      end: 19,
                      loc: {
                        start: {
                          line: 1,
                          column: 17
                        },
                        end: {
                          line: 1,
                          column: 19
                        }
                      },
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get \"undef\"() {} }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 24
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  key: {
                    type: "Literal",
                    start: 10,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    value: "undef",
                    raw: "\"undef\""
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 17,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    id: null,
                    params: [],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 20,
                      end: 22,
                      loc: {
                        start: {
                          line: 1,
                          column: 20
                        },
                        end: {
                          line: 1,
                          column: 22
                        }
                      },
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get 10() {} }": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 19
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  key: {
                    type: "Literal",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    value: 10,
                    raw: "10"
                  },
                  kind: "get",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    id: null,
                    params: [],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 15,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set width(w) { m_width = w } }": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 36
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "width"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 15,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 16,
                        end: 17,
                        loc: {
                          start: {
                            line: 1,
                            column: 16
                          },
                          end: {
                            line: 1,
                            column: 17
                          }
                        },
                        name: "w"
                      }
                    ],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 19,
                      end: 34,
                      loc: {
                        start: {
                          line: 1,
                          column: 19
                        },
                        end: {
                          line: 1,
                          column: 34
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 21,
                          end: 32,
                          loc: {
                            start: {
                              line: 1,
                              column: 21
                            },
                            end: {
                              line: 1,
                              column: 32
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 21,
                            end: 32,
                            loc: {
                              start: {
                                line: 1,
                                column: 21
                              },
                              end: {
                                line: 1,
                                column: 32
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 21,
                              end: 28,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 21
                                },
                                end: {
                                  line: 1,
                                  column: 28
                                }
                              },
                              name: "m_width"
                            },
                            right: {
                              type: "Identifier",
                              start: 31,
                              end: 32,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 31
                                },
                                end: {
                                  line: 1,
                                  column: 32
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set if(w) { m_if = w } }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 30
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    name: "if"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 13,
                        end: 14,
                        loc: {
                          start: {
                            line: 1,
                            column: 13
                          },
                          end: {
                            line: 1,
                            column: 14
                          }
                        },
                        name: "w"
                      }
                    ],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 16,
                      end: 28,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 28
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 18,
                          end: 26,
                          loc: {
                            start: {
                              line: 1,
                              column: 18
                            },
                            end: {
                              line: 1,
                              column: 26
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 18,
                            end: 26,
                            loc: {
                              start: {
                                line: 1,
                                column: 18
                              },
                              end: {
                                line: 1,
                                column: 26
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 18,
                              end: 22,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 18
                                },
                                end: {
                                  line: 1,
                                  column: 22
                                }
                              },
                              name: "m_if"
                            },
                            right: {
                              type: "Identifier",
                              start: 25,
                              end: 26,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 25
                                },
                                end: {
                                  line: 1,
                                  column: 26
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set true(w) { m_true = w } }": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 34,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 34
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 34,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 34
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    name: "true"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 14,
                    end: 32,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 32
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 15,
                        end: 16,
                        loc: {
                          start: {
                            line: 1,
                            column: 15
                          },
                          end: {
                            line: 1,
                            column: 16
                          }
                        },
                        name: "w"
                      }
                    ],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 18,
                      end: 32,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 32
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 20,
                          end: 30,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 30
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 20,
                            end: 30,
                            loc: {
                              start: {
                                line: 1,
                                column: 20
                              },
                              end: {
                                line: 1,
                                column: 30
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 20,
                              end: 26,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 20
                                },
                                end: {
                                  line: 1,
                                  column: 26
                                }
                              },
                              name: "m_true"
                            },
                            right: {
                              type: "Identifier",
                              start: 29,
                              end: 30,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 29
                                },
                                end: {
                                  line: 1,
                                  column: 30
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set false(w) { m_false = w } }": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 36
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "false"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 15,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 16,
                        end: 17,
                        loc: {
                          start: {
                            line: 1,
                            column: 16
                          },
                          end: {
                            line: 1,
                            column: 17
                          }
                        },
                        name: "w"
                      }
                    ],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 19,
                      end: 34,
                      loc: {
                        start: {
                          line: 1,
                          column: 19
                        },
                        end: {
                          line: 1,
                          column: 34
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 21,
                          end: 32,
                          loc: {
                            start: {
                              line: 1,
                              column: 21
                            },
                            end: {
                              line: 1,
                              column: 32
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 21,
                            end: 32,
                            loc: {
                              start: {
                                line: 1,
                                column: 21
                              },
                              end: {
                                line: 1,
                                column: 32
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 21,
                              end: 28,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 21
                                },
                                end: {
                                  line: 1,
                                  column: 28
                                }
                              },
                              name: "m_false"
                            },
                            right: {
                              type: "Identifier",
                              start: 31,
                              end: 32,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 31
                                },
                                end: {
                                  line: 1,
                                  column: 32
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set null(w) { m_null = w } }": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 34,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 34
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 34,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 34
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 10,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    name: "null"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 14,
                    end: 32,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 32
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 15,
                        end: 16,
                        loc: {
                          start: {
                            line: 1,
                            column: 15
                          },
                          end: {
                            line: 1,
                            column: 16
                          }
                        },
                        name: "w"
                      }
                    ],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 18,
                      end: 32,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 32
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 20,
                          end: 30,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 30
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 20,
                            end: 30,
                            loc: {
                              start: {
                                line: 1,
                                column: 20
                              },
                              end: {
                                line: 1,
                                column: 30
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 20,
                              end: 26,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 20
                                },
                                end: {
                                  line: 1,
                                  column: 26
                                }
                              },
                              name: "m_null"
                            },
                            right: {
                              type: "Identifier",
                              start: 29,
                              end: 30,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 29
                                },
                                end: {
                                  line: 1,
                                  column: 30
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set \"null\"(w) { m_null = w } }": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 36
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  key: {
                    type: "Literal",
                    start: 10,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    value: "null",
                    raw: "\"null\""
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 16,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 17,
                        end: 18,
                        loc: {
                          start: {
                            line: 1,
                            column: 17
                          },
                          end: {
                            line: 1,
                            column: 18
                          }
                        },
                        name: "w"
                      }
                    ],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 20,
                      end: 34,
                      loc: {
                        start: {
                          line: 1,
                          column: 20
                        },
                        end: {
                          line: 1,
                          column: 34
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 22,
                          end: 32,
                          loc: {
                            start: {
                              line: 1,
                              column: 22
                            },
                            end: {
                              line: 1,
                              column: 32
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 22,
                            end: 32,
                            loc: {
                              start: {
                                line: 1,
                                column: 22
                              },
                              end: {
                                line: 1,
                                column: 32
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 22,
                              end: 28,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 22
                                },
                                end: {
                                  line: 1,
                                  column: 28
                                }
                              },
                              name: "m_null"
                            },
                            right: {
                              type: "Identifier",
                              start: 31,
                              end: 32,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 31
                                },
                                end: {
                                  line: 1,
                                  column: 32
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set 10(w) { m_null = w } }": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 32
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 32
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 32
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 32,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 32
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 30,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 30
                    }
                  },
                  key: {
                    type: "Literal",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    value: 10,
                    raw: "10"
                  },
                  kind: "set",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 30,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 30
                      }
                    },
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 13,
                        end: 14,
                        loc: {
                          start: {
                            line: 1,
                            column: 13
                          },
                          end: {
                            line: 1,
                            column: 14
                          }
                        },
                        name: "w"
                      }
                    ],
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 16,
                      end: 30,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 30
                        }
                      },
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 18,
                          end: 28,
                          loc: {
                            start: {
                              line: 1,
                              column: 18
                            },
                            end: {
                              line: 1,
                              column: 28
                            }
                          },
                          expression: {
                            type: "AssignmentExpression",
                            start: 18,
                            end: 28,
                            loc: {
                              start: {
                                line: 1,
                                column: 18
                              },
                              end: {
                                line: 1,
                                column: 28
                              }
                            },
                            operator: "=",
                            left: {
                              type: "Identifier",
                              start: 18,
                              end: 24,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 18
                                },
                                end: {
                                  line: 1,
                                  column: 24
                                }
                              },
                              name: "m_null"
                            },
                            right: {
                              type: "Identifier",
                              start: 27,
                              end: 28,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 27
                                },
                                end: {
                                  line: 1,
                                  column: 28
                                }
                              },
                              name: "w"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { get: 42 }": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    name: "get"
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 11,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 11
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "x = { set: 43 }": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    name: "set"
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 11,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 11
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    value: 43,
                    raw: "43"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "/* block comment */ 42": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 20,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 20
            },
            end: {
              line: 1,
              column: 22
            }
          },
          expression: {
            type: "Literal",
            start: 20,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 22
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "42 /*The*/ /*Answer*/": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "42 /*the*/ /*answer*/": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/* multiline\ncomment\nshould\nbe\nignored */ 42": {
      type: "Program",
      start: 0,
      end: 44,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 5,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 42,
          end: 44,
          loc: {
            start: {
              line: 5,
              column: 11
            },
            end: {
              line: 5,
              column: 13
            }
          },
          expression: {
            type: "Literal",
            start: 42,
            end: 44,
            loc: {
              start: {
                line: 5,
                column: 11
              },
              end: {
                line: 5,
                column: 13
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/*a\r\nb*/ 42": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 9,
          end: 11,
          loc: {
            start: {
              line: 2,
              column: 4
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 9,
            end: 11,
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/*a\rb*/ 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 8,
          end: 10,
          loc: {
            start: {
              line: 2,
              column: 4
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 8,
            end: 10,
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/*a\nb*/ 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 8,
          end: 10,
          loc: {
            start: {
              line: 2,
              column: 4
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 8,
            end: 10,
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "/*a\nc*/ 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 8,
          end: 10,
          loc: {
            start: {
              line: 2,
              column: 4
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 8,
            end: 10,
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "// line comment\n42": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 16,
          end: 18,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 16,
            end: 18,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "42 // line comment": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "// Hello, world!\n42": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 17,
          end: 19,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 17,
            end: 19,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "// Hello, world!\n": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 0
        }
      },
      body: []
    },
    "// Hallo, world!\n": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 0
        }
      },
      body: []
    },
    "//\n42": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 3,
          end: 5,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 3,
            end: 5,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "//": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: []
    },
    "// ": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: []
    },
    "/**/42": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 4,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 4
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 4,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 6
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "// Hello, world!\n\n//   Another hello\n42": {
      type: "Program",
      start: 0,
      end: 39,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 4,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 37,
          end: 39,
          loc: {
            start: {
              line: 4,
              column: 0
            },
            end: {
              line: 4,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 37,
            end: 39,
            loc: {
              start: {
                line: 4,
                column: 0
              },
              end: {
                line: 4,
                column: 2
              }
            },
            value: 42,
            raw: "42"
          }
        }
      ]
    },
    "if (x) { // Some comment\ndoThat(); }": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 11
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 11
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 5
              }
            },
            name: "x"
          },
          consequent: {
            type: "BlockStatement",
            start: 7,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 2,
                column: 11
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 25,
                end: 34,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 9
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 25,
                  end: 33,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 8
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 25,
                    end: 31,
                    loc: {
                      start: {
                        line: 2,
                        column: 0
                      },
                      end: {
                        line: 2,
                        column: 6
                      }
                    },
                    name: "doThat"
                  },
                  arguments: []
                }
              }
            ]
          },
          alternate: null
        }
      ]
    },
    "switch (answer) { case 42: /* perfect */ bingo() }": {
      type: "Program",
      start: 0,
      end: 50,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 50
        }
      },
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 50,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 50
            }
          },
          discriminant: {
            type: "Identifier",
            start: 8,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "answer"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 18,
              end: 48,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 48
                }
              },
              consequent: [
                {
                  type: "ExpressionStatement",
                  start: 41,
                  end: 48,
                  loc: {
                    start: {
                      line: 1,
                      column: 41
                    },
                    end: {
                      line: 1,
                      column: 48
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 41,
                    end: 48,
                    loc: {
                      start: {
                        line: 1,
                        column: 41
                      },
                      end: {
                        line: 1,
                        column: 48
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 41,
                      end: 46,
                      loc: {
                        start: {
                          line: 1,
                          column: 41
                        },
                        end: {
                          line: 1,
                          column: 46
                        }
                      },
                      name: "bingo"
                    },
                    arguments: []
                  }
                }
              ],
              test: {
                type: "Literal",
                start: 23,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ]
    },
    ".14": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            value: 0.14,
            raw: ".14"
          }
        }
      ]
    },
    "3.14159": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            value: 3.14159,
            raw: "3.14159"
          }
        }
      ]
    },
    "6.02214179e+23": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            value: 6.02214179e+23,
            raw: "6.02214179e+23"
          }
        }
      ]
    },
    "1.492417830e-10": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            value: 1.49241783e-10,
            raw: "1.492417830e-10"
          }
        }
      ]
    },
    "0x0": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            value: 0,
            raw: "0x0"
          }
        }
      ]
    },
    "0e+100": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            value: 0,
            raw: "0e+100"
          }
        }
      ]
    },
    "0xabc": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            value: 2748,
            raw: "0xabc"
          }
        }
      ]
    },
    "0xdef": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            value: 3567,
            raw: "0xdef"
          }
        }
      ]
    },
    "0X1A": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 26,
            raw: "0X1A"
          }
        }
      ]
    },
    "0x10": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 16,
            raw: "0x10"
          }
        }
      ]
    },
    "0x100": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            value: 256,
            raw: "0x100"
          }
        }
      ]
    },
    "0X04": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 4,
            raw: "0X04"
          }
        }
      ]
    },
    "02": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            value: 2,
            raw: "02"
          }
        }
      ]
    },
    "012": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            value: 10,
            raw: "012"
          }
        }
      ]
    },
    "0012": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 10,
            raw: "0012"
          }
        }
      ]
    },
    "\"Hello\"": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            value: "Hello",
            raw: "\"Hello\""
          }
        }
      ]
    },
    "\"\\n\\r\\t\\v\\b\\f\\\\\\'\\\"\\0\"": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 22
              }
            },
            value: "\n\r\t\u000b\b\f\\'\"\u0000",
            raw: "\"\\n\\r\\t\\v\\b\\f\\\\\\'\\\"\\0\""
          }
        }
      ]
    },
    "\"\\u0061\"": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            value: "a",
            raw: "\"\\u0061\""
          }
        }
      ]
    },
    "\"\\x61\"": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            value: "a",
            raw: "\"\\x61\""
          }
        }
      ]
    },
    "\"Hello\\nworld\"": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            value: "Hello\nworld",
            raw: "\"Hello\\nworld\""
          }
        }
      ]
    },
    "\"Hello\\\nworld\"": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: "Helloworld",
            raw: "\"Hello\\\nworld\""
          }
        }
      ]
    },
    "\"Hello\\02World\"": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            value: "Hello\u0002World",
            raw: "\"Hello\\02World\""
          }
        }
      ]
    },
    "\"Hello\\012World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "Hello\nWorld",
            raw: "\"Hello\\012World\""
          }
        }
      ]
    },
    "\"Hello\\122World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "HelloRWorld",
            raw: "\"Hello\\122World\""
          }
        }
      ]
    },
    "\"Hello\\0122World\"": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            value: "Hello\n2World",
            raw: "\"Hello\\0122World\""
          }
        }
      ]
    },
    "\"Hello\\312World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "HelloÊWorld",
            raw: "\"Hello\\312World\""
          }
        }
      ]
    },
    "\"Hello\\412World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "Hello!2World",
            raw: "\"Hello\\412World\""
          }
        }
      ]
    },
    "\"Hello\\812World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "Hello812World",
            raw: "\"Hello\\812World\""
          }
        }
      ]
    },
    "\"Hello\\712World\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            value: "Hello92World",
            raw: "\"Hello\\712World\""
          }
        }
      ]
    },
    "\"Hello\\0World\"": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            value: "Hello\u0000World",
            raw: "\"Hello\\0World\""
          }
        }
      ]
    },
    "\"Hello\\\r\nworld\"": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 6
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 2,
                column: 6
              }
            },
            value: "Helloworld",
            raw: "\"Hello\\\r\nworld\""
          }
        }
      ]
    },
    "\"Hello\\1World\"": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            value: "Hello\u0001World",
            raw: "\"Hello\\1World\""
          }
        }
      ]
    },
    "var x = /[a-z]/i": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                regex: {
                  pattern: "[a-z]",
                  flags: "i"
                },
                value: {},
                raw: "/[a-z]/i"
              }
            }
          ]
        }
      ]
    },
    "var x = /[x-z]/i": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                regex: {
                  pattern: "[x-z]",
                  flags: "i"
                },
                value: {},
                raw: "/[x-z]/i"
              }
            }
          ]
        }
      ]
    },
    "var x = /[a-c]/i": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                regex: {
                  pattern: "[a-c]",
                  flags: "i"
                },
                value: {},
                raw: "/[a-c]/i"
              }
            }
          ]
        }
      ]
    },
    "var x = /[P QR]/i": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                regex: {
                  pattern: "[P QR]",
                  flags: "i"
                },
                value: {},
                raw: "/[P QR]/i"
              }
            }
          ]
        }
      ]
    },
    "var x = /foo\\/bar/": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                regex: {
                  pattern: "foo\\/bar",
                  flags: ""
                },
                value: {},
                raw: "/foo\\/bar/"
              }
            }
          ]
        }
      ]
    },
    "var x = /=([^=\\s])+/g": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                regex: {
                  pattern: "=([^=\\s])+",
                  flags: "g"
                },
                value: {},
                raw: "/=([^=\\s])+/g"
              }
            }
          ]
        }
      ]
    },
    "var x = /[P QR]/\\u0067": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                regex: {
                  pattern: "[P QR]",
                  flags: "g"
                },
                value: {},
                raw: "/[P QR]/\\u0067"
              }
            }
          ]
        }
      ]
    },
    "new Button": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            callee: {
              type: "Identifier",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              name: "Button"
            },
            arguments: []
          }
        }
      ]
    },
    "new Button()": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            callee: {
              type: "Identifier",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              name: "Button"
            },
            arguments: []
          }
        }
      ]
    },
    "new new foo": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            callee: {
              type: "NewExpression",
              start: 4,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              callee: {
                type: "Identifier",
                start: 8,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "foo"
              },
              arguments: []
            },
            arguments: []
          }
        }
      ]
    },
    "new new foo()": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            callee: {
              type: "NewExpression",
              start: 4,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              callee: {
                type: "Identifier",
                start: 8,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "foo"
              },
              arguments: []
            },
            arguments: []
          }
        }
      ]
    },
    "new foo().bar()": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            callee: {
              type: "MemberExpression",
              start: 0,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              object: {
                type: "NewExpression",
                start: 0,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                callee: {
                  type: "Identifier",
                  start: 4,
                  end: 7,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 7
                    }
                  },
                  name: "foo"
                },
                arguments: []
              },
              property: {
                type: "Identifier",
                start: 10,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "bar"
              },
              computed: false
            },
            arguments: []
          }
        }
      ]
    },
    "new foo[bar]": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            callee: {
              type: "MemberExpression",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              object: {
                type: "Identifier",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "foo"
              },
              property: {
                type: "Identifier",
                start: 8,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "bar"
              },
              computed: true
            },
            arguments: []
          }
        }
      ]
    },
    "new foo.bar()": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "NewExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            callee: {
              type: "MemberExpression",
              start: 4,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              object: {
                type: "Identifier",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "foo"
              },
              property: {
                type: "Identifier",
                start: 8,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "bar"
              },
              computed: false
            },
            arguments: []
          }
        }
      ]
    },
    "( new foo).bar()": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            callee: {
              type: "MemberExpression",
              start: 0,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              object: {
                type: "NewExpression",
                start: 2,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                callee: {
                  type: "Identifier",
                  start: 6,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  name: "foo"
                },
                arguments: []
              },
              property: {
                type: "Identifier",
                start: 11,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                name: "bar"
              },
              computed: false
            },
            arguments: []
          }
        }
      ]
    },
    "foo(bar, baz)": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            callee: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "foo"
            },
            arguments: [
              {
                type: "Identifier",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "bar"
              },
              {
                type: "Identifier",
                start: 9,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                name: "baz"
              }
            ]
          }
        }
      ]
    },
    "(    foo  )()": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            callee: {
              type: "Identifier",
              start: 5,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "foo"
            },
            arguments: []
          }
        }
      ]
    },
    "universe.milkyway": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              name: "milkyway"
            },
            computed: false
          }
        }
      ]
    },
    "universe.milkyway.solarsystem": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 29
              }
            },
            object: {
              type: "MemberExpression",
              start: 0,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              object: {
                type: "Identifier",
                start: 0,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "universe"
              },
              property: {
                type: "Identifier",
                start: 9,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                name: "milkyway"
              },
              computed: false
            },
            property: {
              type: "Identifier",
              start: 18,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              name: "solarsystem"
            },
            computed: false
          }
        }
      ]
    },
    "universe.milkyway.solarsystem.Earth": {
      type: "Program",
      start: 0,
      end: 35,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 35
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 35,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 35
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 35,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 35
              }
            },
            object: {
              type: "MemberExpression",
              start: 0,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              object: {
                type: "MemberExpression",
                start: 0,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                object: {
                  type: "Identifier",
                  start: 0,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 0
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  name: "universe"
                },
                property: {
                  type: "Identifier",
                  start: 9,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  name: "milkyway"
                },
                computed: false
              },
              property: {
                type: "Identifier",
                start: 18,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                name: "solarsystem"
              },
              computed: false
            },
            property: {
              type: "Identifier",
              start: 30,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 30
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              name: "Earth"
            },
            computed: false
          }
        }
      ]
    },
    "universe[galaxyName, otherUselessName]": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 38
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "SequenceExpression",
              start: 9,
              end: 37,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 37
                }
              },
              expressions: [
                {
                  type: "Identifier",
                  start: 9,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  name: "galaxyName"
                },
                {
                  type: "Identifier",
                  start: 21,
                  end: 37,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 37
                    }
                  },
                  name: "otherUselessName"
                }
              ]
            },
            computed: true
          }
        }
      ]
    },
    "universe[galaxyName]": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              name: "galaxyName"
            },
            computed: true
          }
        }
      ]
    },
    "universe[42].galaxies": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 21
              }
            },
            object: {
              type: "MemberExpression",
              start: 0,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              object: {
                type: "Identifier",
                start: 0,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "universe"
              },
              property: {
                type: "Literal",
                start: 9,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                value: 42,
                raw: "42"
              },
              computed: true
            },
            property: {
              type: "Identifier",
              start: 13,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              name: "galaxies"
            },
            computed: false
          }
        }
      ]
    },
    "universe(42).galaxies": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 21
              }
            },
            object: {
              type: "CallExpression",
              start: 0,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              callee: {
                type: "Identifier",
                start: 0,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "universe"
              },
              arguments: [
                {
                  type: "Literal",
                  start: 9,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  value: 42,
                  raw: "42"
                }
              ]
            },
            property: {
              type: "Identifier",
              start: 13,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              name: "galaxies"
            },
            computed: false
          }
        }
      ]
    },
    "universe(42).galaxies(14, 3, 77).milkyway": {
      type: "Program",
      start: 0,
      end: 41,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 41
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 41,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 41
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 41,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 41
              }
            },
            object: {
              type: "CallExpression",
              start: 0,
              end: 32,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 32
                }
              },
              callee: {
                type: "MemberExpression",
                start: 0,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                object: {
                  type: "CallExpression",
                  start: 0,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 0
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 0,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 0
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    name: "universe"
                  },
                  arguments: [
                    {
                      type: "Literal",
                      start: 9,
                      end: 11,
                      loc: {
                        start: {
                          line: 1,
                          column: 9
                        },
                        end: {
                          line: 1,
                          column: 11
                        }
                      },
                      value: 42,
                      raw: "42"
                    }
                  ]
                },
                property: {
                  type: "Identifier",
                  start: 13,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  name: "galaxies"
                },
                computed: false
              },
              arguments: [
                {
                  type: "Literal",
                  start: 22,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  value: 14,
                  raw: "14"
                },
                {
                  type: "Literal",
                  start: 26,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  value: 3,
                  raw: "3"
                },
                {
                  type: "Literal",
                  start: 29,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 29
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  value: 77,
                  raw: "77"
                }
              ]
            },
            property: {
              type: "Identifier",
              start: 33,
              end: 41,
              loc: {
                start: {
                  line: 1,
                  column: 33
                },
                end: {
                  line: 1,
                  column: 41
                }
              },
              name: "milkyway"
            },
            computed: false
          }
        }
      ]
    },
    "earth.asia.Indonesia.prepareForElection(2014)": {
      type: "Program",
      start: 0,
      end: 45,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 45
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 45,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 45
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 45,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 45
              }
            },
            callee: {
              type: "MemberExpression",
              start: 0,
              end: 39,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 39
                }
              },
              object: {
                type: "MemberExpression",
                start: 0,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                object: {
                  type: "MemberExpression",
                  start: 0,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 0
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  object: {
                    type: "Identifier",
                    start: 0,
                    end: 5,
                    loc: {
                      start: {
                        line: 1,
                        column: 0
                      },
                      end: {
                        line: 1,
                        column: 5
                      }
                    },
                    name: "earth"
                  },
                  property: {
                    type: "Identifier",
                    start: 6,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    name: "asia"
                  },
                  computed: false
                },
                property: {
                  type: "Identifier",
                  start: 11,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  name: "Indonesia"
                },
                computed: false
              },
              property: {
                type: "Identifier",
                start: 21,
                end: 39,
                loc: {
                  start: {
                    line: 1,
                    column: 21
                  },
                  end: {
                    line: 1,
                    column: 39
                  }
                },
                name: "prepareForElection"
              },
              computed: false
            },
            arguments: [
              {
                type: "Literal",
                start: 40,
                end: 44,
                loc: {
                  start: {
                    line: 1,
                    column: 40
                  },
                  end: {
                    line: 1,
                    column: 44
                  }
                },
                value: 2014,
                raw: "2014"
              }
            ]
          }
        }
      ]
    },
    "universe.if": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "if"
            },
            computed: false
          }
        }
      ]
    },
    "universe.true": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              name: "true"
            },
            computed: false
          }
        }
      ]
    },
    "universe.false": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              name: "false"
            },
            computed: false
          }
        }
      ]
    },
    "universe.null": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "universe"
            },
            property: {
              type: "Identifier",
              start: 9,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              name: "null"
            },
            computed: false
          }
        }
      ]
    },
    "x++": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "x--": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            operator: "--",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "eval++": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              name: "eval"
            }
          }
        }
      ]
    },
    "eval--": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "--",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              name: "eval"
            }
          }
        }
      ]
    },
    "arguments++": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "arguments"
            }
          }
        }
      ]
    },
    "arguments--": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            operator: "--",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "arguments"
            }
          }
        }
      ]
    },
    "++x": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            operator: "++",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "--x": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            operator: "--",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "++eval": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "++",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "eval"
            }
          }
        }
      ]
    },
    "--eval": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "--",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "eval"
            }
          }
        }
      ]
    },
    "++arguments": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            operator: "++",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "arguments"
            }
          }
        }
      ]
    },
    "--arguments": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            operator: "--",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 2,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "arguments"
            }
          }
        }
      ]
    },
    "+x": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            operator: "+",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "-x": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            operator: "-",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "~x": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            operator: "~",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "!x": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            operator: "!",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "void x": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "void",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "delete x": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: "delete",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "typeof x": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "UnaryExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: "typeof",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "x"
            }
          }
        }
      ]
    },
    "x * y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "*",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x / y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "/",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x % y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "%",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x + y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "+",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x - y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "-",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x << y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "<<",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x >> y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: ">>",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x >>> y": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: ">>>",
            right: {
              type: "Identifier",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x < y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x > y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: ">",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x <= y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "<=",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x >= y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: ">=",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x in y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "in",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x instanceof y": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "instanceof",
            right: {
              type: "Identifier",
              start: 13,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x < y < z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "<",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "<",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x == y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "==",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x != y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "!=",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x === y": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "===",
            right: {
              type: "Identifier",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x !== y": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "!==",
            right: {
              type: "Identifier",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x & y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "&",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x ^ y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "^",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x | y": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "|",
            right: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x + y + z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "+",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "+",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x - y + z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "-",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "+",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x + y - z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "+",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "-",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x - y - z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "-",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "-",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x + y * z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "+",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              left: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              },
              operator: "*",
              right: {
                type: "Identifier",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x + y / z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "+",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              left: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              },
              operator: "/",
              right: {
                type: "Identifier",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x - y % z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "-",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              left: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              },
              operator: "%",
              right: {
                type: "Identifier",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x * y * z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "*",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "*",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x * y / z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "*",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "/",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x * y % z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "*",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "%",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x % y * z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "%",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "*",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x << y << z": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "<<",
              right: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              }
            },
            operator: "<<",
            right: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x | y | z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "|",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "|",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x & y & z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "&",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "&",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x ^ y ^ z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "^",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "^",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x & y | z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "&",
              right: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              }
            },
            operator: "|",
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x | y ^ z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "|",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              left: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              },
              operator: "^",
              right: {
                type: "Identifier",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x | y & z": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "|",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              left: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "y"
              },
              operator: "&",
              right: {
                type: "Identifier",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x || y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "||",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x && y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "&&",
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "x || y || z": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            left: {
              type: "LogicalExpression",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "||",
              right: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              }
            },
            operator: "||",
            right: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x && y && z": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            left: {
              type: "LogicalExpression",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "&&",
              right: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              }
            },
            operator: "&&",
            right: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "z"
            }
          }
        }
      ]
    },
    "x || y && z": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "||",
            right: {
              type: "LogicalExpression",
              start: 5,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              left: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              },
              operator: "&&",
              right: {
                type: "Identifier",
                start: 10,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "x || y ^ z": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "LogicalExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            operator: "||",
            right: {
              type: "BinaryExpression",
              start: 5,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              left: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              },
              operator: "^",
              right: {
                type: "Identifier",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                name: "z"
              }
            }
          }
        }
      ]
    },
    "y ? 1 : 2": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "ConditionalExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            test: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "y"
            },
            consequent: {
              type: "Literal",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              value: 1,
              raw: "1"
            },
            alternate: {
              type: "Literal",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "x && y ? 1 : 2": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "ConditionalExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            test: {
              type: "LogicalExpression",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              left: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              operator: "&&",
              right: {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "y"
              }
            },
            consequent: {
              type: "Literal",
              start: 9,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              value: 1,
              raw: "1"
            },
            alternate: {
              type: "Literal",
              start: 13,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "x = 42": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 4,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "eval = 42": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              name: "eval"
            },
            right: {
              type: "Literal",
              start: 7,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "arguments = 42": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              name: "arguments"
            },
            right: {
              type: "Literal",
              start: 12,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x *= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "*=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x /= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "/=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x %= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "%=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x += 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "+=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x -= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "-=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x <<= 42": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: "<<=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 6,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x >>= 42": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: ">>=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 6,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x >>>= 42": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: ">>>=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 7,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x &= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "&=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x ^= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "^=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "x |= 42": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "|=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ]
    },
    "{ foo }": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          body: [
            {
              type: "ExpressionStatement",
              start: 2,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              expression: {
                type: "Identifier",
                start: 2,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "foo"
              }
            }
          ]
        }
      ]
    },
    "{ doThis(); doThat(); }": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          body: [
            {
              type: "ExpressionStatement",
              start: 2,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              expression: {
                type: "CallExpression",
                start: 2,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                callee: {
                  type: "Identifier",
                  start: 2,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 2
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  name: "doThis"
                },
                arguments: []
              }
            },
            {
              type: "ExpressionStatement",
              start: 12,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              expression: {
                type: "CallExpression",
                start: 12,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                callee: {
                  type: "Identifier",
                  start: 12,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  name: "doThat"
                },
                arguments: []
              }
            }
          ]
        }
      ]
    },
    "{}": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          body: []
        }
      ]
    },
    "var x": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: null
            }
          ]
        }
      ]
    },
    "var await": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "await"
              },
              init: null
            }
          ]
        }
      ]
    },
    "var x, y;": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              id: {
                type: "Identifier",
                start: 7,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "y"
              },
              init: null
            }
          ]
        }
      ]
    },
    "var x = 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ]
    },
    "var eval = 42, arguments = 42": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "eval"
              },
              init: {
                type: "Literal",
                start: 11,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                value: 42,
                raw: "42"
              }
            },
            {
              type: "VariableDeclarator",
              start: 15,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              id: {
                type: "Identifier",
                start: 15,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "arguments"
              },
              init: {
                type: "Literal",
                start: 27,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 27
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ]
    },
    "var x = 14, y = 3, z = 1977": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                value: 14,
                raw: "14"
              }
            },
            {
              type: "VariableDeclarator",
              start: 12,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              id: {
                type: "Identifier",
                start: 12,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "y"
              },
              init: {
                type: "Literal",
                start: 16,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                value: 3,
                raw: "3"
              }
            },
            {
              type: "VariableDeclarator",
              start: 19,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              id: {
                type: "Identifier",
                start: 19,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                name: "z"
              },
              init: {
                type: "Literal",
                start: 23,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                value: 1977,
                raw: "1977"
              }
            }
          ]
        }
      ]
    },
    "var implements, interface, package": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                name: "implements"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 16,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              id: {
                type: "Identifier",
                start: 16,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                name: "interface"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 27,
              end: 34,
              loc: {
                start: {
                  line: 1,
                  column: 27
                },
                end: {
                  line: 1,
                  column: 34
                }
              },
              id: {
                type: "Identifier",
                start: 27,
                end: 34,
                loc: {
                  start: {
                    line: 1,
                    column: 27
                  },
                  end: {
                    line: 1,
                    column: 34
                  }
                },
                name: "package"
              },
              init: null
            }
          ]
        }
      ]
    },
    "var private, protected, public, static": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "private"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 13,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              id: {
                type: "Identifier",
                start: 13,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                name: "protected"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 24,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 24
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              id: {
                type: "Identifier",
                start: 24,
                end: 30,
                loc: {
                  start: {
                    line: 1,
                    column: 24
                  },
                  end: {
                    line: 1,
                    column: 30
                  }
                },
                name: "public"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 32,
              end: 38,
              loc: {
                start: {
                  line: 1,
                  column: 32
                },
                end: {
                  line: 1,
                  column: 38
                }
              },
              id: {
                type: "Identifier",
                start: 32,
                end: 38,
                loc: {
                  start: {
                    line: 1,
                    column: 32
                  },
                  end: {
                    line: 1,
                    column: 38
                  }
                },
                name: "static"
              },
              init: null
            }
          ]
        }
      ]
    },
    ";": {
      type: "Program",
      start: 0,
      end: 1,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      },
      body: [
        {
          type: "EmptyStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          }
        }
      ]
    },
    "x": {
      type: "Program",
      start: 0,
      end: 1,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 1,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            },
            name: "x"
          }
        }
      ]
    },
    "x, y": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "SequenceExpression",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            expressions: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "x"
              },
              {
                type: "Identifier",
                start: 3,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                name: "y"
              }
            ]
          }
        }
      ]
    },
    "\\u0061": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            name: "a"
          }
        }
      ]
    },
    "a\\u0061": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "aa"
          }
        }
      ]
    },
    "if (morning) goodMorning()": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 11
              }
            },
            name: "morning"
          },
          consequent: {
            type: "ExpressionStatement",
            start: 13,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 26
              }
            },
            expression: {
              type: "CallExpression",
              start: 13,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              callee: {
                type: "Identifier",
                start: 13,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "goodMorning"
              },
              arguments: []
            }
          },
          alternate: null
        }
      ]
    },
    "if (morning) (function(){})": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 11
              }
            },
            name: "morning"
          },
          consequent: {
            type: "ExpressionStatement",
            start: 13,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 27
              }
            },
            expression: {
              type: "FunctionExpression",
              start: 14,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              id: null,
              params: [],
              body: {
                type: "BlockStatement",
                start: 24,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 24
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                body: []
              }
            }
          },
          alternate: null
        }
      ]
    },
    "if (morning) var x = 0;": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 11
              }
            },
            name: "morning"
          },
          consequent: {
            type: "VariableDeclaration",
            start: 13,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 23
              }
            },
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 17,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                id: {
                  type: "Identifier",
                  start: 17,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 21,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  value: 0,
                  raw: "0"
                }
              }
            ]
          },
          alternate: null
        }
      ]
    },
    "if (morning) function a(){}": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 11
              }
            },
            name: "morning"
          },
          consequent: {
            type: "FunctionDeclaration",
            start: 13,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 27
              }
            },
            id: {
              type: "Identifier",
              start: 22,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 22
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              name: "a"
            },
            params: [],
            body: {
              type: "BlockStatement",
              start: 25,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              body: []
            }
          },
          alternate: null
        }
      ]
    },
    "if (morning) goodMorning(); else goodDay()": {
      type: "Program",
      start: 0,
      end: 42,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 42
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 42,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 42
            }
          },
          test: {
            type: "Identifier",
            start: 4,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 11
              }
            },
            name: "morning"
          },
          consequent: {
            type: "ExpressionStatement",
            start: 13,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 27
              }
            },
            expression: {
              type: "CallExpression",
              start: 13,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              callee: {
                type: "Identifier",
                start: 13,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "goodMorning"
              },
              arguments: []
            }
          },
          alternate: {
            type: "ExpressionStatement",
            start: 33,
            end: 42,
            loc: {
              start: {
                line: 1,
                column: 33
              },
              end: {
                line: 1,
                column: 42
              }
            },
            expression: {
              type: "CallExpression",
              start: 33,
              end: 42,
              loc: {
                start: {
                  line: 1,
                  column: 33
                },
                end: {
                  line: 1,
                  column: 42
                }
              },
              callee: {
                type: "Identifier",
                start: 33,
                end: 40,
                loc: {
                  start: {
                    line: 1,
                    column: 33
                  },
                  end: {
                    line: 1,
                    column: 40
                  }
                },
                name: "goodDay"
              },
              arguments: []
            }
          }
        }
      ]
    },
    "do keep(); while (true)": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      body: [
        {
          type: "DoWhileStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 3,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 10
              }
            },
            expression: {
              type: "CallExpression",
              start: 3,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              callee: {
                type: "Identifier",
                start: 3,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "keep"
              },
              arguments: []
            }
          },
          test: {
            type: "Literal",
            start: 18,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 22
              }
            },
            value: true,
            raw: "true"
          }
        }
      ]
    },
    "do keep(); while (true);": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "DoWhileStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 3,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 10
              }
            },
            expression: {
              type: "CallExpression",
              start: 3,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              callee: {
                type: "Identifier",
                start: 3,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "keep"
              },
              arguments: []
            }
          },
          test: {
            type: "Literal",
            start: 18,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 22
              }
            },
            value: true,
            raw: "true"
          }
        }
      ]
    },
    "do { x++; y--; } while (x < 10)": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "DoWhileStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          body: {
            type: "BlockStatement",
            start: 3,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 16
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 5,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                expression: {
                  type: "UpdateExpression",
                  start: 5,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  operator: "++",
                  prefix: false,
                  argument: {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    name: "x"
                  }
                }
              },
              {
                type: "ExpressionStatement",
                start: 10,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                expression: {
                  type: "UpdateExpression",
                  start: 10,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  operator: "--",
                  prefix: false,
                  argument: {
                    type: "Identifier",
                    start: 10,
                    end: 11,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 11
                      }
                    },
                    name: "y"
                  }
                }
              }
            ]
          },
          test: {
            type: "BinaryExpression",
            start: 24,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 24
              },
              end: {
                line: 1,
                column: 30
              }
            },
            left: {
              type: "Identifier",
              start: 24,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 24
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Literal",
              start: 28,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 28
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              value: 10,
              raw: "10"
            }
          }
        }
      ]
    },
    "{ do { } while (false);false }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          body: [
            {
              type: "DoWhileStatement",
              start: 2,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              body: {
                type: "BlockStatement",
                start: 5,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                body: []
              },
              test: {
                type: "Literal",
                start: 16,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                value: false,
                raw: "false"
              }
            },
            {
              type: "ExpressionStatement",
              start: 23,
              end: 28,
              loc: {
                start: {
                  line: 1,
                  column: 23
                },
                end: {
                  line: 1,
                  column: 28
                }
              },
              expression: {
                type: "Literal",
                start: 23,
                end: 28,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 28
                  }
                },
                value: false,
                raw: "false"
              }
            }
          ]
        }
      ]
    },
    "while (true) doSomething()": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "ExpressionStatement",
            start: 13,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 26
              }
            },
            expression: {
              type: "CallExpression",
              start: 13,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              callee: {
                type: "Identifier",
                start: 13,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "doSomething"
              },
              arguments: []
            }
          }
        }
      ]
    },
    "while (x < 10) { x++; y--; }": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          test: {
            type: "BinaryExpression",
            start: 7,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 13
              }
            },
            left: {
              type: "Identifier",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Literal",
              start: 11,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              value: 10,
              raw: "10"
            }
          },
          body: {
            type: "BlockStatement",
            start: 15,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 28
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                expression: {
                  type: "UpdateExpression",
                  start: 17,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  operator: "++",
                  prefix: false,
                  argument: {
                    type: "Identifier",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    name: "x"
                  }
                }
              },
              {
                type: "ExpressionStatement",
                start: 22,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 22
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                expression: {
                  type: "UpdateExpression",
                  start: 22,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  operator: "--",
                  prefix: false,
                  argument: {
                    type: "Identifier",
                    start: 22,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 22
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    name: "y"
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "for(;;);": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          init: null,
          update: null,
          test: null,
          body: {
            type: "EmptyStatement",
            start: 7,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 8
              }
            }
          }
        }
      ]
    },
    "for(;;){}": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          init: null,
          update: null,
          test: null,
          body: {
            type: "BlockStatement",
            start: 7,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 9
              }
            },
            body: []
          }
        }
      ]
    },
    "for(x = 0;;);": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          init: {
            type: "AssignmentExpression",
            start: 4,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 0,
              raw: "0"
            }
          },
          update: null,
          test: null,
          body: {
            type: "EmptyStatement",
            start: 12,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 12
              },
              end: {
                line: 1,
                column: 13
              }
            }
          }
        }
      ]
    },
    "for(var x = 0;;);": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          init: {
            type: "VariableDeclaration",
            start: 4,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 13
              }
            },
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                id: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  value: 0,
                  raw: "0"
                }
              }
            ]
          },
          update: null,
          test: null,
          body: {
            type: "EmptyStatement",
            start: 16,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 17
              }
            }
          }
        }
      ]
    },
    "for(var x = 0, y = 1;;);": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          init: {
            type: "VariableDeclaration",
            start: 4,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 20
              }
            },
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                id: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  value: 0,
                  raw: "0"
                }
              },
              {
                type: "VariableDeclarator",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                id: {
                  type: "Identifier",
                  start: 15,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 15
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  name: "y"
                },
                init: {
                  type: "Literal",
                  start: 19,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  value: 1,
                  raw: "1"
                }
              }
            ]
          },
          update: null,
          test: null,
          body: {
            type: "EmptyStatement",
            start: 23,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 24
              }
            }
          }
        }
      ]
    },
    "for(x = 0; x < 42;);": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          init: {
            type: "AssignmentExpression",
            start: 4,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 0,
              raw: "0"
            }
          },
          update: null,
          test: {
            type: "BinaryExpression",
            start: 11,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 11
              },
              end: {
                line: 1,
                column: 17
              }
            },
            left: {
              type: "Identifier",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Literal",
              start: 15,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: 42,
              raw: "42"
            }
          },
          body: {
            type: "EmptyStatement",
            start: 19,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 19
              },
              end: {
                line: 1,
                column: 20
              }
            }
          }
        }
      ]
    },
    "for(x = 0; x < 42; x++);": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          init: {
            type: "AssignmentExpression",
            start: 4,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 0,
              raw: "0"
            }
          },
          update: {
            type: "UpdateExpression",
            start: 19,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 19
              },
              end: {
                line: 1,
                column: 22
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 19,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              name: "x"
            }
          },
          test: {
            type: "BinaryExpression",
            start: 11,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 11
              },
              end: {
                line: 1,
                column: 17
              }
            },
            left: {
              type: "Identifier",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Literal",
              start: 15,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: 42,
              raw: "42"
            }
          },
          body: {
            type: "EmptyStatement",
            start: 23,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 24
              }
            }
          }
        }
      ]
    },
    "for(x = 0; x < 42; x++) process(x);": {
      type: "Program",
      start: 0,
      end: 35,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 35
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 35,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 35
            }
          },
          init: {
            type: "AssignmentExpression",
            start: 4,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 9
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 8,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              value: 0,
              raw: "0"
            }
          },
          update: {
            type: "UpdateExpression",
            start: 19,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 19
              },
              end: {
                line: 1,
                column: 22
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 19,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              name: "x"
            }
          },
          test: {
            type: "BinaryExpression",
            start: 11,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 11
              },
              end: {
                line: 1,
                column: 17
              }
            },
            left: {
              type: "Identifier",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              name: "x"
            },
            operator: "<",
            right: {
              type: "Literal",
              start: 15,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: 42,
              raw: "42"
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 24,
            end: 35,
            loc: {
              start: {
                line: 1,
                column: 24
              },
              end: {
                line: 1,
                column: 35
              }
            },
            expression: {
              type: "CallExpression",
              start: 24,
              end: 34,
              loc: {
                start: {
                  line: 1,
                  column: 24
                },
                end: {
                  line: 1,
                  column: 34
                }
              },
              callee: {
                type: "Identifier",
                start: 24,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 24
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 32,
                  end: 33,
                  loc: {
                    start: {
                      line: 1,
                      column: 32
                    },
                    end: {
                      line: 1,
                      column: 33
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ]
    },
    "for(x in list) process(x);": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          left: {
            type: "Identifier",
            start: 4,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 5
              }
            },
            name: "x"
          },
          right: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 15,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 26
              }
            },
            expression: {
              type: "CallExpression",
              start: 15,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              callee: {
                type: "Identifier",
                start: 15,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 23,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ]
    },
    "for (var x in list) process(x);": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 10
              }
            },
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  name: "x"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 14,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 18
              }
            },
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 20,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 31
              }
            },
            expression: {
              type: "CallExpression",
              start: 20,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              callee: {
                type: "Identifier",
                start: 20,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 28,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ]
    },
    "for (var x = 42 in list) process(x);": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 15
              }
            },
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 13,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  value: 42,
                  raw: "42"
                }
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 19,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 19
              },
              end: {
                line: 1,
                column: 23
              }
            },
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 25,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 25
              },
              end: {
                line: 1,
                column: 36
              }
            },
            expression: {
              type: "CallExpression",
              start: 25,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              callee: {
                type: "Identifier",
                start: 25,
                end: 32,
                loc: {
                  start: {
                    line: 1,
                    column: 25
                  },
                  end: {
                    line: 1,
                    column: 32
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 33,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 33
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ]
    },
    "for (var i = function() { return 10 in [] } in list) process(x);": {
      type: "Program",
      start: 0,
      end: 64,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 64
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 64,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 64
            }
          },
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 43,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 43
              }
            },
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 43,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 43
                  }
                },
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  name: "i"
                },
                init: {
                  type: "FunctionExpression",
                  start: 13,
                  end: 43,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 43
                    }
                  },
                  id: null,
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 24,
                    end: 43,
                    loc: {
                      start: {
                        line: 1,
                        column: 24
                      },
                      end: {
                        line: 1,
                        column: 43
                      }
                    },
                    body: [
                      {
                        type: "ReturnStatement",
                        start: 26,
                        end: 41,
                        loc: {
                          start: {
                            line: 1,
                            column: 26
                          },
                          end: {
                            line: 1,
                            column: 41
                          }
                        },
                        argument: {
                          type: "BinaryExpression",
                          start: 33,
                          end: 41,
                          loc: {
                            start: {
                              line: 1,
                              column: 33
                            },
                            end: {
                              line: 1,
                              column: 41
                            }
                          },
                          left: {
                            type: "Literal",
                            start: 33,
                            end: 35,
                            loc: {
                              start: {
                                line: 1,
                                column: 33
                              },
                              end: {
                                line: 1,
                                column: 35
                              }
                            },
                            value: 10,
                            raw: "10"
                          },
                          operator: "in",
                          right: {
                            type: "ArrayExpression",
                            start: 39,
                            end: 41,
                            loc: {
                              start: {
                                line: 1,
                                column: 39
                              },
                              end: {
                                line: 1,
                                column: 41
                              }
                            },
                            elements: []
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 47,
            end: 51,
            loc: {
              start: {
                line: 1,
                column: 47
              },
              end: {
                line: 1,
                column: 51
              }
            },
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 53,
            end: 64,
            loc: {
              start: {
                line: 1,
                column: 53
              },
              end: {
                line: 1,
                column: 64
              }
            },
            expression: {
              type: "CallExpression",
              start: 53,
              end: 63,
              loc: {
                start: {
                  line: 1,
                  column: 53
                },
                end: {
                  line: 1,
                  column: 63
                }
              },
              callee: {
                type: "Identifier",
                start: 53,
                end: 60,
                loc: {
                  start: {
                    line: 1,
                    column: 53
                  },
                  end: {
                    line: 1,
                    column: 60
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 61,
                  end: 62,
                  loc: {
                    start: {
                      line: 1,
                      column: 61
                    },
                    end: {
                      line: 1,
                      column: 62
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ]
    },
    "while (true) { continue; }": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 26
              }
            },
            body: [
              {
                type: "ContinueStatement",
                start: 15,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                label: null
              }
            ]
          }
        }
      ]
    },
    "while (true) { continue }": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 25
              }
            },
            body: [
              {
                type: "ContinueStatement",
                start: 15,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                label: null
              }
            ]
          }
        }
      ]
    },
    "done: while (true) { continue done }": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          body: {
            type: "WhileStatement",
            start: 6,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 36
              }
            },
            test: {
              type: "Literal",
              start: 13,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: true,
              raw: "true"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              body: [
                {
                  type: "ContinueStatement",
                  start: 21,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  label: {
                    type: "Identifier",
                    start: 30,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 30
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    name: "done"
                  }
                }
              ]
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            name: "done"
          }
        }
      ]
    },
    "done: while (true) { continue done; }": {
      type: "Program",
      start: 0,
      end: 37,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 37
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 37,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 37
            }
          },
          body: {
            type: "WhileStatement",
            start: 6,
            end: 37,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 37
              }
            },
            test: {
              type: "Literal",
              start: 13,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: true,
              raw: "true"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 37,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 37
                }
              },
              body: [
                {
                  type: "ContinueStatement",
                  start: 21,
                  end: 35,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 35
                    }
                  },
                  label: {
                    type: "Identifier",
                    start: 30,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 30
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    name: "done"
                  }
                }
              ]
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            name: "done"
          }
        }
      ]
    },
    "while (true) { break }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 22
              }
            },
            body: [
              {
                type: "BreakStatement",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                label: null
              }
            ]
          }
        }
      ]
    },
    "done: while (true) { break done }": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          body: {
            type: "WhileStatement",
            start: 6,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 33
              }
            },
            test: {
              type: "Literal",
              start: 13,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: true,
              raw: "true"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              body: [
                {
                  type: "BreakStatement",
                  start: 21,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  label: {
                    type: "Identifier",
                    start: 27,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    name: "done"
                  }
                }
              ]
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            name: "done"
          }
        }
      ]
    },
    "done: while (true) { break done; }": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          body: {
            type: "WhileStatement",
            start: 6,
            end: 34,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 34
              }
            },
            test: {
              type: "Literal",
              start: 13,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: true,
              raw: "true"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 34,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 34
                }
              },
              body: [
                {
                  type: "BreakStatement",
                  start: 21,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  label: {
                    type: "Identifier",
                    start: 27,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    name: "done"
                  }
                }
              ]
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            name: "done"
          }
        }
      ]
    },
    "target1: target2: while (true) { continue target1; }": {
      type: "Program",
      start: 0,
      end: 52,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 52
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 52,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 52
            }
          },
          body: {
            type: "LabeledStatement",
            start: 9,
            end: 52,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 52
              }
            },
            body: {
              type: "WhileStatement",
              start: 18,
              end: 52,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 52
                }
              },
              test: {
                type: "Literal",
                start: 25,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 25
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                value: true,
                raw: "true"
              },
              body: {
                type: "BlockStatement",
                start: 31,
                end: 52,
                loc: {
                  start: {
                    line: 1,
                    column: 31
                  },
                  end: {
                    line: 1,
                    column: 52
                  }
                },
                body: [
                  {
                    type: "ContinueStatement",
                    start: 33,
                    end: 50,
                    loc: {
                      start: {
                        line: 1,
                        column: 33
                      },
                      end: {
                        line: 1,
                        column: 50
                      }
                    },
                    label: {
                      type: "Identifier",
                      start: 42,
                      end: 49,
                      loc: {
                        start: {
                          line: 1,
                          column: 42
                        },
                        end: {
                          line: 1,
                          column: 49
                        }
                      },
                      name: "target1"
                    }
                  }
                ]
              }
            },
            label: {
              type: "Identifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "target2"
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "target1"
          }
        }
      ]
    },
    "target1: target2: target3: while (true) { continue target1; }": {
      type: "Program",
      start: 0,
      end: 61,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 61
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 61,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 61
            }
          },
          body: {
            type: "LabeledStatement",
            start: 9,
            end: 61,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 61
              }
            },
            body: {
              type: "LabeledStatement",
              start: 18,
              end: 61,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 61
                }
              },
              body: {
                type: "WhileStatement",
                start: 27,
                end: 61,
                loc: {
                  start: {
                    line: 1,
                    column: 27
                  },
                  end: {
                    line: 1,
                    column: 61
                  }
                },
                test: {
                  type: "Literal",
                  start: 34,
                  end: 38,
                  loc: {
                    start: {
                      line: 1,
                      column: 34
                    },
                    end: {
                      line: 1,
                      column: 38
                    }
                  },
                  value: true,
                  raw: "true"
                },
                body: {
                  type: "BlockStatement",
                  start: 40,
                  end: 61,
                  loc: {
                    start: {
                      line: 1,
                      column: 40
                    },
                    end: {
                      line: 1,
                      column: 61
                    }
                  },
                  body: [
                    {
                      type: "ContinueStatement",
                      start: 42,
                      end: 59,
                      loc: {
                        start: {
                          line: 1,
                          column: 42
                        },
                        end: {
                          line: 1,
                          column: 59
                        }
                      },
                      label: {
                        type: "Identifier",
                        start: 51,
                        end: 58,
                        loc: {
                          start: {
                            line: 1,
                            column: 51
                          },
                          end: {
                            line: 1,
                            column: 58
                          }
                        },
                        name: "target1"
                      }
                    }
                  ]
                }
              },
              label: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                name: "target3"
              }
            },
            label: {
              type: "Identifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "target2"
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "target1"
          }
        }
      ]
    },
    "(function(){ return })": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 21
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  argument: null
                }
              ]
            }
          }
        }
      ]
    },
    "(function(){ return; })": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 22
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  argument: null
                }
              ]
            }
          }
        }
      ]
    },
    "(function(){ return x; })": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 24
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  argument: {
                    type: "Identifier",
                    start: 20,
                    end: 21,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 21
                      }
                    },
                    name: "x"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "(function(){ return x * y })": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 27
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  argument: {
                    type: "BinaryExpression",
                    start: 20,
                    end: 25,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 25
                      }
                    },
                    left: {
                      type: "Identifier",
                      start: 20,
                      end: 21,
                      loc: {
                        start: {
                          line: 1,
                          column: 20
                        },
                        end: {
                          line: 1,
                          column: 21
                        }
                      },
                      name: "x"
                    },
                    operator: "*",
                    right: {
                      type: "Identifier",
                      start: 24,
                      end: 25,
                      loc: {
                        start: {
                          line: 1,
                          column: 24
                        },
                        end: {
                          line: 1,
                          column: 25
                        }
                      },
                      name: "y"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "with (x) foo = bar": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "WithStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          object: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "x"
          },
          body: {
            type: "ExpressionStatement",
            start: 9,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 18
              }
            },
            expression: {
              type: "AssignmentExpression",
              start: 9,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              operator: "=",
              left: {
                type: "Identifier",
                start: 9,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                name: "foo"
              },
              right: {
                type: "Identifier",
                start: 15,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                name: "bar"
              }
            }
          }
        }
      ]
    },
    "with (x) foo = bar;": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      body: [
        {
          type: "WithStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          object: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "x"
          },
          body: {
            type: "ExpressionStatement",
            start: 9,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 19
              }
            },
            expression: {
              type: "AssignmentExpression",
              start: 9,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              operator: "=",
              left: {
                type: "Identifier",
                start: 9,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                name: "foo"
              },
              right: {
                type: "Identifier",
                start: 15,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                name: "bar"
              }
            }
          }
        }
      ]
    },
    "'use\\x20strict'; with (x) foo = bar;": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            value: "use strict",
            raw: "'use\\x20strict'"
          }
        },
        {
          type: "WithStatement",
          start: 17,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 17
            },
            end: {
              line: 1,
              column: 36
            }
          },
          object: {
            type: "Identifier",
            start: 23,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 24
              }
            },
            name: "x"
          },
          body: {
            type: "ExpressionStatement",
            start: 26,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 26
              },
              end: {
                line: 1,
                column: 36
              }
            },
            expression: {
              type: "AssignmentExpression",
              start: 26,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              operator: "=",
              left: {
                type: "Identifier",
                start: 26,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 26
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                name: "foo"
              },
              right: {
                type: "Identifier",
                start: 32,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 32
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                name: "bar"
              }
            }
          }
        }
      ]
    },
    "\"use\\x20strict\"; with (x) foo = bar;": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            value: "use strict",
            raw: "\"use\\x20strict\""
          }
        },
        {
          type: "WithStatement",
          start: 17,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 17
            },
            end: {
              line: 1,
              column: 36
            }
          },
          object: {
            type: "Identifier",
            start: 23,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 24
              }
            },
            name: "x"
          },
          body: {
            type: "ExpressionStatement",
            start: 26,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 26
              },
              end: {
                line: 1,
                column: 36
              }
            },
            expression: {
              type: "AssignmentExpression",
              start: 26,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              operator: "=",
              left: {
                type: "Identifier",
                start: 26,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 26
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                name: "foo"
              },
              right: {
                type: "Identifier",
                start: 32,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 32
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                name: "bar"
              }
            }
          }
        }
      ]
    },
    "with (x) { foo = bar }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "WithStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          object: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "x"
          },
          body: {
            type: "BlockStatement",
            start: 9,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 22
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 11,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                expression: {
                  type: "AssignmentExpression",
                  start: 11,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  operator: "=",
                  left: {
                    type: "Identifier",
                    start: 11,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 11
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    name: "foo"
                  },
                  right: {
                    type: "Identifier",
                    start: 17,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    name: "bar"
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "switch (x) {}": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          discriminant: {
            type: "Identifier",
            start: 8,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 9
              }
            },
            name: "x"
          },
          cases: []
        }
      ]
    },
    "switch (answer) { case 42: hi(); break; }": {
      type: "Program",
      start: 0,
      end: 41,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 41
        }
      },
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 41,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 41
            }
          },
          discriminant: {
            type: "Identifier",
            start: 8,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "answer"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 18,
              end: 39,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 39
                }
              },
              consequent: [
                {
                  type: "ExpressionStatement",
                  start: 27,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 27
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 27,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 27,
                      end: 29,
                      loc: {
                        start: {
                          line: 1,
                          column: 27
                        },
                        end: {
                          line: 1,
                          column: 29
                        }
                      },
                      name: "hi"
                    },
                    arguments: []
                  }
                },
                {
                  type: "BreakStatement",
                  start: 33,
                  end: 39,
                  loc: {
                    start: {
                      line: 1,
                      column: 33
                    },
                    end: {
                      line: 1,
                      column: 39
                    }
                  },
                  label: null
                }
              ],
              test: {
                type: "Literal",
                start: 23,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ]
    },
    "switch (answer) { case 42: hi(); break; default: break }": {
      type: "Program",
      start: 0,
      end: 56,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 56
        }
      },
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 56,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 56
            }
          },
          discriminant: {
            type: "Identifier",
            start: 8,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "answer"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 18,
              end: 39,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 39
                }
              },
              consequent: [
                {
                  type: "ExpressionStatement",
                  start: 27,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 27
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 27,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 27,
                      end: 29,
                      loc: {
                        start: {
                          line: 1,
                          column: 27
                        },
                        end: {
                          line: 1,
                          column: 29
                        }
                      },
                      name: "hi"
                    },
                    arguments: []
                  }
                },
                {
                  type: "BreakStatement",
                  start: 33,
                  end: 39,
                  loc: {
                    start: {
                      line: 1,
                      column: 33
                    },
                    end: {
                      line: 1,
                      column: 39
                    }
                  },
                  label: null
                }
              ],
              test: {
                type: "Literal",
                start: 23,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                value: 42,
                raw: "42"
              }
            },
            {
              type: "SwitchCase",
              start: 40,
              end: 54,
              loc: {
                start: {
                  line: 1,
                  column: 40
                },
                end: {
                  line: 1,
                  column: 54
                }
              },
              consequent: [
                {
                  type: "BreakStatement",
                  start: 49,
                  end: 54,
                  loc: {
                    start: {
                      line: 1,
                      column: 49
                    },
                    end: {
                      line: 1,
                      column: 54
                    }
                  },
                  label: null
                }
              ],
              test: null
            }
          ]
        }
      ]
    },
    "start: for (;;) break start": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          body: {
            type: "ForStatement",
            start: 7,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 27
              }
            },
            init: null,
            update: null,
            test: null,
            body: {
              type: "BreakStatement",
              start: 16,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              label: {
                type: "Identifier",
                start: 22,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 22
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                name: "start"
              }
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            name: "start"
          }
        }
      ]
    },
    "start: while (true) break start": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          body: {
            type: "WhileStatement",
            start: 7,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 31
              }
            },
            test: {
              type: "Literal",
              start: 14,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              value: true,
              raw: "true"
            },
            body: {
              type: "BreakStatement",
              start: 20,
              end: 31,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 31
                }
              },
              label: {
                type: "Identifier",
                start: 26,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 26
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                name: "start"
              }
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            name: "start"
          }
        }
      ]
    },
    "throw x;": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ThrowStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          argument: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            name: "x"
          }
        }
      ]
    },
    "throw x * y": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      body: [
        {
          type: "ThrowStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          argument: {
            type: "BinaryExpression",
            start: 6,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 11
              }
            },
            left: {
              type: "Identifier",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              name: "x"
            },
            operator: "*",
            right: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              name: "y"
            }
          }
        }
      ]
    },
    "throw { message: \"Error\" }": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "ThrowStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          argument: {
            type: "ObjectExpression",
            start: 6,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 26
              }
            },
            properties: [
              {
                type: "Property",
                start: 8,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                key: {
                  type: "Identifier",
                  start: 8,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  name: "message"
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 17,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  value: "Error",
                  raw: "\"Error\""
                }
              }
            ]
          }
        }
      ]
    },
    "try { } catch (e) { }": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 7
              }
            },
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 8,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 21
              }
            },
            param: {
              type: "Identifier",
              start: 15,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "e"
            },
            body: {
              type: "BlockStatement",
              start: 18,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              body: []
            }
          },
          finalizer: null
        }
      ]
    },
    "try { } catch (eval) { }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 7
              }
            },
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 8,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 24
              }
            },
            param: {
              type: "Identifier",
              start: 15,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              name: "eval"
            },
            body: {
              type: "BlockStatement",
              start: 21,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              body: []
            }
          },
          finalizer: null
        }
      ]
    },
    "try { } catch (arguments) { }": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 7
              }
            },
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 8,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 29
              }
            },
            param: {
              type: "Identifier",
              start: 15,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              name: "arguments"
            },
            body: {
              type: "BlockStatement",
              start: 26,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              body: []
            }
          },
          finalizer: null
        }
      ]
    },
    "try { } catch (e) { say(e) }": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 7
              }
            },
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 8,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 28
              }
            },
            param: {
              type: "Identifier",
              start: 15,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "e"
            },
            body: {
              type: "BlockStatement",
              start: 18,
              end: 28,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 28
                }
              },
              body: [
                {
                  type: "ExpressionStatement",
                  start: 20,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 20,
                    end: 26,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 26
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 20,
                      end: 23,
                      loc: {
                        start: {
                          line: 1,
                          column: 20
                        },
                        end: {
                          line: 1,
                          column: 23
                        }
                      },
                      name: "say"
                    },
                    arguments: [
                      {
                        type: "Identifier",
                        start: 24,
                        end: 25,
                        loc: {
                          start: {
                            line: 1,
                            column: 24
                          },
                          end: {
                            line: 1,
                            column: 25
                          }
                        },
                        name: "e"
                      }
                    ]
                  }
                }
              ]
            }
          },
          finalizer: null
        }
      ]
    },
    "try { } finally { cleanup(stuff) }": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 7
              }
            },
            body: []
          },
          handler: null,
          finalizer: {
            type: "BlockStatement",
            start: 16,
            end: 34,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 34
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 18,
                end: 32,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 32
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 18,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 18
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 18,
                    end: 25,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 25
                      }
                    },
                    name: "cleanup"
                  },
                  arguments: [
                    {
                      type: "Identifier",
                      start: 26,
                      end: 31,
                      loc: {
                        start: {
                          line: 1,
                          column: 26
                        },
                        end: {
                          line: 1,
                          column: 31
                        }
                      },
                      name: "stuff"
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "try { doThat(); } catch (e) { say(e) }": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 17
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 6,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 6,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 6,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    name: "doThat"
                  },
                  arguments: []
                }
              }
            ]
          },
          handler: {
            type: "CatchClause",
            start: 18,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 38
              }
            },
            param: {
              type: "Identifier",
              start: 25,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              name: "e"
            },
            body: {
              type: "BlockStatement",
              start: 28,
              end: 38,
              loc: {
                start: {
                  line: 1,
                  column: 28
                },
                end: {
                  line: 1,
                  column: 38
                }
              },
              body: [
                {
                  type: "ExpressionStatement",
                  start: 30,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 30
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 30,
                    end: 36,
                    loc: {
                      start: {
                        line: 1,
                        column: 30
                      },
                      end: {
                        line: 1,
                        column: 36
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 30,
                      end: 33,
                      loc: {
                        start: {
                          line: 1,
                          column: 30
                        },
                        end: {
                          line: 1,
                          column: 33
                        }
                      },
                      name: "say"
                    },
                    arguments: [
                      {
                        type: "Identifier",
                        start: 34,
                        end: 35,
                        loc: {
                          start: {
                            line: 1,
                            column: 34
                          },
                          end: {
                            line: 1,
                            column: 35
                          }
                        },
                        name: "e"
                      }
                    ]
                  }
                }
              ]
            }
          },
          finalizer: null
        }
      ]
    },
    "try { doThat(); } catch (e) { say(e) } finally { cleanup(stuff) }": {
      type: "Program",
      start: 0,
      end: 65,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 65
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 65,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 65
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 17
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 6,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 6,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 6,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    name: "doThat"
                  },
                  arguments: []
                }
              }
            ]
          },
          handler: {
            type: "CatchClause",
            start: 18,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 38
              }
            },
            param: {
              type: "Identifier",
              start: 25,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              name: "e"
            },
            body: {
              type: "BlockStatement",
              start: 28,
              end: 38,
              loc: {
                start: {
                  line: 1,
                  column: 28
                },
                end: {
                  line: 1,
                  column: 38
                }
              },
              body: [
                {
                  type: "ExpressionStatement",
                  start: 30,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 30
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  expression: {
                    type: "CallExpression",
                    start: 30,
                    end: 36,
                    loc: {
                      start: {
                        line: 1,
                        column: 30
                      },
                      end: {
                        line: 1,
                        column: 36
                      }
                    },
                    callee: {
                      type: "Identifier",
                      start: 30,
                      end: 33,
                      loc: {
                        start: {
                          line: 1,
                          column: 30
                        },
                        end: {
                          line: 1,
                          column: 33
                        }
                      },
                      name: "say"
                    },
                    arguments: [
                      {
                        type: "Identifier",
                        start: 34,
                        end: 35,
                        loc: {
                          start: {
                            line: 1,
                            column: 34
                          },
                          end: {
                            line: 1,
                            column: 35
                          }
                        },
                        name: "e"
                      }
                    ]
                  }
                }
              ]
            }
          },
          finalizer: {
            type: "BlockStatement",
            start: 47,
            end: 65,
            loc: {
              start: {
                line: 1,
                column: 47
              },
              end: {
                line: 1,
                column: 65
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 49,
                end: 63,
                loc: {
                  start: {
                    line: 1,
                    column: 49
                  },
                  end: {
                    line: 1,
                    column: 63
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 49,
                  end: 63,
                  loc: {
                    start: {
                      line: 1,
                      column: 49
                    },
                    end: {
                      line: 1,
                      column: 63
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 49,
                    end: 56,
                    loc: {
                      start: {
                        line: 1,
                        column: 49
                      },
                      end: {
                        line: 1,
                        column: 56
                      }
                    },
                    name: "cleanup"
                  },
                  arguments: [
                    {
                      type: "Identifier",
                      start: 57,
                      end: 62,
                      loc: {
                        start: {
                          line: 1,
                          column: 57
                        },
                        end: {
                          line: 1,
                          column: 62
                        }
                      },
                      name: "stuff"
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "debugger;": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "DebuggerStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          }
        }
      ]
    },
    "function hello() { sayHi(); }": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 17,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 17
              },
              end: {
                line: 1,
                column: 29
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 19,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 19,
                    end: 24,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 24
                      }
                    },
                    name: "sayHi"
                  },
                  arguments: []
                }
              }
            ]
          }
        }
      ]
    },
    "function eval() { }": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            name: "eval"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 16,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 19
              }
            },
            body: []
          }
        }
      ]
    },
    "function arguments() { }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 18
              }
            },
            name: "arguments"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 21,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 24
              }
            },
            body: []
          }
        }
      ]
    },
    "function test(t, t) { }": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            name: "test"
          },
          params: [
            {
              type: "Identifier",
              start: 14,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              name: "t"
            },
            {
              type: "Identifier",
              start: 17,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              name: "t"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 20,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 23
              }
            },
            body: []
          }
        }
      ]
    },
    "(function test(t, t) { })": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 24
              }
            },
            id: {
              type: "Identifier",
              start: 10,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              name: "test"
            },
            params: [
              {
                type: "Identifier",
                start: 15,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                name: "t"
              },
              {
                type: "Identifier",
                start: 18,
                end: 19,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 19
                  }
                },
                name: "t"
              }
            ],
            body: {
              type: "BlockStatement",
              start: 21,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              body: []
            }
          }
        }
      ]
    },
    "function eval() { function inner() { \"use strict\" } }": {
      type: "Program",
      start: 0,
      end: 53,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 53
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 53,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 53
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            name: "eval"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 16,
            end: 53,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 53
              }
            },
            body: [
              {
                type: "FunctionDeclaration",
                start: 18,
                end: 51,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 51
                  }
                },
                id: {
                  type: "Identifier",
                  start: 27,
                  end: 32,
                  loc: {
                    start: {
                      line: 1,
                      column: 27
                    },
                    end: {
                      line: 1,
                      column: 32
                    }
                  },
                  name: "inner"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 35,
                  end: 51,
                  loc: {
                    start: {
                      line: 1,
                      column: 35
                    },
                    end: {
                      line: 1,
                      column: 51
                    }
                  },
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 37,
                      end: 49,
                      loc: {
                        start: {
                          line: 1,
                          column: 37
                        },
                        end: {
                          line: 1,
                          column: 49
                        }
                      },
                      expression: {
                        type: "Literal",
                        start: 37,
                        end: 49,
                        loc: {
                          start: {
                            line: 1,
                            column: 37
                          },
                          end: {
                            line: 1,
                            column: 49
                          }
                        },
                        value: "use strict",
                        raw: "\"use strict\""
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "function hello(a) { sayHi(); }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          params: [
            {
              type: "Identifier",
              start: 15,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "a"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 18,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 30
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 20,
                end: 28,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 28
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 20,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 20,
                    end: 25,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 25
                      }
                    },
                    name: "sayHi"
                  },
                  arguments: []
                }
              }
            ]
          }
        }
      ]
    },
    "function hello(a, b) { sayHi(); }": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          params: [
            {
              type: "Identifier",
              start: 15,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "a"
            },
            {
              type: "Identifier",
              start: 18,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              name: "b"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 21,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 33
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 23,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                expression: {
                  type: "CallExpression",
                  start: 23,
                  end: 30,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 30
                    }
                  },
                  callee: {
                    type: "Identifier",
                    start: 23,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 23
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    name: "sayHi"
                  },
                  arguments: []
                }
              }
            ]
          }
        }
      ]
    },
    "var hi = function() { sayHi() };": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 32
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 32
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 31,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 31
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "hi"
              },
              init: {
                type: "FunctionExpression",
                start: 9,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                id: null,
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 20,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 22,
                      end: 29,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 29
                        }
                      },
                      expression: {
                        type: "CallExpression",
                        start: 22,
                        end: 29,
                        loc: {
                          start: {
                            line: 1,
                            column: 22
                          },
                          end: {
                            line: 1,
                            column: 29
                          }
                        },
                        callee: {
                          type: "Identifier",
                          start: 22,
                          end: 27,
                          loc: {
                            start: {
                              line: 1,
                              column: 22
                            },
                            end: {
                              line: 1,
                              column: 27
                            }
                          },
                          name: "sayHi"
                        },
                        arguments: []
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ]
    },
    "var hi = function eval() { };": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 28,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 28
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "hi"
              },
              init: {
                type: "FunctionExpression",
                start: 9,
                end: 28,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 28
                  }
                },
                id: {
                  type: "Identifier",
                  start: 18,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 18
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  name: "eval"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 25,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 25
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  body: []
                }
              }
            }
          ]
        }
      ]
    },
    "var hi = function arguments() { };": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "hi"
              },
              init: {
                type: "FunctionExpression",
                start: 9,
                end: 33,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 33
                  }
                },
                id: {
                  type: "Identifier",
                  start: 18,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 18
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  name: "arguments"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 30,
                  end: 33,
                  loc: {
                    start: {
                      line: 1,
                      column: 30
                    },
                    end: {
                      line: 1,
                      column: 33
                    }
                  },
                  body: []
                }
              }
            }
          ]
        }
      ]
    },
    "var hello = function hi() { sayHi() };": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 37,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 37
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "hello"
              },
              init: {
                type: "FunctionExpression",
                start: 12,
                end: 37,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 37
                  }
                },
                id: {
                  type: "Identifier",
                  start: 21,
                  end: 23,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 23
                    }
                  },
                  name: "hi"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 26,
                  end: 37,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 37
                    }
                  },
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 28,
                      end: 35,
                      loc: {
                        start: {
                          line: 1,
                          column: 28
                        },
                        end: {
                          line: 1,
                          column: 35
                        }
                      },
                      expression: {
                        type: "CallExpression",
                        start: 28,
                        end: 35,
                        loc: {
                          start: {
                            line: 1,
                            column: 28
                          },
                          end: {
                            line: 1,
                            column: 35
                          }
                        },
                        callee: {
                          type: "Identifier",
                          start: 28,
                          end: 33,
                          loc: {
                            start: {
                              line: 1,
                              column: 28
                            },
                            end: {
                              line: 1,
                              column: 33
                            }
                          },
                          name: "sayHi"
                        },
                        arguments: []
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ]
    },
    "(function(){})": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 13
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              body: []
            }
          }
        }
      ]
    },
    "{ x\n++y }": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          body: [
            {
              type: "ExpressionStatement",
              start: 2,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              expression: {
                type: "Identifier",
                start: 2,
                end: 3,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 3
                  }
                },
                name: "x"
              }
            },
            {
              type: "ExpressionStatement",
              start: 4,
              end: 7,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 3
                }
              },
              expression: {
                type: "UpdateExpression",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 3
                  }
                },
                operator: "++",
                prefix: true,
                argument: {
                  type: "Identifier",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 2,
                      column: 2
                    },
                    end: {
                      line: 2,
                      column: 3
                    }
                  },
                  name: "y"
                }
              }
            }
          ]
        }
      ]
    },
    "{ x\n--y }": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          body: [
            {
              type: "ExpressionStatement",
              start: 2,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              expression: {
                type: "Identifier",
                start: 2,
                end: 3,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 3
                  }
                },
                name: "x"
              }
            },
            {
              type: "ExpressionStatement",
              start: 4,
              end: 7,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 3
                }
              },
              expression: {
                type: "UpdateExpression",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 3
                  }
                },
                operator: "--",
                prefix: true,
                argument: {
                  type: "Identifier",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 2,
                      column: 2
                    },
                    end: {
                      line: 2,
                      column: 3
                    }
                  },
                  name: "y"
                }
              }
            }
          ]
        }
      ]
    },
    "var x /* comment */;": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: null
            }
          ]
        }
      ]
    },
    "{ var x = 14, y = 3\nz; }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 4
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 4
            }
          },
          body: [
            {
              type: "VariableDeclaration",
              start: 2,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              kind: "var",
              declarations: [
                {
                  type: "VariableDeclarator",
                  start: 6,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  id: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    name: "x"
                  },
                  init: {
                    type: "Literal",
                    start: 10,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    value: 14,
                    raw: "14"
                  }
                },
                {
                  type: "VariableDeclarator",
                  start: 14,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  id: {
                    type: "Identifier",
                    start: 14,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    name: "y"
                  },
                  init: {
                    type: "Literal",
                    start: 18,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    value: 3,
                    raw: "3"
                  }
                }
              ]
            },
            {
              type: "ExpressionStatement",
              start: 20,
              end: 22,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 2
                }
              },
              expression: {
                type: "Identifier",
                start: 20,
                end: 21,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 1
                  }
                },
                name: "z"
              }
            }
          ]
        }
      ]
    },
    "while (true) { continue\nthere; }": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 8
              }
            },
            body: [
              {
                type: "ContinueStatement",
                start: 15,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 24,
                end: 30,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 6
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 24,
                  end: 29,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 5
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "while (true) { continue // Comment\nthere; }": {
      type: "Program",
      start: 0,
      end: 43,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 43,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 43,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 8
              }
            },
            body: [
              {
                type: "ContinueStatement",
                start: 15,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 35,
                end: 41,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 6
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 35,
                  end: 40,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 5
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "while (true) { continue /* Multiline\nComment */there; }": {
      type: "Program",
      start: 0,
      end: 55,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 18
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 55,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 18
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 55,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 18
              }
            },
            body: [
              {
                type: "ContinueStatement",
                start: 15,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 47,
                end: 53,
                loc: {
                  start: {
                    line: 2,
                    column: 10
                  },
                  end: {
                    line: 2,
                    column: 16
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 47,
                  end: 52,
                  loc: {
                    start: {
                      line: 2,
                      column: 10
                    },
                    end: {
                      line: 2,
                      column: 15
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "while (true) { break\nthere; }": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 8
              }
            },
            body: [
              {
                type: "BreakStatement",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 21,
                end: 27,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 6
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 21,
                  end: 26,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 5
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "while (true) { break // Comment\nthere; }": {
      type: "Program",
      start: 0,
      end: 40,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 40,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 40,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 8
              }
            },
            body: [
              {
                type: "BreakStatement",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 32,
                end: 38,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 6
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 32,
                  end: 37,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 5
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "while (true) { break /* Multiline\nComment */there; }": {
      type: "Program",
      start: 0,
      end: 52,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 18
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 52,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 18
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 11
              }
            },
            value: true,
            raw: "true"
          },
          body: {
            type: "BlockStatement",
            start: 13,
            end: 52,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 2,
                column: 18
              }
            },
            body: [
              {
                type: "BreakStatement",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                label: null
              },
              {
                type: "ExpressionStatement",
                start: 44,
                end: 50,
                loc: {
                  start: {
                    line: 2,
                    column: 10
                  },
                  end: {
                    line: 2,
                    column: 16
                  }
                },
                expression: {
                  type: "Identifier",
                  start: 44,
                  end: 49,
                  loc: {
                    start: {
                      line: 2,
                      column: 10
                    },
                    end: {
                      line: 2,
                      column: 15
                    }
                  },
                  name: "there"
                }
              }
            ]
          }
        }
      ]
    },
    "(function(){ return\nx; })": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 2,
                column: 4
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 2,
                  column: 4
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  argument: null
                },
                {
                  type: "ExpressionStatement",
                  start: 20,
                  end: 22,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 2
                    }
                  },
                  expression: {
                    type: "Identifier",
                    start: 20,
                    end: 21,
                    loc: {
                      start: {
                        line: 2,
                        column: 0
                      },
                      end: {
                        line: 2,
                        column: 1
                      }
                    },
                    name: "x"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "(function(){ return // Comment\nx; })": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 35,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 2,
                column: 4
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 2,
                  column: 4
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  argument: null
                },
                {
                  type: "ExpressionStatement",
                  start: 31,
                  end: 33,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 2
                    }
                  },
                  expression: {
                    type: "Identifier",
                    start: 31,
                    end: 32,
                    loc: {
                      start: {
                        line: 2,
                        column: 0
                      },
                      end: {
                        line: 2,
                        column: 1
                      }
                    },
                    name: "x"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "(function(){ return/* Multiline\nComment */x; })": {
      type: "Program",
      start: 0,
      end: 47,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 15
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 47,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 15
            }
          },
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 46,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 2,
                column: 14
              }
            },
            id: null,
            params: [],
            body: {
              type: "BlockStatement",
              start: 11,
              end: 46,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 2,
                  column: 14
                }
              },
              body: [
                {
                  type: "ReturnStatement",
                  start: 13,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  argument: null
                },
                {
                  type: "ExpressionStatement",
                  start: 42,
                  end: 44,
                  loc: {
                    start: {
                      line: 2,
                      column: 10
                    },
                    end: {
                      line: 2,
                      column: 12
                    }
                  },
                  expression: {
                    type: "Identifier",
                    start: 42,
                    end: 43,
                    loc: {
                      start: {
                        line: 2,
                        column: 10
                      },
                      end: {
                        line: 2,
                        column: 11
                      }
                    },
                    name: "x"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "{ throw error\nerror; }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          body: [
            {
              type: "ThrowStatement",
              start: 2,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              argument: {
                type: "Identifier",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "error"
              }
            },
            {
              type: "ExpressionStatement",
              start: 14,
              end: 20,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 6
                }
              },
              expression: {
                type: "Identifier",
                start: 14,
                end: 19,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 5
                  }
                },
                name: "error"
              }
            }
          ]
        }
      ]
    },
    "{ throw error// Comment\nerror; }": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 8
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 8
            }
          },
          body: [
            {
              type: "ThrowStatement",
              start: 2,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              argument: {
                type: "Identifier",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "error"
              }
            },
            {
              type: "ExpressionStatement",
              start: 24,
              end: 30,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 6
                }
              },
              expression: {
                type: "Identifier",
                start: 24,
                end: 29,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 5
                  }
                },
                name: "error"
              }
            }
          ]
        }
      ]
    },
    "{ throw error/* Multiline\nComment */error; }": {
      type: "Program",
      start: 0,
      end: 44,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 18
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 44,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 18
            }
          },
          body: [
            {
              type: "ThrowStatement",
              start: 2,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              argument: {
                type: "Identifier",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "error"
              }
            },
            {
              type: "ExpressionStatement",
              start: 36,
              end: 42,
              loc: {
                start: {
                  line: 2,
                  column: 10
                },
                end: {
                  line: 2,
                  column: 16
                }
              },
              expression: {
                type: "Identifier",
                start: 36,
                end: 41,
                loc: {
                  start: {
                    line: 2,
                    column: 10
                  },
                  end: {
                    line: 2,
                    column: 15
                  }
                },
                name: "error"
              }
            }
          ]
        }
      ]
    },
    "": {
      type: "Program",
      start: 0,
      end: 0,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 0
        }
      },
      body: []
    },
    "foo: if (true) break foo;": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          body: {
            type: "IfStatement",
            start: 5,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 25
              }
            },
            test: {
              type: "Literal",
              start: 9,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              value: true,
              raw: "true"
            },
            consequent: {
              type: "BreakStatement",
              start: 15,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              label: {
                type: "Identifier",
                start: 21,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 21
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "foo"
              }
            },
            alternate: null
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            name: "foo"
          }
        }
      ]
    },
    "(function () {\n 'use strict';\n '\u0000';\n}())": {
      type: "Program",
      start: 0,
      end: 40,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 4,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 40,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 4,
              column: 4
            }
          },
          expression: {
            type: "CallExpression",
            start: 1,
            end: 39,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 4,
                column: 3
              }
            },
            callee: {
              type: "FunctionExpression",
              start: 1,
              end: 37,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 4,
                  column: 1
                }
              },
              id: null,
              params: [],
              body: {
                type: "BlockStatement",
                start: 13,
                end: 37,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 4,
                    column: 1
                  }
                },
                body: [
                  {
                    type: "ExpressionStatement",
                    start: 16,
                    end: 29,
                    loc: {
                      start: {
                        line: 2,
                        column: 1
                      },
                      end: {
                        line: 2,
                        column: 14
                      }
                    },
                    expression: {
                      type: "Literal",
                      start: 16,
                      end: 28,
                      loc: {
                        start: {
                          line: 2,
                          column: 1
                        },
                        end: {
                          line: 2,
                          column: 13
                        }
                      },
                      value: "use strict",
                      raw: "'use strict'"
                    }
                  },
                  {
                    type: "ExpressionStatement",
                    start: 31,
                    end: 35,
                    loc: {
                      start: {
                        line: 3,
                        column: 1
                      },
                      end: {
                        line: 3,
                        column: 5
                      }
                    },
                    expression: {
                      type: "Literal",
                      start: 31,
                      end: 34,
                      loc: {
                        start: {
                          line: 3,
                          column: 1
                        },
                        end: {
                          line: 3,
                          column: 4
                        }
                      },
                      value: "\u0000",
                      raw: "'\u0000'"
                    }
                  }
                ]
              }
            },
            arguments: []
          }
        }
      ]
    },
    "123..toString(10)": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "CallExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            callee: {
              type: "MemberExpression",
              start: 0,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              object: {
                type: "Literal",
                start: 0,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                value: 123,
                raw: "123."
              },
              property: {
                type: "Identifier",
                start: 5,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "toString"
              },
              computed: false
            },
            arguments: [
              {
                type: "Literal",
                start: 14,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 14
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                value: 10,
                raw: "10"
              }
            ]
          }
        }
      ]
    },
    "123.+2": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            left: {
              type: "Literal",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              value: 123,
              raw: "123."
            },
            operator: "+",
            right: {
              type: "Literal",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "a\u2028b": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 1
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 1,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            },
            name: "a"
          }
        },
        {
          type: "ExpressionStatement",
          start: 2,
          end: 3,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 1
            }
          },
          expression: {
            type: "Identifier",
            start: 2,
            end: 3,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 1
              }
            },
            name: "b"
          }
        }
      ]
    },
    "'a\\u0026b'": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            value: "a&b",
            raw: "'a\\u0026b'"
          }
        }
      ]
    },
    "foo: 10; foo: 20;": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 5,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 8
              }
            },
            expression: {
              type: "Literal",
              start: 5,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 10,
              raw: "10"
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            name: "foo"
          }
        },
        {
          type: "LabeledStatement",
          start: 9,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 9
            },
            end: {
              line: 1,
              column: 17
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 14,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 17
              }
            },
            expression: {
              type: "Literal",
              start: 14,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              value: 20,
              raw: "20"
            }
          },
          label: {
            type: "Identifier",
            start: 9,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 12
              }
            },
            name: "foo"
          }
        }
      ]
    },
    "if(1)/  foo/": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          test: {
            type: "Literal",
            start: 3,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 1,
            raw: "1"
          },
          consequent: {
            type: "ExpressionStatement",
            start: 5,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 12
              }
            },
            expression: {
              type: "Literal",
              start: 5,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              regex: {
                pattern: "  foo",
                flags: ""
              },
              value: {},
              raw: "/  foo/"
            }
          },
          alternate: null
        }
      ]
    },
    "price_9̶9̶_89": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            name: "price_9̶9̶_89"
          }
        }
      ]
    },
    "function hello() { 'use strict'; \"\\0\"; }": {
      type: "Program",
      start: 0,
      end: 40,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 40
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 40,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 40
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 17,
            end: 40,
            loc: {
              start: {
                line: 1,
                column: 17
              },
              end: {
                line: 1,
                column: 40
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 32,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 32
                  }
                },
                expression: {
                  type: "Literal",
                  start: 19,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  value: "use strict",
                  raw: "'use strict'"
                }
              },
              {
                type: "ExpressionStatement",
                start: 33,
                end: 38,
                loc: {
                  start: {
                    line: 1,
                    column: 33
                  },
                  end: {
                    line: 1,
                    column: 38
                  }
                },
                expression: {
                  type: "Literal",
                  start: 33,
                  end: 37,
                  loc: {
                    start: {
                      line: 1,
                      column: 33
                    },
                    end: {
                      line: 1,
                      column: 37
                    }
                  },
                  value: "\u0000",
                  raw: "\"\\0\""
                }
              }
            ]
          }
        }
      ]
    },
    "var a = 1;": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        },
        source: "test.js"
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            },
            source: "test.js"
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 9
                },
                source: "test.js"
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  },
                  source: "test.js"
                },
                name: "a"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 9
                  },
                  source: "test.js"
                },
                value: 1,
                raw: "1"
              }
            }
          ]
        }
      ]
    },
    "a.in / b": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            left: {
              type: "MemberExpression",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              object: {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                name: "a"
              },
              property: {
                type: "Identifier",
                start: 2,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                name: "in"
              },
              computed: false
            },
            operator: "/",
            right: {
              type: "Identifier",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              name: "b"
            }
          }
        }
      ]
    },
    "return {} / 2": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ReturnStatement",
          start: 0,
          end: 13,
          argument: {
            type: "BinaryExpression",
            start: 7,
            end: 13,
            left: {
              type: "ObjectExpression",
              start: 7,
              end: 9,
              properties: []
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 12,
              end: 13,
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "return\n{}\n/foo/": {
      type: "Program",
      start: 0,
      end: 15,
      body: [
        {
          type: "ReturnStatement",
          start: 0,
          end: 6,
          argument: null
        },
        {
          type: "BlockStatement",
          start: 7,
          end: 9,
          body: []
        },
        {
          type: "ExpressionStatement",
          start: 10,
          end: 15,
          expression: {
            type: "Literal",
            start: 10,
            end: 15,
            regex: {
              pattern: "foo",
              flags: ""
            },
            value: {},
            raw: "/foo/"
          }
        }
      ]
    },
    "+{} / 2": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            left: {
              type: "UnaryExpression",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              operator: "+",
              prefix: true,
              argument: {
                type: "ObjectExpression",
                start: 1,
                end: 3,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 3
                  }
                },
                properties: []
              }
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "{}\n/foo/": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          body: []
        },
        {
          type: "ExpressionStatement",
          start: 3,
          end: 8,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 3,
            end: 8,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 5
              }
            },
            regex: {
              pattern: "foo",
              flags: ""
            },
            value: {},
            raw: "/foo/"
          }
        }
      ]
    },
    "x++\n{}\n/foo/": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 3,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            }
          }
        },
        {
          type: "BlockStatement",
          start: 4,
          end: 6,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 2
            }
          },
          body: []
        },
        {
          type: "ExpressionStatement",
          start: 7,
          end: 12,
          loc: {
            start: {
              line: 3,
              column: 0
            },
            end: {
              line: 3,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 7,
            end: 12,
            loc: {
              start: {
                line: 3,
                column: 0
              },
              end: {
                line: 3,
                column: 5
              }
            },
            regex: {
              pattern: "foo",
              flags: ""
            },
            value: {},
            raw: "/foo/"
          }
        }
      ]
    },
    "{{}\n/foo/}": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 6
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 6
            }
          },
          body: [
            {
              type: "BlockStatement",
              start: 1,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              body: []
            },
            {
              type: "ExpressionStatement",
              start: 4,
              end: 9,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 5
                }
              },
              expression: {
                type: "Literal",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 5
                  }
                },
                regex: {
                  pattern: "foo",
                  flags: ""
                },
                value: {},
                raw: "/foo/"
              }
            }
          ]
        }
      ]
    },
    "while (1) /foo/": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 8
              }
            },
            value: 1,
            raw: "1"
          },
          body: {
            type: "ExpressionStatement",
            start: 10,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 10
              },
              end: {
                line: 1,
                column: 15
              }
            },
            expression: {
              type: "Literal",
              start: 10,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              regex: {
                pattern: "foo",
                flags: ""
              },
              value: {},
              raw: "/foo/"
            }
          }
        }
      ]
    },
    "while (1) {} /foo/": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "WhileStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          test: {
            type: "Literal",
            start: 7,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 8
              }
            },
            value: 1,
            raw: "1"
          },
          body: {
            type: "BlockStatement",
            start: 10,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 10
              },
              end: {
                line: 1,
                column: 12
              }
            },
            body: []
          }
        },
        {
          type: "ExpressionStatement",
          start: 13,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 13
            },
            end: {
              line: 1,
              column: 18
            }
          },
          expression: {
            type: "Literal",
            start: 13,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 18
              }
            },
            regex: {
              pattern: "foo",
              flags: ""
            },
            value: {},
            raw: "/foo/"
          }
        }
      ]
    },
    "(1) / 2": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            left: {
              type: "Literal",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              value: 1,
              raw: "1"
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "({a: [1]}+[]) / 2": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            left: {
              type: "BinaryExpression",
              start: 1,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              left: {
                type: "ObjectExpression",
                start: 1,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                properties: [
                  {
                    type: "Property",
                    start: 2,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 2
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    key: {
                      type: "Identifier",
                      start: 2,
                      end: 3,
                      loc: {
                        start: {
                          line: 1,
                          column: 2
                        },
                        end: {
                          line: 1,
                          column: 3
                        }
                      },
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "ArrayExpression",
                      start: 5,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      elements: [
                        {
                          type: "Literal",
                          start: 6,
                          end: 7,
                          loc: {
                            start: {
                              line: 1,
                              column: 6
                            },
                            end: {
                              line: 1,
                              column: 7
                            }
                          },
                          value: 1,
                          raw: "1"
                        }
                      ]
                    }
                  }
                ]
              },
              operator: "+",
              right: {
                type: "ArrayExpression",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                elements: []
              }
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 16,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "{[1]}\n/foo/": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          body: [
            {
              type: "ExpressionStatement",
              start: 1,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              expression: {
                type: "ArrayExpression",
                start: 1,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                elements: [
                  {
                    type: "Literal",
                    start: 2,
                    end: 3,
                    loc: {
                      start: {
                        line: 1,
                        column: 2
                      },
                      end: {
                        line: 1,
                        column: 3
                      }
                    },
                    value: 1,
                    raw: "1"
                  }
                ]
              }
            }
          ]
        },
        {
          type: "ExpressionStatement",
          start: 6,
          end: 11,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 6,
            end: 11,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 5
              }
            },
            regex: {
              pattern: "foo",
              flags: ""
            },
            value: {},
            raw: "/foo/"
          }
        }
      ]
    },
    "switch(a) { case 1: {}\n/foo/ }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 7
        }
      },
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 7
            }
          },
          discriminant: {
            type: "Identifier",
            start: 7,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 8
              }
            },
            name: "a"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 12,
              end: 28,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 2,
                  column: 5
                }
              },
              consequent: [
                {
                  type: "BlockStatement",
                  start: 20,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  body: []
                },
                {
                  type: "ExpressionStatement",
                  start: 23,
                  end: 28,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 5
                    }
                  },
                  expression: {
                    type: "Literal",
                    start: 23,
                    end: 28,
                    loc: {
                      start: {
                        line: 2,
                        column: 0
                      },
                      end: {
                        line: 2,
                        column: 5
                      }
                    },
                    regex: {
                      pattern: "foo",
                      flags: ""
                    },
                    value: {},
                    raw: "/foo/"
                  }
                }
              ],
              test: {
                type: "Literal",
                start: 17,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                value: 1,
                raw: "1"
              }
            }
          ]
        }
      ]
    },
    "({1: {} / 2})": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 12
              }
            },
            properties: [
              {
                type: "Property",
                start: 2,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                key: {
                  type: "Literal",
                  start: 2,
                  end: 3,
                  loc: {
                    start: {
                      line: 1,
                      column: 2
                    },
                    end: {
                      line: 1,
                      column: 3
                    }
                  },
                  value: 1,
                  raw: "1"
                },
                kind: "init",
                value: {
                  type: "BinaryExpression",
                  start: 5,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  left: {
                    type: "ObjectExpression",
                    start: 5,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    properties: []
                  },
                  operator: "/",
                  right: {
                    type: "Literal",
                    start: 10,
                    end: 11,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 11
                      }
                    },
                    value: 2,
                    raw: "2"
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "+x++ / 2": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            left: {
              type: "UnaryExpression",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              operator: "+",
              prefix: true,
              argument: {
                type: "UpdateExpression",
                start: 1,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                operator: "++",
                prefix: false,
                argument: {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  name: "x"
                }
              }
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              value: 2,
              raw: "2"
            }
          }
        }
      ]
    },
    "foo.in\n{}\n/foo/": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 3,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "MemberExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            object: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "foo"
            },
            property: {
              type: "Identifier",
              start: 4,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "in"
            },
            computed: false
          }
        },
        {
          type: "BlockStatement",
          start: 7,
          end: 9,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 2
            }
          },
          body: []
        },
        {
          type: "ExpressionStatement",
          start: 10,
          end: 15,
          loc: {
            start: {
              line: 3,
              column: 0
            },
            end: {
              line: 3,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 10,
            end: 15,
            loc: {
              start: {
                line: 3,
                column: 0
              },
              end: {
                line: 3,
                column: 5
              }
            },
            regex: {
              pattern: "foo",
              flags: ""
            },
            value: {},
            raw: "/foo/"
          }
        }
      ]
    },
    "var x = function f() {} / 3;": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "BinaryExpression",
                start: 8,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                left: {
                  type: "FunctionExpression",
                  start: 8,
                  end: 23,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 23
                    }
                  },
                  id: {
                    type: "Identifier",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    name: "f"
                  },
                  params: [],
                  body: {
                    type: "BlockStatement",
                    start: 21,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 21
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    body: []
                  }
                },
                operator: "/",
                right: {
                  type: "Literal",
                  start: 26,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  value: 3,
                  raw: "3"
                }
              }
            }
          ]
        }
      ]
    },
    "+function f() {} / 3;": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            left: {
              type: "UnaryExpression",
              start: 0,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              operator: "+",
              prefix: true,
              argument: {
                type: "FunctionExpression",
                start: 1,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                id: {
                  type: "Identifier",
                  start: 10,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  name: "f"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 14,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  body: []
                }
              }
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 19,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              value: 3,
              raw: "3"
            }
          }
        }
      ]
    },
    "foo: function x() {} /regexp/": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "LabeledStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          body: {
            type: "FunctionDeclaration",
            start: 5,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 20
              }
            },
            id: {
              type: "Identifier",
              start: 14,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              name: "x"
            },
            params: [],
            body: {
              type: "BlockStatement",
              start: 18,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              body: []
            }
          },
          label: {
            type: "Identifier",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            name: "foo"
          }
        },
        {
          type: "ExpressionStatement",
          start: 21,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 21
            },
            end: {
              line: 1,
              column: 29
            }
          },
          expression: {
            type: "Literal",
            start: 21,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 29
              }
            },
            regex: {
              pattern: "regexp",
              flags: ""
            },
            value: {},
            raw: "/regexp/"
          }
        }
      ]
    },
    "x = {foo: function x() {} / divide}": {
      type: "Program",
      start: 0,
      end: 35,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 35
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 35,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 35
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 35,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 35
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              properties: [
                {
                  type: "Property",
                  start: 5,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  key: {
                    type: "Identifier",
                    start: 5,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    name: "foo"
                  },
                  kind: "init",
                  value: {
                    type: "BinaryExpression",
                    start: 10,
                    end: 34,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 34
                      }
                    },
                    left: {
                      type: "FunctionExpression",
                      start: 10,
                      end: 25,
                      loc: {
                        start: {
                          line: 1,
                          column: 10
                        },
                        end: {
                          line: 1,
                          column: 25
                        }
                      },
                      id: {
                        type: "Identifier",
                        start: 19,
                        end: 20,
                        loc: {
                          start: {
                            line: 1,
                            column: 19
                          },
                          end: {
                            line: 1,
                            column: 20
                          }
                        },
                        name: "x"
                      },
                      params: [],
                      body: {
                        type: "BlockStatement",
                        start: 23,
                        end: 25,
                        loc: {
                          start: {
                            line: 1,
                            column: 23
                          },
                          end: {
                            line: 1,
                            column: 25
                          }
                        },
                        body: []
                      }
                    },
                    operator: "/",
                    right: {
                      type: "Identifier",
                      start: 28,
                      end: 34,
                      loc: {
                        start: {
                          line: 1,
                          column: 28
                        },
                        end: {
                          line: 1,
                          column: 34
                        }
                      },
                      name: "divide"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "foo; function f() {} /regexp/": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Identifier",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            name: "foo"
          }
        },
        {
          type: "FunctionDeclaration",
          start: 5,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 5
            },
            end: {
              line: 1,
              column: 20
            }
          },
          id: {
            type: "Identifier",
            start: 14,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 15
              }
            },
            name: "f"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 18,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 20
              }
            },
            body: []
          }
        },
        {
          type: "ExpressionStatement",
          start: 21,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 21
            },
            end: {
              line: 1,
              column: 29
            }
          },
          expression: {
            type: "Literal",
            start: 21,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 29
              }
            },
            regex: {
              pattern: "regexp",
              flags: ""
            },
            value: {},
            raw: "/regexp/"
          }
        }
      ]
    },
    "{function f() {} /regexp/}": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          body: [
            {
              type: "FunctionDeclaration",
              start: 1,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              id: {
                type: "Identifier",
                start: 10,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                name: "f"
              },
              params: [],
              body: {
                type: "BlockStatement",
                start: 14,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 14
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                body: []
              }
            },
            {
              type: "ExpressionStatement",
              start: 17,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              expression: {
                type: "Literal",
                start: 17,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                regex: {
                  pattern: "regexp",
                  flags: ""
                },
                value: {},
                raw: "/regexp/"
              }
            }
          ]
        }
      ]
    },
    "{}/=/": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          body: []
        },
        {
          type: "ExpressionStatement",
          start: 2,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 2
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "Literal",
            start: 2,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 2
              },
              end: {
                line: 1,
                column: 5
              }
            },
            regex: {
              pattern: "=",
              flags: ""
            },
            value: {},
            raw: "/=/"
          }
        }
      ]
    },
    "foo <!--bar\n+baz": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 4
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 2,
                column: 4
              }
            },
            left: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "foo"
            },
            operator: "+",
            right: {
              type: "Identifier",
              start: 13,
              end: 16,
              loc: {
                start: {
                  line: 2,
                  column: 1
                },
                end: {
                  line: 2,
                  column: 4
                }
              },
              name: "baz"
            }
          }
        }
      ]
    },
    "x = y-->10;\n --> nothing": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 12
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              left: {
                type: "UpdateExpression",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                operator: "--",
                prefix: false,
                argument: {
                  type: "Identifier",
                  start: 4,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  name: "y"
                }
              },
              operator: ">",
              right: {
                type: "Literal",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                value: 10,
                raw: "10"
              }
            }
          }
        }
      ]
    },
    "'use strict';\nobject.static();": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 16
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            value: "use strict",
            raw: "'use strict'"
          }
        },
        {
          type: "ExpressionStatement",
          start: 14,
          end: 30,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 16
            }
          },
          expression: {
            type: "CallExpression",
            start: 14,
            end: 29,
            loc: {
              start: {
                line: 2,
                column: 0
              },
              end: {
                line: 2,
                column: 15
              }
            },
            callee: {
              type: "MemberExpression",
              start: 14,
              end: 27,
              loc: {
                start: {
                  line: 2,
                  column: 0
                },
                end: {
                  line: 2,
                  column: 13
                }
              },
              object: {
                type: "Identifier",
                start: 14,
                end: 20,
                loc: {
                  start: {
                    line: 2,
                    column: 0
                  },
                  end: {
                    line: 2,
                    column: 6
                  }
                },
                name: "object"
              },
              property: {
                type: "Identifier",
                start: 21,
                end: 27,
                loc: {
                  start: {
                    line: 2,
                    column: 7
                  },
                  end: {
                    line: 2,
                    column: 13
                  }
                },
                name: "static"
              },
              computed: false
            },
            arguments: []
          }
        }
      ]
    },
    "let++": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          expression: {
            type: "UpdateExpression",
            start: 0,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 5
              }
            },
            operator: "++",
            prefix: false,
            argument: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              name: "let"
            }
          }
        }
      ]
    },
    "function TestComments() {\n    // Bear class\n    function Bear(x,y,z) {\n      this.position = [x||0,y||0,z||0]\n    }\n\n    Bear.prototype.roar = function(message) {\n      return 'RAWWW: ' + message; // Whatever\n    };\n\n    function Cat() {\n    /* 1\n       2\n       3*/\n    }\n\n    Cat.prototype.roar = function(message) {\n      return 'MEOOWW: ' + /*stuff*/ message;\n    };\n}": {
      type: "Program",
      start: 0,
      end: 372,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 372,
          id: {
            type: "Identifier",
            start: 9,
            end: 21,
            name: "TestComments"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 24,
            end: 372,
            body: [
              {
                type: "FunctionDeclaration",
                start: 48,
                end: 115,
                id: {
                  type: "Identifier",
                  start: 57,
                  end: 61,
                  name: "Bear"
                },
                params: [
                  {
                    type: "Identifier",
                    start: 62,
                    end: 63,
                    name: "x"
                  },
                  {
                    type: "Identifier",
                    start: 64,
                    end: 65,
                    name: "y"
                  },
                  {
                    type: "Identifier",
                    start: 66,
                    end: 67,
                    name: "z"
                  }
                ],
                body: {
                  type: "BlockStatement",
                  start: 69,
                  end: 115,
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 77,
                      end: 109,
                      expression: {
                        type: "AssignmentExpression",
                        start: 77,
                        end: 109,
                        operator: "=",
                        left: {
                          type: "MemberExpression",
                          start: 77,
                          end: 90,
                          object: {
                            type: "ThisExpression",
                            start: 77,
                            end: 81
                          },
                          property: {
                            type: "Identifier",
                            start: 82,
                            end: 90,
                            name: "position"
                          },
                          computed: false
                        },
                        right: {
                          type: "ArrayExpression",
                          start: 93,
                          end: 109,
                          elements: [
                            {
                              type: "LogicalExpression",
                              start: 94,
                              end: 98,
                              left: {
                                type: "Identifier",
                                start: 94,
                                end: 95,
                                name: "x"
                              },
                              operator: "||",
                              right: {
                                type: "Literal",
                                start: 97,
                                end: 98,
                                value: 0,
                                raw: "0"
                              }
                            },
                            {
                              type: "LogicalExpression",
                              start: 99,
                              end: 103,
                              left: {
                                type: "Identifier",
                                start: 99,
                                end: 100,
                                name: "y"
                              },
                              operator: "||",
                              right: {
                                type: "Literal",
                                start: 102,
                                end: 103,
                                value: 0,
                                raw: "0"
                              }
                            },
                            {
                              type: "LogicalExpression",
                              start: 104,
                              end: 108,
                              left: {
                                type: "Identifier",
                                start: 104,
                                end: 105,
                                name: "z"
                              },
                              operator: "||",
                              right: {
                                type: "Literal",
                                start: 107,
                                end: 108,
                                value: 0,
                                raw: "0"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                type: "ExpressionStatement",
                start: 121,
                end: 215,
                expression: {
                  type: "AssignmentExpression",
                  start: 121,
                  end: 214,
                  operator: "=",
                  left: {
                    type: "MemberExpression",
                    start: 121,
                    end: 140,
                    object: {
                      type: "MemberExpression",
                      start: 121,
                      end: 135,
                      object: {
                        type: "Identifier",
                        start: 121,
                        end: 125,
                        name: "Bear"
                      },
                      property: {
                        type: "Identifier",
                        start: 126,
                        end: 135,
                        name: "prototype"
                      },
                      computed: false
                    },
                    property: {
                      type: "Identifier",
                      start: 136,
                      end: 140,
                      name: "roar"
                    },
                    computed: false
                  },
                  right: {
                    type: "FunctionExpression",
                    start: 143,
                    end: 214,
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 152,
                        end: 159,
                        name: "message"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 161,
                      end: 214,
                      body: [
                        {
                          type: "ReturnStatement",
                          start: 169,
                          end: 196,
                          argument: {
                            type: "BinaryExpression",
                            start: 176,
                            end: 195,
                            left: {
                              type: "Literal",
                              start: 176,
                              end: 185,
                              value: "RAWWW: ",
                              raw: "'RAWWW: '"
                            },
                            operator: "+",
                            right: {
                              type: "Identifier",
                              start: 188,
                              end: 195,
                              name: "message"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                type: "FunctionDeclaration",
                start: 221,
                end: 272,
                id: {
                  type: "Identifier",
                  start: 230,
                  end: 233,
                  name: "Cat"
                },
                params: [],
                body: {
                  type: "BlockStatement",
                  start: 236,
                  end: 272,
                  body: []
                }
              },
              {
                type: "ExpressionStatement",
                start: 278,
                end: 370,
                expression: {
                  type: "AssignmentExpression",
                  start: 278,
                  end: 369,
                  operator: "=",
                  left: {
                    type: "MemberExpression",
                    start: 278,
                    end: 296,
                    object: {
                      type: "MemberExpression",
                      start: 278,
                      end: 291,
                      object: {
                        type: "Identifier",
                        start: 278,
                        end: 281,
                        name: "Cat"
                      },
                      property: {
                        type: "Identifier",
                        start: 282,
                        end: 291,
                        name: "prototype"
                      },
                      computed: false
                    },
                    property: {
                      type: "Identifier",
                      start: 292,
                      end: 296,
                      name: "roar"
                    },
                    computed: false
                  },
                  right: {
                    type: "FunctionExpression",
                    start: 299,
                    end: 369,
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 308,
                        end: 315,
                        name: "message"
                      }
                    ],
                    body: {
                      type: "BlockStatement",
                      start: 317,
                      end: 369,
                      body: [
                        {
                          type: "ReturnStatement",
                          start: 325,
                          end: 363,
                          argument: {
                            type: "BinaryExpression",
                            start: 332,
                            end: 362,
                            left: {
                              type: "Literal",
                              start: 332,
                              end: 342,
                              value: "MEOOWW: ",
                              raw: "'MEOOWW: '"
                            },
                            operator: "+",
                            right: {
                              type: "Identifier",
                              start: 355,
                              end: 362,
                              name: "message"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "<!--\n;": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 1
        }
      },
      body: [
        {
          type: "EmptyStatement",
          start: 5,
          end: 6,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 1
            }
          }
        }
      ]
    },
    "\nfunction plop() {\n'use strict';\n/* Comment */\n}": {
      type: "Program",
      start: 0,
      end: 48,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 5,
          column: 1
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 1,
          end: 48,
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 5,
              column: 1
            }
          },
          id: {
            type: "Identifier",
            start: 10,
            end: 14,
            loc: {
              start: {
                line: 2,
                column: 9
              },
              end: {
                line: 2,
                column: 13
              }
            },
            name: "plop"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 17,
            end: 48,
            loc: {
              start: {
                line: 2,
                column: 16
              },
              end: {
                line: 5,
                column: 1
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 32,
                loc: {
                  start: {
                    line: 3,
                    column: 0
                  },
                  end: {
                    line: 3,
                    column: 13
                  }
                },
                expression: {
                  type: "Literal",
                  start: 19,
                  end: 31,
                  loc: {
                    start: {
                      line: 3,
                      column: 0
                    },
                    end: {
                      line: 3,
                      column: 12
                    }
                  },
                  value: "use strict",
                  raw: "'use strict'"
                }
              }
            ]
          }
        }
      ]
    },
    "// line comment": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      body: []
    },
    "<!-- HTML comment": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: []
    },
    ";\n--> HTML comment": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 16
        }
      },
      body: [
        {
          type: "EmptyStatement",
          start: 0,
          end: 1,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          }
        }
      ]
    },
    "function f(f) { 'use strict'; }": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            name: "f"
          },
          params: [
            {
              type: "Identifier",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              name: "f"
            }
          ],
          body: {
            type: "BlockStatement",
            start: 14,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 31
              }
            },
            body: [
              {
                type: "ExpressionStatement",
                start: 16,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                expression: {
                  type: "Literal",
                  start: 16,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  value: "use strict",
                  raw: "'use strict'"
                }
              }
            ]
          }
        }
      ]
    },
    "#!/usr/bin/node\n;": {
      type: "Program",
      start: 0,
      end: 17,
      body: [
        {
          type: "EmptyStatement",
          start: 16,
          end: 17
        }
      ]
    },
    "(function () {} / 1)": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 1,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 19
              }
            },
            left: {
              type: "FunctionExpression",
              start: 1,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              id: null,
              params: [],
              body: {
                type: "BlockStatement",
                start: 13,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                body: []
              }
            },
            operator: "/",
            right: {
              type: "Literal",
              start: 18,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              value: 1,
              raw: "1"
            }
          }
        }
      ]
    },
    "function f() {} / 1 /": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            name: "f"
          },
          params: [],
          body: {
            type: "BlockStatement",
            start: 13,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 13
              },
              end: {
                line: 1,
                column: 15
              }
            },
            body: []
          }
        },
        {
          type: "ExpressionStatement",
          start: 16,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 16
            },
            end: {
              line: 1,
              column: 21
            }
          },
          expression: {
            type: "Literal",
            start: 16,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 21
              }
            },
            regex: {
              pattern: " 1 ",
              flags: ""
            },
            value: {},
            raw: "/ 1 /"
          }
        }
      ]
    },
    "do /x/; while (false);": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      body: [
        {
          type: "DoWhileStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          body: {
            type: "ExpressionStatement",
            start: 3,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 7
              }
            },
            expression: {
              type: "Literal",
              start: 3,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              regex: {
                pattern: "x",
                flags: ""
              },
              value: {},
              raw: "/x/"
            }
          },
          test: {
            type: "Literal",
            start: 15,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 20
              }
            },
            value: false,
            raw: "false"
          }
        }
      ]
    },
    "/[a-z]/gim": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            regex: {
              pattern: "[a-z]",
              flags: "gim"
            },
            value: {},
            raw: "/[a-z]/gim"
          }
        }
      ]
    },
    "0123. in/foo/i": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              left: {
                type: "MemberExpression",
                start: 0,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                object: {
                  type: "Literal",
                  start: 0,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 0
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  value: 83,
                  raw: "0123"
                },
                property: {
                  type: "Identifier",
                  start: 6,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  name: "in"
                },
                computed: false
              },
              operator: "/",
              right: {
                type: "Identifier",
                start: 9,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                name: "foo"
              }
            },
            operator: "/",
            right: {
              type: "Identifier",
              start: 13,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              name: "i"
            }
          }
        }
      ]
    },
    "0128": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            value: 128,
            raw: "0128"
          }
        }
      ]
    },
    "(foo = [])[0] = 4;": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            operator: "=",
            left: {
              type: "MemberExpression",
              start: 0,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              object: {
                type: "AssignmentExpression",
                start: 1,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                operator: "=",
                left: {
                  type: "Identifier",
                  start: 1,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  name: "foo"
                },
                right: {
                  type: "ArrayExpression",
                  start: 7,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  elements: []
                }
              },
              property: {
                type: "Literal",
                start: 11,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                value: 0,
                raw: "0"
              },
              computed: true
            },
            right: {
              type: "Literal",
              start: 16,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              value: 4,
              raw: "4"
            }
          }
        }
      ]
    },
    "for ((foo = []).bar in {}) {}": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          left: {
            type: "MemberExpression",
            start: 5,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 19
              }
            },
            object: {
              type: "AssignmentExpression",
              start: 6,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              operator: "=",
              left: {
                type: "Identifier",
                start: 6,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "foo"
              },
              right: {
                type: "ArrayExpression",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                elements: []
              }
            },
            property: {
              type: "Identifier",
              start: 16,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              name: "bar"
            },
            computed: false
          },
          right: {
            type: "ObjectExpression",
            start: 23,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 25
              }
            },
            properties: []
          },
          body: {
            type: "BlockStatement",
            start: 27,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 27
              },
              end: {
                line: 1,
                column: 29
              }
            },
            body: []
          }
        }
      ]
    },
    "((b), a=1)": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          expression: {
            type: "SequenceExpression",
            start: 1,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 9
              }
            },
            expressions: [
              {
                type: "Identifier",
                start: 2,
                end: 3,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 3
                  }
                },
                name: "b"
              },
              {
                type: "AssignmentExpression",
                start: 6,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                operator: "=",
                left: {
                  type: "Identifier",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 7
                    }
                  },
                  name: "a"
                },
                right: {
                  type: "Literal",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  value: 1,
                  raw: "1"
                }
              }
            ]
          }
        }
      ]
    },
    "(x) = 1": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            operator: "=",
            left: {
              type: "Identifier",
              start: 1,
              end: 2,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 2
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              value: 1,
              raw: "1"
            }
          }
        }
      ]
    },
    "try {} catch (foo) {} var foo;": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 6
              }
            },
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 21
              }
            },
            param: {
              type: "Identifier",
              start: 14,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              name: "foo"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              body: []
            }
          },
          finalizer: null
        },
        {
          type: "VariableDeclaration",
          start: 22,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 22
            },
            end: {
              line: 1,
              column: 30
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 26,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              id: {
                type: "Identifier",
                start: 26,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 26
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                name: "foo"
              },
              init: null
            }
          ]
        }
      ]
    }
  },
  "es5-parens-loose": {
    "(1 + 2 ) * 3": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            left: {
              type: "ParenthesizedExpression",
              start: 0,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              expression: {
                type: "BinaryExpression",
                start: 1,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                left: {
                  type: "Literal",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  value: 1,
                  raw: "1"
                },
                operator: "+",
                right: {
                  type: "Literal",
                  start: 5,
                  end: 6,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 6
                    }
                  },
                  value: 2,
                  raw: "2"
                }
              }
            },
            operator: "*",
            right: {
              type: "Literal",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              value: 3,
              raw: "3"
            }
          }
        }
      ]
    },
    "(x = 23)": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "ParenthesizedExpression",
            start: 0,
            end: 8,
            expression: {
              type: "AssignmentExpression",
              start: 1,
              end: 7,
              operator: "=",
              left: {
                type: "Identifier",
                start: 1,
                end: 2,
                name: "x"
              },
              right: {
                type: "Literal",
                start: 5,
                end: 7,
                value: 23,
                raw: "23"
              }
            }
          }
        }
      ]
    }
  },
  "es6-loose": {
    "function hello(...rest) { }": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          params: [
            {
              type: "RestElement",
              start: 15,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              argument: {
                type: "Identifier",
                start: 18,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                name: "rest"
              }
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 24,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 24
              },
              end: {
                line: 1,
                column: 27
              }
            },
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function hello(a, ...rest) { }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          id: {
            type: "Identifier",
            start: 9,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 14
              }
            },
            name: "hello"
          },
          params: [
            {
              type: "Identifier",
              start: 15,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              name: "a"
            },
            {
              type: "RestElement",
              start: 18,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              argument: {
                type: "Identifier",
                start: 21,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 21
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                name: "rest"
              }
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 27,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 27
              },
              end: {
                line: 1,
                column: 30
              }
            },
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "var hi = function (...r) { sayHi() };": {
      type: "Program",
      start: 0,
      end: 37,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 37
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 37,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 37
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                name: "hi"
              },
              init: {
                type: "FunctionExpression",
                start: 9,
                end: 36,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 36
                  }
                },
                id: null,
                params: [
                  {
                    type: "RestElement",
                    start: 19,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    argument: {
                      type: "Identifier",
                      start: 22,
                      end: 23,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 23
                        }
                      },
                      name: "r"
                    }
                  }
                ],
                generator: false,
                expression: false,
                body: {
                  type: "BlockStatement",
                  start: 25,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 25
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 27,
                      end: 34,
                      loc: {
                        start: {
                          line: 1,
                          column: 27
                        },
                        end: {
                          line: 1,
                          column: 34
                        }
                      },
                      expression: {
                        type: "CallExpression",
                        start: 27,
                        end: 34,
                        loc: {
                          start: {
                            line: 1,
                            column: 27
                          },
                          end: {
                            line: 1,
                            column: 34
                          }
                        },
                        callee: {
                          type: "Identifier",
                          start: 27,
                          end: 32,
                          loc: {
                            start: {
                              line: 1,
                              column: 27
                            },
                            end: {
                              line: 1,
                              column: 32
                            }
                          },
                          name: "sayHi"
                        },
                        arguments: []
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "let x": {
      type: "Program",
      start: 0,
      end: 5,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 5,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 5
            }
          },
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: null
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "let x, y;": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 5,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 5
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: null
            },
            {
              type: "VariableDeclarator",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              id: {
                type: "Identifier",
                start: 7,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "y"
              },
              init: null
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "let x = 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "let eval = 42, arguments = 42": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                name: "eval"
              },
              init: {
                type: "Literal",
                start: 11,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                value: 42,
                raw: "42"
              }
            },
            {
              type: "VariableDeclarator",
              start: 15,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              id: {
                type: "Identifier",
                start: 15,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                name: "arguments"
              },
              init: {
                type: "Literal",
                start: 27,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 27
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "let x = 14, y = 3, z = 1977": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                value: 14,
                raw: "14"
              }
            },
            {
              type: "VariableDeclarator",
              start: 12,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              id: {
                type: "Identifier",
                start: 12,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                name: "y"
              },
              init: {
                type: "Literal",
                start: 16,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                value: 3,
                raw: "3"
              }
            },
            {
              type: "VariableDeclarator",
              start: 19,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              id: {
                type: "Identifier",
                start: 19,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                name: "z"
              },
              init: {
                type: "Literal",
                start: 23,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                value: 1977,
                raw: "1977"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "for(let x = 0;;);": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          init: {
            type: "VariableDeclaration",
            start: 4,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 13
              }
            },
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                id: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  value: 0,
                  raw: "0"
                }
              }
            ]
          },
          update: null,
          test: null,
          body: {
            type: "EmptyStatement",
            start: 16,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 17
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for(let x = 0, y = 1;;);": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          init: {
            type: "VariableDeclaration",
            start: 4,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 20
              }
            },
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 8,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                id: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  value: 0,
                  raw: "0"
                }
              },
              {
                type: "VariableDeclarator",
                start: 15,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                id: {
                  type: "Identifier",
                  start: 15,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 15
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  name: "y"
                },
                init: {
                  type: "Literal",
                  start: 19,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  value: 1,
                  raw: "1"
                }
              }
            ]
          },
          update: null,
          test: null,
          body: {
            type: "EmptyStatement",
            start: 23,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 23
              },
              end: {
                line: 1,
                column: 24
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for (let x in list) process(x);": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 10
              }
            },
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  name: "x"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 14,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 18
              }
            },
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 20,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 31
              }
            },
            expression: {
              type: "CallExpression",
              start: 20,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              callee: {
                type: "Identifier",
                start: 20,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 28,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "const x = 42": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          kind: "const",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              id: {
                type: "Identifier",
                start: 6,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "const eval = 42, arguments = 42": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          kind: "const",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              id: {
                type: "Identifier",
                start: 6,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                name: "eval"
              },
              init: {
                type: "Literal",
                start: 13,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                value: 42,
                raw: "42"
              }
            },
            {
              type: "VariableDeclarator",
              start: 17,
              end: 31,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 31
                }
              },
              id: {
                type: "Identifier",
                start: 17,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                name: "arguments"
              },
              init: {
                type: "Literal",
                start: 29,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 29
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "const x = 14, y = 3, z = 1977": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          kind: "const",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              id: {
                type: "Identifier",
                start: 6,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                name: "x"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                value: 14,
                raw: "14"
              }
            },
            {
              type: "VariableDeclarator",
              start: 14,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              id: {
                type: "Identifier",
                start: 14,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 14
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                name: "y"
              },
              init: {
                type: "Literal",
                start: 18,
                end: 19,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 19
                  }
                },
                value: 3,
                raw: "3"
              }
            },
            {
              type: "VariableDeclarator",
              start: 21,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              id: {
                type: "Identifier",
                start: 21,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 21
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                name: "z"
              },
              init: {
                type: "Literal",
                start: 25,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 25
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                value: 1977,
                raw: "1977"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "for(const x = 0;;);": {
      type: "Program",
      start: 0,
      end: 19,
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 19,
          range: [
            0,
            19
          ],
          init: {
            type: "VariableDeclaration",
            start: 4,
            end: 15,
            range: [
              4,
              15
            ],
            kind: "const",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 10,
                end: 15,
                range: [
                  10,
                  15
                ],
                id: {
                  type: "Identifier",
                  start: 10,
                  end: 11,
                  range: [
                    10,
                    11
                  ],
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 14,
                  end: 15,
                  range: [
                    14,
                    15
                  ],
                  value: 0,
                  raw: "0"
                }
              }
            ]
          },
          update: null,
          test: null,
          body: {
            type: "EmptyStatement",
            start: 18,
            end: 19,
            range: [
              18,
              19
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "\\u{74}rue": {
      type: "Error",
      message: "Escape sequence in keyword true (1:0)"
    },
    "try {} catch (foo) {} let foo;": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 21,
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 21,
            param: {
              type: "Identifier",
              start: 14,
              end: 17,
              name: "foo"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 21,
              body: []
            }
          },
          finalizer: null
        },
        {
          type: "VariableDeclaration",
          start: 22,
          end: 30,
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 26,
              end: 29,
              id: {
                type: "Identifier",
                start: 26,
                end: 29,
                name: "foo"
              },
              init: null
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "try {} catch (foo) { { let foo; } }": {
      type: "Program",
      start: 0,
      end: 35,
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 35,
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 35,
            param: {
              type: "Identifier",
              start: 14,
              end: 17,
              name: "foo"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 35,
              body: [
                {
                  type: "BlockStatement",
                  start: 21,
                  end: 33,
                  body: [
                    {
                      type: "VariableDeclaration",
                      start: 23,
                      end: 31,
                      kind: "let",
                      declarations: [
                        {
                          type: "VariableDeclarator",
                          start: 27,
                          end: 30,
                          id: {
                            type: "Identifier",
                            start: 27,
                            end: 30,
                            name: "foo"
                          },
                          init: null
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          finalizer: null
        }
      ],
      sourceType: "script"
    },
    "try {} catch (foo) { function x() { var foo; } }": {
      type: "Program",
      start: 0,
      end: 48,
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 48,
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 48,
            param: {
              type: "Identifier",
              start: 14,
              end: 17,
              name: "foo"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 48,
              body: [
                {
                  type: "FunctionDeclaration",
                  start: 21,
                  end: 46,
                  id: {
                    type: "Identifier",
                    start: 30,
                    end: 31,
                    name: "x"
                  },
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 34,
                    end: 46,
                    body: [
                      {
                        type: "VariableDeclaration",
                        start: 36,
                        end: 44,
                        kind: "var",
                        declarations: [
                          {
                            type: "VariableDeclarator",
                            start: 40,
                            end: 43,
                            id: {
                              type: "Identifier",
                              start: 40,
                              end: 43,
                              name: "foo"
                            },
                            init: null
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          finalizer: null
        }
      ],
      sourceType: "script"
    },
    "try {} catch (foo) { function x(foo) {} }": {
      type: "Program",
      start: 0,
      end: 41,
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 41,
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 41,
            param: {
              type: "Identifier",
              start: 14,
              end: 17,
              name: "foo"
            },
            body: {
              type: "BlockStatement",
              start: 19,
              end: 41,
              body: [
                {
                  type: "FunctionDeclaration",
                  start: 21,
                  end: 39,
                  id: {
                    type: "Identifier",
                    start: 30,
                    end: 31,
                    name: "x"
                  },
                  params: [
                    {
                      type: "Identifier",
                      start: 32,
                      end: 35,
                      name: "foo"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 37,
                    end: 39,
                    body: []
                  }
                }
              ]
            }
          },
          finalizer: null
        }
      ],
      sourceType: "script"
    },
    "'use strict'; let foo = function foo() {}": {
      type: "Program",
      start: 0,
      end: 41,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            value: "use strict",
            raw: "'use strict'"
          }
        },
        {
          type: "VariableDeclaration",
          start: 14,
          end: 41,
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 18,
              end: 41,
              id: {
                type: "Identifier",
                start: 18,
                end: 21,
                name: "foo"
              },
              init: {
                type: "FunctionExpression",
                start: 24,
                end: 41,
                id: {
                  type: "Identifier",
                  start: 33,
                  end: 36,
                  name: "foo"
                },
                params: [],
                generator: false,
                expression: false,
                body: {
                  type: "BlockStatement",
                  start: 39,
                  end: 41,
                  body: []
                }
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "\"\\u{714E}\\u{8336}\"": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              0,
              18
            ],
            value: "煎茶",
            raw: "\"\\u{714E}\\u{8336}\""
          }
        }
      ],
      sourceType: "script"
    },
    "\"\\u{20BB7}\\u{91CE}\\u{5BB6}\"": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              0,
              27
            ],
            value: "𠮷野家",
            raw: "\"\\u{20BB7}\\u{91CE}\\u{5BB6}\""
          }
        }
      ],
      sourceType: "script"
    },
    "00": {
      type: "Program",
      start: 0,
      end: 2,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      },
      range: [
        0,
        2
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 2,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 2
            }
          },
          range: [
            0,
            2
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 2,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 2
              }
            },
            range: [
              0,
              2
            ],
            value: 0,
            raw: "00"
          }
        }
      ],
      sourceType: "script"
    },
    "0o0": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 0,
            raw: "0o0"
          }
        }
      ],
      sourceType: "script"
    },
    "function test() {'use strict'; 0o0; }": {
      type: "Program",
      start: 0,
      end: 37,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 37
        }
      },
      range: [
        0,
        37
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 37,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 37
            }
          },
          range: [
            0,
            37
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              9,
              13
            ],
            name: "test"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 16,
            end: 37,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 37
              }
            },
            range: [
              16,
              37
            ],
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 30,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 30
                  }
                },
                range: [
                  17,
                  30
                ],
                expression: {
                  type: "Literal",
                  start: 17,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    17,
                    29
                  ],
                  value: "use strict",
                  raw: "'use strict'"
                }
              },
              {
                type: "ExpressionStatement",
                start: 31,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 31
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                range: [
                  31,
                  35
                ],
                expression: {
                  type: "Literal",
                  start: 31,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 31
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  range: [
                    31,
                    34
                  ],
                  value: 0,
                  raw: "0o0"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "0o2": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 2,
            raw: "0o2"
          }
        }
      ],
      sourceType: "script"
    },
    "0o12": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      range: [
        0,
        4
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          range: [
            0,
            4
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            range: [
              0,
              4
            ],
            value: 10,
            raw: "0o12"
          }
        }
      ],
      sourceType: "script"
    },
    "0O0": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 0,
            raw: "0O0"
          }
        }
      ],
      sourceType: "script"
    },
    "function test() {'use strict'; 0O0; }": {
      type: "Program",
      start: 0,
      end: 37,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 37
        }
      },
      range: [
        0,
        37
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 37,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 37
            }
          },
          range: [
            0,
            37
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              9,
              13
            ],
            name: "test"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 16,
            end: 37,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 37
              }
            },
            range: [
              16,
              37
            ],
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 30,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 30
                  }
                },
                range: [
                  17,
                  30
                ],
                expression: {
                  type: "Literal",
                  start: 17,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    17,
                    29
                  ],
                  value: "use strict",
                  raw: "'use strict'"
                }
              },
              {
                type: "ExpressionStatement",
                start: 31,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 31
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                range: [
                  31,
                  35
                ],
                expression: {
                  type: "Literal",
                  start: 31,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 31
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  range: [
                    31,
                    34
                  ],
                  value: 0,
                  raw: "0O0"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "0O2": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 2,
            raw: "0O2"
          }
        }
      ],
      sourceType: "script"
    },
    "0O12": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      range: [
        0,
        4
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          range: [
            0,
            4
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            range: [
              0,
              4
            ],
            value: 10,
            raw: "0O12"
          }
        }
      ],
      sourceType: "script"
    },
    "0b0": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 0,
            raw: "0b0"
          }
        }
      ],
      sourceType: "script"
    },
    "0b1": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 1,
            raw: "0b1"
          }
        }
      ],
      sourceType: "script"
    },
    "0b10": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      range: [
        0,
        4
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          range: [
            0,
            4
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            range: [
              0,
              4
            ],
            value: 2,
            raw: "0b10"
          }
        }
      ],
      sourceType: "script"
    },
    "0B0": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 0,
            raw: "0B0"
          }
        }
      ],
      sourceType: "script"
    },
    "0B1": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            value: 1,
            raw: "0B1"
          }
        }
      ],
      sourceType: "script"
    },
    "0B10": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      range: [
        0,
        4
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          range: [
            0,
            4
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            range: [
              0,
              4
            ],
            value: 2,
            raw: "0B10"
          }
        }
      ],
      sourceType: "script"
    },
    "`42`": {
      type: "Program",
      start: 0,
      end: 4,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      },
      range: [
        0,
        4
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 4,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 4
            }
          },
          range: [
            0,
            4
          ],
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 4,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 4
              }
            },
            range: [
              0,
              4
            ],
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 3,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 3
                  }
                },
                range: [
                  1,
                  3
                ],
                value: {
                  raw: "42",
                  cooked: "42"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "raw`42`": {
      type: "Program",
      start: 0,
      end: 7,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      },
      range: [
        0,
        7
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 7
            }
          },
          range: [
            0,
            7
          ],
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              0,
              7
            ],
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              range: [
                0,
                3
              ],
              name: "raw"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              range: [
                3,
                7
              ],
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 6,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 6
                    }
                  },
                  range: [
                    4,
                    6
                  ],
                  value: {
                    raw: "42",
                    cooked: "42"
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "raw`hello ${name}`": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              0,
              18
            ],
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              range: [
                0,
                3
              ],
              name: "raw"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                3,
                18
              ],
              expressions: [
                {
                  type: "Identifier",
                  start: 12,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    12,
                    16
                  ],
                  name: "name"
                }
              ],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    4,
                    10
                  ],
                  value: {
                    raw: "hello ",
                    cooked: "hello "
                  },
                  tail: false
                },
                {
                  type: "TemplateElement",
                  start: 17,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    17,
                    17
                  ],
                  value: {
                    raw: "",
                    cooked: ""
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "`$`": {
      type: "Program",
      start: 0,
      end: 3,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      },
      range: [
        0,
        3
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 3,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          },
          range: [
            0,
            3
          ],
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 3,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            },
            range: [
              0,
              3
            ],
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                value: {
                  raw: "$",
                  cooked: "$"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`\\n\\r\\b\\v\\t\\f\\\n\\\r\n`": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 3,
          column: 1
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 3,
              column: 1
            }
          },
          range: [
            0,
            19
          ],
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 3,
                column: 1
              }
            },
            range: [
              0,
              19
            ],
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 3,
                    column: 0
                  }
                },
                range: [
                  1,
                  18
                ],
                value: {
                  raw: "\\n\\r\\b\\v\\t\\f\\\n\\\n",
                  cooked: "\n\r\b\u000b\t\f"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`\n\r\n\r`": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 4,
          column: 1
        }
      },
      range: [
        0,
        6
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 4,
              column: 1
            }
          },
          range: [
            0,
            6
          ],
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 4,
                column: 1
              }
            },
            range: [
              0,
              6
            ],
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 4,
                    column: 0
                  }
                },
                range: [
                  1,
                  5
                ],
                value: {
                  raw: "\n\n\n",
                  cooked: "\n\n\n"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`\\u{000042}\\u0042\\x42u0\\A`": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          range: [
            0,
            26
          ],
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 26
              }
            },
            range: [
              0,
              26
            ],
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  1,
                  25
                ],
                value: {
                  raw: "\\u{000042}\\u0042\\x42u0\\A",
                  cooked: "BBBu0A"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "new raw`42`": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      range: [
        0,
        11
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          range: [
            0,
            11
          ],
          expression: {
            type: "NewExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            range: [
              0,
              11
            ],
            callee: {
              type: "TaggedTemplateExpression",
              start: 4,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              range: [
                4,
                11
              ],
              tag: {
                type: "Identifier",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                range: [
                  4,
                  7
                ],
                name: "raw"
              },
              quasi: {
                type: "TemplateLiteral",
                start: 7,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                range: [
                  7,
                  11
                ],
                expressions: [],
                quasis: [
                  {
                    type: "TemplateElement",
                    start: 8,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      8,
                      10
                    ],
                    value: {
                      raw: "42",
                      cooked: "42"
                    },
                    tail: true
                  }
                ]
              }
            },
            arguments: []
          }
        }
      ],
      sourceType: "script"
    },
    "`outer${{x: {y: 10}}}bar${`nested${function(){return 1;}}endnest`}end`": {
      type: "Program",
      start: 0,
      end: 70,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 70,
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 70,
            expressions: [
              {
                type: "ObjectExpression",
                start: 8,
                end: 20,
                properties: [
                  {
                    type: "Property",
                    start: 9,
                    end: 19,
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 9,
                      end: 10,
                      name: "x"
                    },
                    kind: "init",
                    value: {
                      type: "ObjectExpression",
                      start: 12,
                      end: 19,
                      properties: [
                        {
                          type: "Property",
                          start: 13,
                          end: 18,
                          method: false,
                          shorthand: false,
                          computed: false,
                          key: {
                            type: "Identifier",
                            start: 13,
                            end: 14,
                            name: "y"
                          },
                          kind: "init",
                          value: {
                            type: "Literal",
                            start: 16,
                            end: 18,
                            value: 10,
                            raw: "10"
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              {
                type: "TemplateLiteral",
                start: 26,
                end: 65,
                expressions: [
                  {
                    type: "FunctionExpression",
                    start: 35,
                    end: 56,
                    id: null,
                    params: [],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 45,
                      end: 56,
                      body: [
                        {
                          type: "ReturnStatement",
                          start: 46,
                          end: 55,
                          argument: {
                            type: "Literal",
                            start: 53,
                            end: 54,
                            value: 1,
                            raw: "1"
                          }
                        }
                      ]
                    }
                  }
                ],
                quasis: [
                  {
                    type: "TemplateElement",
                    start: 27,
                    end: 33,
                    value: {
                      raw: "nested",
                      cooked: "nested"
                    },
                    tail: false
                  },
                  {
                    type: "TemplateElement",
                    start: 57,
                    end: 64,
                    value: {
                      raw: "endnest",
                      cooked: "endnest"
                    },
                    tail: true
                  }
                ]
              }
            ],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 6,
                value: {
                  raw: "outer",
                  cooked: "outer"
                },
                tail: false
              },
              {
                type: "TemplateElement",
                start: 21,
                end: 24,
                value: {
                  raw: "bar",
                  cooked: "bar"
                },
                tail: false
              },
              {
                type: "TemplateElement",
                start: 66,
                end: 69,
                value: {
                  raw: "end",
                  cooked: "end"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "switch (answer) { case 42: let t = 42; break; }": {
      type: "Program",
      start: 0,
      end: 47,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 47
        }
      },
      range: [
        0,
        47
      ],
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 47,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 47
            }
          },
          range: [
            0,
            47
          ],
          discriminant: {
            type: "Identifier",
            start: 8,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 14
              }
            },
            range: [
              8,
              14
            ],
            name: "answer"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 18,
              end: 45,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 45
                }
              },
              range: [
                18,
                45
              ],
              consequent: [
                {
                  type: "VariableDeclaration",
                  start: 27,
                  end: 38,
                  loc: {
                    start: {
                      line: 1,
                      column: 27
                    },
                    end: {
                      line: 1,
                      column: 38
                    }
                  },
                  range: [
                    27,
                    38
                  ],
                  kind: "let",
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 31,
                      end: 37,
                      loc: {
                        start: {
                          line: 1,
                          column: 31
                        },
                        end: {
                          line: 1,
                          column: 37
                        }
                      },
                      range: [
                        31,
                        37
                      ],
                      id: {
                        type: "Identifier",
                        start: 31,
                        end: 32,
                        loc: {
                          start: {
                            line: 1,
                            column: 31
                          },
                          end: {
                            line: 1,
                            column: 32
                          }
                        },
                        range: [
                          31,
                          32
                        ],
                        name: "t"
                      },
                      init: {
                        type: "Literal",
                        start: 35,
                        end: 37,
                        loc: {
                          start: {
                            line: 1,
                            column: 35
                          },
                          end: {
                            line: 1,
                            column: 37
                          }
                        },
                        range: [
                          35,
                          37
                        ],
                        value: 42,
                        raw: "42"
                      }
                    }
                  ]
                },
                {
                  type: "BreakStatement",
                  start: 39,
                  end: 45,
                  loc: {
                    start: {
                      line: 1,
                      column: 39
                    },
                    end: {
                      line: 1,
                      column: 45
                    }
                  },
                  range: [
                    39,
                    45
                  ],
                  label: null
                }
              ],
              test: {
                type: "Literal",
                start: 23,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  23,
                  25
                ],
                value: 42,
                raw: "42"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "() => \"test\"": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            id: null,
            params: [],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 6,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                6,
                12
              ],
              value: "test",
              raw: "\"test\""
            }
          }
        }
      ],
      sourceType: "script"
    },
    "e => \"test\"": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      range: [
        0,
        11
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          range: [
            0,
            11
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 11
              }
            },
            range: [
              0,
              11
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "e"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 5,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              range: [
                5,
                11
              ],
              value: "test",
              raw: "\"test\""
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(e) => \"test\"": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "e"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 7,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              range: [
                7,
                13
              ],
              value: "test",
              raw: "\"test\""
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a, b) => \"test\"": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      range: [
        0,
        16
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          range: [
            0,
            16
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            range: [
              0,
              16
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "a"
              },
              {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  4,
                  5
                ],
                name: "b"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 10,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                10,
                16
              ],
              value: "test",
              raw: "\"test\""
            }
          }
        }
      ],
      sourceType: "script"
    },
    "e => { 42; }": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "e"
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 5,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                5,
                12
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 7,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    7,
                    10
                  ],
                  expression: {
                    type: "Literal",
                    start: 7,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      7,
                      9
                    ],
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "e => ({ property: 42 })": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          range: [
            0,
            23
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              0,
              23
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "e"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "ObjectExpression",
              start: 6,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                6,
                22
              ],
              properties: [
                {
                  type: "Property",
                  start: 8,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    8,
                    20
                  ],
                  method: false,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 8,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    range: [
                      8,
                      16
                    ],
                    name: "property"
                  },
                  kind: "init",
                  value: {
                    type: "Literal",
                    start: 18,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    range: [
                      18,
                      20
                    ],
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "e => { label: 42 }": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              0,
              18
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "e"
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 5,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                5,
                18
              ],
              body: [
                {
                  type: "LabeledStatement",
                  start: 7,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    7,
                    16
                  ],
                  body: {
                    type: "ExpressionStatement",
                    start: 14,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    range: [
                      14,
                      16
                    ],
                    expression: {
                      type: "Literal",
                      start: 14,
                      end: 16,
                      loc: {
                        start: {
                          line: 1,
                          column: 14
                        },
                        end: {
                          line: 1,
                          column: 16
                        }
                      },
                      range: [
                        14,
                        16
                      ],
                      value: 42,
                      raw: "42"
                    }
                  },
                  label: {
                    type: "Identifier",
                    start: 7,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      7,
                      12
                    ],
                    name: "label"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a, b) => { 42; }": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "a"
              },
              {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  4,
                  5
                ],
                name: "b"
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 10,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                10,
                17
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 12,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    12,
                    15
                  ],
                  expression: {
                    type: "Literal",
                    start: 12,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      12,
                      14
                    ],
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "([a, , b]) => 42": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      range: [
        0,
        16
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          range: [
            0,
            16
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 16
              }
            },
            range: [
              0,
              16
            ],
            id: null,
            params: [
              {
                type: "ArrayPattern",
                start: 1,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  1,
                  9
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 2,
                    end: 3,
                    loc: {
                      start: {
                        line: 1,
                        column: 2
                      },
                      end: {
                        line: 1,
                        column: 3
                      }
                    },
                    range: [
                      2,
                      3
                    ],
                    name: "a"
                  },
                  null,
                  {
                    type: "Identifier",
                    start: 7,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      7,
                      8
                    ],
                    name: "b"
                  }
                ]
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 14,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                14,
                16
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(() => {})()": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            callee: {
              type: "ArrowFunctionExpression",
              start: 1,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              range: [
                1,
                9
              ],
              id: null,
              params: [],
              generator: false,
              expression: false,
              body: {
                type: "BlockStatement",
                start: 7,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  7,
                  9
                ],
                body: []
              }
            },
            arguments: []
          }
        }
      ],
      sourceType: "script"
    },
    "((() => {}))()": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            range: [
              0,
              14
            ],
            callee: {
              type: "ArrowFunctionExpression",
              start: 2,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 2
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              range: [
                2,
                10
              ],
              id: null,
              params: [],
              generator: false,
              expression: false,
              body: {
                type: "BlockStatement",
                start: 8,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  8,
                  10
                ],
                body: []
              }
            },
            arguments: []
          }
        }
      ],
      sourceType: "script"
    },
    "(x=1) => x * x": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 14
              }
            },
            range: [
              0,
              14
            ],
            id: null,
            params: [
              {
                type: "AssignmentPattern",
                start: 1,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                range: [
                  1,
                  4
                ],
                left: {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  range: [
                    1,
                    2
                  ],
                  name: "x"
                },
                right: {
                  type: "Literal",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  value: 1,
                  raw: "1"
                }
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "BinaryExpression",
              start: 9,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                9,
                14
              ],
              left: {
                type: "Identifier",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  9,
                  10
                ],
                name: "x"
              },
              operator: "*",
              right: {
                type: "Identifier",
                start: 13,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  13,
                  14
                ],
                name: "x"
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "eval => 42": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      range: [
        0,
        10
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          range: [
            0,
            10
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              0,
              10
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 4,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 4
                  }
                },
                range: [
                  0,
                  4
                ],
                name: "eval"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 8,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              range: [
                8,
                10
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "arguments => 42": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          range: [
            0,
            15
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              0,
              15
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  0,
                  9
                ],
                name: "arguments"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 13,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              range: [
                13,
                15
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a) => 00": {
      type: "Program",
      start: 0,
      end: 9,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 9
        }
      },
      range: [
        0,
        9
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 9
            }
          },
          range: [
            0,
            9
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 9,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 9
              }
            },
            range: [
              0,
              9
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "a"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 7,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              range: [
                7,
                9
              ],
              value: 0,
              raw: "00"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(eval, a) => 42": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          range: [
            0,
            15
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              0,
              15
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  1,
                  5
                ],
                name: "eval"
              },
              {
                type: "Identifier",
                start: 7,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                range: [
                  7,
                  8
                ],
                name: "a"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 13,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              range: [
                13,
                15
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(eval = 10) => 42": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            id: null,
            params: [
              {
                type: "AssignmentPattern",
                start: 1,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  1,
                  10
                ],
                left: {
                  type: "Identifier",
                  start: 1,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  range: [
                    1,
                    5
                  ],
                  name: "eval"
                },
                right: {
                  type: "Literal",
                  start: 8,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    8,
                    10
                  ],
                  value: 10,
                  raw: "10"
                }
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 15,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                15,
                17
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(eval, a = 10) => 42": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      range: [
        0,
        20
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          range: [
            0,
            20
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            range: [
              0,
              20
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  1,
                  5
                ],
                name: "eval"
              },
              {
                type: "AssignmentPattern",
                start: 7,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                range: [
                  7,
                  13
                ],
                left: {
                  type: "Identifier",
                  start: 7,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  range: [
                    7,
                    8
                  ],
                  name: "a"
                },
                right: {
                  type: "Literal",
                  start: 11,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    11,
                    13
                  ],
                  value: 10,
                  raw: "10"
                }
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 18,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                18,
                20
              ],
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(x => x)": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      range: [
        0,
        8
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          range: [
            0,
            8
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 1,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              1,
              7
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "x"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Identifier",
              start: 6,
              end: 7,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 7
                }
              },
              range: [
                6,
                7
              ],
              name: "x"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x => y => 42": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                loc: {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: {
                    line: 1,
                    column: 1
                  }
                },
                range: [
                  0,
                  1
                ],
                name: "x"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "ArrowFunctionExpression",
              start: 5,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                5,
                12
              ],
              id: null,
              params: [
                {
                  type: "Identifier",
                  start: 5,
                  end: 6,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 6
                    }
                  },
                  range: [
                    5,
                    6
                  ],
                  name: "y"
                }
              ],
              generator: false,
              expression: true,
              body: {
                type: "Literal",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  10,
                  12
                ],
                value: 42,
                raw: "42"
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(x) => ((y, z) => (x, y, z))": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      range: [
        0,
        28
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          range: [
            0,
            28
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 28
              }
            },
            range: [
              0,
              28
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "x"
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "ArrowFunctionExpression",
              start: 8,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 8
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                8,
                27
              ],
              id: null,
              params: [
                {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    9,
                    10
                  ],
                  name: "y"
                },
                {
                  type: "Identifier",
                  start: 12,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    12,
                    13
                  ],
                  name: "z"
                }
              ],
              generator: false,
              expression: true,
              body: {
                type: "SequenceExpression",
                start: 19,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                range: [
                  19,
                  26
                ],
                expressions: [
                  {
                    type: "Identifier",
                    start: 19,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    range: [
                      19,
                      20
                    ],
                    name: "x"
                  },
                  {
                    type: "Identifier",
                    start: 22,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 22
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    range: [
                      22,
                      23
                    ],
                    name: "y"
                  },
                  {
                    type: "Identifier",
                    start: 25,
                    end: 26,
                    loc: {
                      start: {
                        line: 1,
                        column: 25
                      },
                      end: {
                        line: 1,
                        column: 26
                      }
                    },
                    range: [
                      25,
                      26
                    ],
                    name: "z"
                  }
                ]
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo(() => {})": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            callee: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              range: [
                0,
                3
              ],
              name: "foo"
            },
            arguments: [
              {
                type: "ArrowFunctionExpression",
                start: 4,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  4,
                  12
                ],
                id: null,
                params: [],
                generator: false,
                expression: false,
                body: {
                  type: "BlockStatement",
                  start: 10,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    10,
                    12
                  ],
                  body: []
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "foo((x, y) => {})": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            callee: {
              type: "Identifier",
              start: 0,
              end: 3,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 3
                }
              },
              range: [
                0,
                3
              ],
              name: "foo"
            },
            arguments: [
              {
                type: "ArrowFunctionExpression",
                start: 4,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  4,
                  16
                ],
                id: null,
                params: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    name: "x"
                  },
                  {
                    type: "Identifier",
                    start: 8,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      8,
                      9
                    ],
                    name: "y"
                  }
                ],
                generator: false,
                expression: false,
                body: {
                  type: "BlockStatement",
                  start: 14,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    14,
                    16
                  ],
                  body: []
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "x = { method() { } }": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      range: [
        0,
        20
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          range: [
            0,
            20
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            range: [
              0,
              20
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                4,
                20
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    6,
                    18
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      6,
                      12
                    ],
                    name: "method"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      12,
                      18
                    ],
                    id: null,
                    params: [],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 15,
                      end: 18,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 18
                        }
                      },
                      range: [
                        15,
                        18
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { method(test) { } }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 24
              }
            },
            range: [
              0,
              24
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              range: [
                4,
                24
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    6,
                    22
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      6,
                      12
                    ],
                    name: "method"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 12,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    range: [
                      12,
                      22
                    ],
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 13,
                        end: 17,
                        loc: {
                          start: {
                            line: 1,
                            column: 13
                          },
                          end: {
                            line: 1,
                            column: 17
                          }
                        },
                        range: [
                          13,
                          17
                        ],
                        name: "test"
                      }
                    ],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 19,
                      end: 22,
                      loc: {
                        start: {
                          line: 1,
                          column: 19
                        },
                        end: {
                          line: 1,
                          column: 22
                        }
                      },
                      range: [
                        19,
                        22
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { 'method'() { } }": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              0,
              22
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                4,
                22
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    6,
                    20
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Literal",
                    start: 6,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      6,
                      14
                    ],
                    value: "method",
                    raw: "'method'"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 14,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    range: [
                      14,
                      20
                    ],
                    id: null,
                    params: [],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 17,
                      end: 20,
                      loc: {
                        start: {
                          line: 1,
                          column: 17
                        },
                        end: {
                          line: 1,
                          column: 20
                        }
                      },
                      range: [
                        17,
                        20
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { get() { } }": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                4,
                17
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    6,
                    15
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      6,
                      9
                    ],
                    name: "get"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 9,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      9,
                      15
                    ],
                    id: null,
                    params: [],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 12,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 12
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        12,
                        15
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { set() { } }": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                4,
                17
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    6,
                    15
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      6,
                      9
                    ],
                    name: "set"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 9,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      9,
                      15
                    ],
                    id: null,
                    params: [],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 12,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 12
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        12,
                        15
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { y, z }": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                4,
                12
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 7,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 7
                    }
                  },
                  range: [
                    6,
                    7
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    range: [
                      6,
                      7
                    ],
                    name: "y"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    range: [
                      6,
                      7
                    ],
                    name: "y"
                  }
                },
                {
                  type: "Property",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    9,
                    10
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 9,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      9,
                      10
                    ],
                    name: "z"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 9,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      9,
                      10
                    ],
                    name: "z"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[a, b] = [b, a]": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          range: [
            0,
            15
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              0,
              15
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              range: [
                0,
                6
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  range: [
                    1,
                    2
                  ],
                  name: "a"
                },
                {
                  type: "Identifier",
                  start: 4,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  range: [
                    4,
                    5
                  ],
                  name: "b"
                }
              ]
            },
            right: {
              type: "ArrayExpression",
              start: 9,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              range: [
                9,
                15
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 10,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  range: [
                    10,
                    11
                  ],
                  name: "b"
                },
                {
                  type: "Identifier",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  range: [
                    13,
                    14
                  ],
                  name: "a"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ responseText: text } = res)": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      range: [
        0,
        30
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          range: [
            0,
            30
          ],
          expression: {
            type: "AssignmentExpression",
            start: 1,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 29
              }
            },
            range: [
              1,
              29
            ],
            operator: "=",
            left: {
              type: "ObjectPattern",
              start: 1,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 1
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                1,
                23
              ],
              properties: [
                {
                  type: "Property",
                  start: 3,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    3,
                    21
                  ],
                  method: false,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 3,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      3,
                      15
                    ],
                    name: "responseText"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 17,
                    end: 21,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 21
                      }
                    },
                    range: [
                      17,
                      21
                    ],
                    name: "text"
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 26,
              end: 29,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 29
                }
              },
              range: [
                26,
                29
              ],
              name: "res"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "const {a} = {}": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          kind: "const",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                6,
                14
              ],
              id: {
                type: "ObjectPattern",
                start: 6,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  6,
                  9
                ],
                properties: [
                  {
                    type: "Property",
                    start: 7,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      7,
                      8
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 7,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 7
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      range: [
                        7,
                        8
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 7,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 7
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      range: [
                        7,
                        8
                      ],
                      name: "a"
                    }
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  12,
                  14
                ],
                properties: []
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "const [a] = []": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          kind: "const",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                6,
                14
              ],
              id: {
                type: "ArrayPattern",
                start: 6,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  6,
                  9
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 7,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      7,
                      8
                    ],
                    name: "a"
                  }
                ]
              },
              init: {
                type: "ArrayExpression",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  12,
                  14
                ],
                elements: []
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "let {a} = {}": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                4,
                12
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                range: [
                  4,
                  7
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    }
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  10,
                  12
                ],
                properties: []
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "let [a] = []": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                4,
                12
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                range: [
                  4,
                  7
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    name: "a"
                  }
                ]
              },
              init: {
                type: "ArrayExpression",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  10,
                  12
                ],
                elements: []
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var {a} = {}": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                4,
                12
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                range: [
                  4,
                  7
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    }
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  10,
                  12
                ],
                properties: []
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var [a] = []": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                4,
                12
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 7,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 7
                  }
                },
                range: [
                  4,
                  7
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    name: "a"
                  }
                ]
              },
              init: {
                type: "ArrayExpression",
                start: 10,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  10,
                  12
                ],
                elements: []
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "const {a:b} = {}": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      range: [
        0,
        16
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          range: [
            0,
            16
          ],
          kind: "const",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 6,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                6,
                16
              ],
              id: {
                type: "ObjectPattern",
                start: 6,
                end: 11,
                loc: {
                  start: {
                    line: 1,
                    column: 6
                  },
                  end: {
                    line: 1,
                    column: 11
                  }
                },
                range: [
                  6,
                  11
                ],
                properties: [
                  {
                    type: "Property",
                    start: 7,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      7,
                      10
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 7,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 7
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      range: [
                        7,
                        8
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 9,
                      end: 10,
                      loc: {
                        start: {
                          line: 1,
                          column: 9
                        },
                        end: {
                          line: 1,
                          column: 10
                        }
                      },
                      range: [
                        9,
                        10
                      ],
                      name: "b"
                    }
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 14,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 14
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  14,
                  16
                ],
                properties: []
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "let {a:b} = {}": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                4,
                14
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  4,
                  9
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      5,
                      8
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 7,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 7
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      range: [
                        7,
                        8
                      ],
                      name: "b"
                    }
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  12,
                  14
                ],
                properties: []
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var {a:b} = {}": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                4,
                14
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  4,
                  9
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      5,
                      8
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 6
                        }
                      },
                      range: [
                        5,
                        6
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 7,
                      end: 8,
                      loc: {
                        start: {
                          line: 1,
                          column: 7
                        },
                        end: {
                          line: 1,
                          column: 8
                        }
                      },
                      range: [
                        7,
                        8
                      ],
                      name: "b"
                    }
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 12,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  12,
                  14
                ],
                properties: []
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "(function* () { yield *v })": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 26
              }
            },
            range: [
              1,
              26
            ],
            id: null,
            params: [],
            generator: true,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 14,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              range: [
                14,
                26
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 16,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    16,
                    24
                  ],
                  expression: {
                    type: "YieldExpression",
                    start: 16,
                    end: 24,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 24
                      }
                    },
                    range: [
                      16,
                      24
                    ],
                    delegate: true,
                    argument: {
                      type: "Identifier",
                      start: 23,
                      end: 24,
                      loc: {
                        start: {
                          line: 1,
                          column: 23
                        },
                        end: {
                          line: 1,
                          column: 24
                        }
                      },
                      range: [
                        23,
                        24
                      ],
                      name: "v"
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function* test () { yield *v }": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      range: [
        0,
        30
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          range: [
            0,
            30
          ],
          id: {
            type: "Identifier",
            start: 10,
            end: 14,
            loc: {
              start: {
                line: 1,
                column: 10
              },
              end: {
                line: 1,
                column: 14
              }
            },
            range: [
              10,
              14
            ],
            name: "test"
          },
          params: [],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 18,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 30
              }
            },
            range: [
              18,
              30
            ],
            body: [
              {
                type: "ExpressionStatement",
                start: 20,
                end: 28,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 28
                  }
                },
                range: [
                  20,
                  28
                ],
                expression: {
                  type: "YieldExpression",
                  start: 20,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  range: [
                    20,
                    28
                  ],
                  delegate: true,
                  argument: {
                    type: "Identifier",
                    start: 27,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    range: [
                      27,
                      28
                    ],
                    name: "v"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var x = { *test () { yield *v } };": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      range: [
        0,
        34
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          range: [
            0,
            34
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              range: [
                4,
                33
              ],
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  4,
                  5
                ],
                name: "x"
              },
              init: {
                type: "ObjectExpression",
                start: 8,
                end: 33,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 33
                  }
                },
                range: [
                  8,
                  33
                ],
                properties: [
                  {
                    type: "Property",
                    start: 10,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 10
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    range: [
                      10,
                      31
                    ],
                    method: true,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 11,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 11
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        11,
                        15
                      ],
                      name: "test"
                    },
                    kind: "init",
                    value: {
                      type: "FunctionExpression",
                      start: 16,
                      end: 31,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 31
                        }
                      },
                      range: [
                        16,
                        31
                      ],
                      id: null,
                      params: [],
                      generator: true,
                      expression: false,
                      body: {
                        type: "BlockStatement",
                        start: 19,
                        end: 31,
                        loc: {
                          start: {
                            line: 1,
                            column: 19
                          },
                          end: {
                            line: 1,
                            column: 31
                          }
                        },
                        range: [
                          19,
                          31
                        ],
                        body: [
                          {
                            type: "ExpressionStatement",
                            start: 21,
                            end: 29,
                            loc: {
                              start: {
                                line: 1,
                                column: 21
                              },
                              end: {
                                line: 1,
                                column: 29
                              }
                            },
                            range: [
                              21,
                              29
                            ],
                            expression: {
                              type: "YieldExpression",
                              start: 21,
                              end: 29,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 21
                                },
                                end: {
                                  line: 1,
                                  column: 29
                                }
                              },
                              range: [
                                21,
                                29
                              ],
                              delegate: true,
                              argument: {
                                type: "Identifier",
                                start: 28,
                                end: 29,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 28
                                  },
                                  end: {
                                    line: 1,
                                    column: 29
                                  }
                                },
                                range: [
                                  28,
                                  29
                                ],
                                name: "v"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "function* foo() { console.log(yield); }": {
      type: "Program",
      start: 0,
      end: 39,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 39,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "foo"
          },
          params: [],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 16,
            end: 39,
            body: [
              {
                type: "ExpressionStatement",
                start: 18,
                end: 37,
                expression: {
                  type: "CallExpression",
                  start: 18,
                  end: 36,
                  callee: {
                    type: "MemberExpression",
                    start: 18,
                    end: 29,
                    object: {
                      type: "Identifier",
                      start: 18,
                      end: 25,
                      name: "console"
                    },
                    property: {
                      type: "Identifier",
                      start: 26,
                      end: 29,
                      name: "log"
                    },
                    computed: false
                  },
                  arguments: [
                    {
                      type: "YieldExpression",
                      start: 30,
                      end: 35,
                      delegate: false,
                      argument: null
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function* t() {}": {
      type: "Program",
      start: 0,
      end: 16,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 16
        }
      },
      range: [
        0,
        16
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 16,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 16
            }
          },
          range: [
            0,
            16
          ],
          id: {
            type: "Identifier",
            start: 10,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 10
              },
              end: {
                line: 1,
                column: 11
              }
            },
            range: [
              10,
              11
            ],
            name: "t"
          },
          params: [],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 14,
            end: 16,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 16
              }
            },
            range: [
              14,
              16
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "(function* () { yield yield 10 })": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 32
              }
            },
            range: [
              1,
              32
            ],
            id: null,
            params: [],
            generator: true,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 14,
              end: 32,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 32
                }
              },
              range: [
                14,
                32
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 16,
                  end: 30,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 30
                    }
                  },
                  range: [
                    16,
                    30
                  ],
                  expression: {
                    type: "YieldExpression",
                    start: 16,
                    end: 30,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 30
                      }
                    },
                    range: [
                      16,
                      30
                    ],
                    delegate: false,
                    argument: {
                      type: "YieldExpression",
                      start: 22,
                      end: 30,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 30
                        }
                      },
                      range: [
                        22,
                        30
                      ],
                      delegate: false,
                      argument: {
                        type: "Literal",
                        start: 28,
                        end: 30,
                        loc: {
                          start: {
                            line: 1,
                            column: 28
                          },
                          end: {
                            line: 1,
                            column: 30
                          }
                        },
                        range: [
                          28,
                          30
                        ],
                        value: 10,
                        raw: "10"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for(x of list) process(x);": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          range: [
            0,
            26
          ],
          left: {
            type: "Identifier",
            start: 4,
            end: 5,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 5
              }
            },
            range: [
              4,
              5
            ],
            name: "x"
          },
          right: {
            type: "Identifier",
            start: 9,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              9,
              13
            ],
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 15,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 26
              }
            },
            range: [
              15,
              26
            ],
            expression: {
              type: "CallExpression",
              start: 15,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 15
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              range: [
                15,
                25
              ],
              callee: {
                type: "Identifier",
                start: 15,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                range: [
                  15,
                  22
                ],
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 23,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    23,
                    24
                  ],
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for (var x of list) process(x);": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      range: [
        0,
        31
      ],
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          range: [
            0,
            31
          ],
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              5,
              10
            ],
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  9,
                  10
                ],
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    9,
                    10
                  ],
                  name: "x"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 14,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              14,
              18
            ],
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 20,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 31
              }
            },
            range: [
              20,
              31
            ],
            expression: {
              type: "CallExpression",
              start: 20,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              range: [
                20,
                30
              ],
              callee: {
                type: "Identifier",
                start: 20,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  20,
                  27
                ],
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 28,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    28,
                    29
                  ],
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for (var x = 42 of list) process(x);": {
      type: "Program",
      start: 0,
      end: 36,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 36
        }
      },
      range: [
        0,
        36
      ],
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 36,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 36
            }
          },
          range: [
            0,
            36
          ],
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              5,
              15
            ],
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                range: [
                  9,
                  15
                ],
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    9,
                    10
                  ],
                  name: "x"
                },
                init: {
                  type: "Literal",
                  start: 13,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    13,
                    15
                  ],
                  value: 42,
                  raw: "42"
                }
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 19,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 19
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              19,
              23
            ],
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 25,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 25
              },
              end: {
                line: 1,
                column: 36
              }
            },
            range: [
              25,
              36
            ],
            expression: {
              type: "CallExpression",
              start: 25,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              range: [
                25,
                35
              ],
              callee: {
                type: "Identifier",
                start: 25,
                end: 32,
                loc: {
                  start: {
                    line: 1,
                    column: 25
                  },
                  end: {
                    line: 1,
                    column: 32
                  }
                },
                range: [
                  25,
                  32
                ],
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 33,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 33
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  range: [
                    33,
                    34
                  ],
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for (let x of list) process(x);": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      range: [
        0,
        31
      ],
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          range: [
            0,
            31
          ],
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              5,
              10
            ],
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  9,
                  10
                ],
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    9,
                    10
                  ],
                  name: "x"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 14,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              14,
              18
            ],
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 20,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 31
              }
            },
            range: [
              20,
              31
            ],
            expression: {
              type: "CallExpression",
              start: 20,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              range: [
                20,
                30
              ],
              callee: {
                type: "Identifier",
                start: 20,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  20,
                  27
                ],
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 28,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    28,
                    29
                  ],
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "var A = class extends B {}": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          range: [
            0,
            26
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 26,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 26
                }
              },
              range: [
                4,
                26
              ],
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  4,
                  5
                ],
                name: "A"
              },
              init: {
                type: "ClassExpression",
                start: 8,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                range: [
                  8,
                  26
                ],
                id: null,
                superClass: {
                  type: "Identifier",
                  start: 22,
                  end: 23,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 23
                    }
                  },
                  range: [
                    22,
                    23
                  ],
                  name: "B"
                },
                body: {
                  type: "ClassBody",
                  start: 24,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    24,
                    26
                  ],
                  body: []
                }
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "class A extends class B extends C {} {}": {
      type: "Program",
      start: 0,
      end: 39,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 39
        }
      },
      range: [
        0,
        39
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 39,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 39
            }
          },
          range: [
            0,
            39
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: {
            type: "ClassExpression",
            start: 16,
            end: 36,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 36
              }
            },
            range: [
              16,
              36
            ],
            id: {
              type: "Identifier",
              start: 22,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 22
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                22,
                23
              ],
              name: "B"
            },
            superClass: {
              type: "Identifier",
              start: 32,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 32
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              range: [
                32,
                33
              ],
              name: "C"
            },
            body: {
              type: "ClassBody",
              start: 34,
              end: 36,
              loc: {
                start: {
                  line: 1,
                  column: 34
                },
                end: {
                  line: 1,
                  column: 36
                }
              },
              range: [
                34,
                36
              ],
              body: []
            }
          },
          body: {
            type: "ClassBody",
            start: 37,
            end: 39,
            loc: {
              start: {
                line: 1,
                column: 37
              },
              end: {
                line: 1,
                column: 39
              }
            },
            range: [
              37,
              39
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "class A {get() {}}": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              8,
              18
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                range: [
                  9,
                  17
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    9,
                    12
                  ],
                  name: "get"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    12,
                    17
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      15,
                      17
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static get() {}}": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          range: [
            0,
            26
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 26,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 26
              }
            },
            range: [
              8,
              26
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  10,
                  25
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 17,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    17,
                    20
                  ],
                  name: "get"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 20,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  range: [
                    20,
                    25
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 23,
                    end: 25,
                    loc: {
                      start: {
                        line: 1,
                        column: 23
                      },
                      end: {
                        line: 1,
                        column: 25
                      }
                    },
                    range: [
                      23,
                      25
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A extends B {get foo() {}}": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 32
        }
      },
      range: [
        0,
        32
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 32
            }
          },
          range: [
            0,
            32
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: {
            type: "Identifier",
            start: 16,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              16,
              17
            ],
            name: "B"
          },
          body: {
            type: "ClassBody",
            start: 18,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 32
              }
            },
            range: [
              18,
              32
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 19,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                range: [
                  19,
                  31
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 23,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    23,
                    26
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 26,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  range: [
                    26,
                    31
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 29,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 29
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    range: [
                      29,
                      31
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A extends B { static get foo() {}}": {
      type: "Program",
      start: 0,
      end: 40,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 40
        }
      },
      range: [
        0,
        40
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 40,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 40
            }
          },
          range: [
            0,
            40
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: {
            type: "Identifier",
            start: 16,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              16,
              17
            ],
            name: "B"
          },
          body: {
            type: "ClassBody",
            start: 18,
            end: 40,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 40
              }
            },
            range: [
              18,
              40
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 20,
                end: 39,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 39
                  }
                },
                range: [
                  20,
                  39
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 31,
                  end: 34,
                  loc: {
                    start: {
                      line: 1,
                      column: 31
                    },
                    end: {
                      line: 1,
                      column: 34
                    }
                  },
                  range: [
                    31,
                    34
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 34,
                  end: 39,
                  loc: {
                    start: {
                      line: 1,
                      column: 34
                    },
                    end: {
                      line: 1,
                      column: 39
                    }
                  },
                  range: [
                    34,
                    39
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 37,
                    end: 39,
                    loc: {
                      start: {
                        line: 1,
                        column: 37
                      },
                      end: {
                        line: 1,
                        column: 39
                      }
                    },
                    range: [
                      37,
                      39
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {set a(v) {}}": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      range: [
        0,
        21
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          range: [
            0,
            21
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 21
              }
            },
            range: [
              8,
              21
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  9,
                  20
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  range: [
                    13,
                    14
                  ],
                  name: "a"
                },
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 14,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    14,
                    20
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 15,
                      end: 16,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 16
                        }
                      },
                      range: [
                        15,
                        16
                      ],
                      name: "v"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 18,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    range: [
                      18,
                      20
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static set a(v) {}}": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      range: [
        0,
        29
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          range: [
            0,
            29
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 29
              }
            },
            range: [
              8,
              29
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 28,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 28
                  }
                },
                range: [
                  10,
                  28
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    21,
                    22
                  ],
                  name: "a"
                },
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 22,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  range: [
                    22,
                    28
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 23,
                      end: 24,
                      loc: {
                        start: {
                          line: 1,
                          column: 23
                        },
                        end: {
                          line: 1,
                          column: 24
                        }
                      },
                      range: [
                        23,
                        24
                      ],
                      name: "v"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 26,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 26
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    range: [
                      26,
                      28
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {set(v) {};}": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      range: [
        0,
        20
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          range: [
            0,
            20
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 20
              }
            },
            range: [
              8,
              20
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  9,
                  18
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    9,
                    12
                  ],
                  name: "set"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    12,
                    18
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 13,
                      end: 14,
                      loc: {
                        start: {
                          line: 1,
                          column: 13
                        },
                        end: {
                          line: 1,
                          column: 14
                        }
                      },
                      range: [
                        13,
                        14
                      ],
                      name: "v"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 16,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      16,
                      18
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static set(v) {};}": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      range: [
        0,
        28
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          range: [
            0,
            28
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 28
              }
            },
            range: [
              8,
              28
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                range: [
                  10,
                  26
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 17,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    17,
                    20
                  ],
                  name: "set"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 20,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 20
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    20,
                    26
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 21,
                      end: 22,
                      loc: {
                        start: {
                          line: 1,
                          column: 21
                        },
                        end: {
                          line: 1,
                          column: 22
                        }
                      },
                      range: [
                        21,
                        22
                      ],
                      name: "v"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 24,
                    end: 26,
                    loc: {
                      start: {
                        line: 1,
                        column: 24
                      },
                      end: {
                        line: 1,
                        column: 26
                      }
                    },
                    range: [
                      24,
                      26
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {*gen(v) { yield v; }}": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      range: [
        0,
        30
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          range: [
            0,
            30
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 30
              }
            },
            range: [
              8,
              30
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  9,
                  29
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    10,
                    13
                  ],
                  name: "gen"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 13,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    13,
                    29
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 14,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 14
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        14,
                        15
                      ],
                      name: "v"
                    }
                  ],
                  generator: true,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 17,
                    end: 29,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 29
                      }
                    },
                    range: [
                      17,
                      29
                    ],
                    body: [
                      {
                        type: "ExpressionStatement",
                        start: 19,
                        end: 27,
                        loc: {
                          start: {
                            line: 1,
                            column: 19
                          },
                          end: {
                            line: 1,
                            column: 27
                          }
                        },
                        range: [
                          19,
                          27
                        ],
                        expression: {
                          type: "YieldExpression",
                          start: 19,
                          end: 26,
                          loc: {
                            start: {
                              line: 1,
                              column: 19
                            },
                            end: {
                              line: 1,
                              column: 26
                            }
                          },
                          range: [
                            19,
                            26
                          ],
                          delegate: false,
                          argument: {
                            type: "Identifier",
                            start: 25,
                            end: 26,
                            loc: {
                              start: {
                                line: 1,
                                column: 25
                              },
                              end: {
                                line: 1,
                                column: 26
                              }
                            },
                            range: [
                              25,
                              26
                            ],
                            name: "v"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static *gen(v) { yield v; }}": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      range: [
        0,
        38
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          range: [
            0,
            38
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 38
              }
            },
            range: [
              8,
              38
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 37,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 37
                  }
                },
                range: [
                  10,
                  37
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 18,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 18
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    18,
                    21
                  ],
                  name: "gen"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 21,
                  end: 37,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 37
                    }
                  },
                  range: [
                    21,
                    37
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 22,
                      end: 23,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 23
                        }
                      },
                      range: [
                        22,
                        23
                      ],
                      name: "v"
                    }
                  ],
                  generator: true,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 25,
                    end: 37,
                    loc: {
                      start: {
                        line: 1,
                        column: 25
                      },
                      end: {
                        line: 1,
                        column: 37
                      }
                    },
                    range: [
                      25,
                      37
                    ],
                    body: [
                      {
                        type: "ExpressionStatement",
                        start: 27,
                        end: 35,
                        loc: {
                          start: {
                            line: 1,
                            column: 27
                          },
                          end: {
                            line: 1,
                            column: 35
                          }
                        },
                        range: [
                          27,
                          35
                        ],
                        expression: {
                          type: "YieldExpression",
                          start: 27,
                          end: 34,
                          loc: {
                            start: {
                              line: 1,
                              column: 27
                            },
                            end: {
                              line: 1,
                              column: 34
                            }
                          },
                          range: [
                            27,
                            34
                          ],
                          delegate: false,
                          argument: {
                            type: "Identifier",
                            start: 33,
                            end: 34,
                            loc: {
                              start: {
                                line: 1,
                                column: 33
                              },
                              end: {
                                line: 1,
                                column: 34
                              }
                            },
                            range: [
                              33,
                              34
                            ],
                            name: "v"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "\"use strict\"; (class A {constructor() { super() }})": {
      type: "Program",
      start: 0,
      end: 51,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 51
        }
      },
      range: [
        0,
        51
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            value: "use strict",
            raw: "\"use strict\""
          }
        },
        {
          type: "ExpressionStatement",
          start: 14,
          end: 51,
          loc: {
            start: {
              line: 1,
              column: 14
            },
            end: {
              line: 1,
              column: 51
            }
          },
          range: [
            14,
            51
          ],
          expression: {
            type: "ClassExpression",
            start: 15,
            end: 50,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 50
              }
            },
            range: [
              15,
              50
            ],
            id: {
              type: "Identifier",
              start: 21,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                21,
                22
              ],
              name: "A"
            },
            superClass: null,
            body: {
              type: "ClassBody",
              start: 23,
              end: 50,
              loc: {
                start: {
                  line: 1,
                  column: 23
                },
                end: {
                  line: 1,
                  column: 50
                }
              },
              range: [
                23,
                50
              ],
              body: [
                {
                  type: "MethodDefinition",
                  start: 24,
                  end: 49,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 49
                    }
                  },
                  range: [
                    24,
                    49
                  ],
                  static: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 24,
                    end: 35,
                    loc: {
                      start: {
                        line: 1,
                        column: 24
                      },
                      end: {
                        line: 1,
                        column: 35
                      }
                    },
                    range: [
                      24,
                      35
                    ],
                    name: "constructor"
                  },
                  kind: "constructor",
                  value: {
                    type: "FunctionExpression",
                    start: 35,
                    end: 49,
                    loc: {
                      start: {
                        line: 1,
                        column: 35
                      },
                      end: {
                        line: 1,
                        column: 49
                      }
                    },
                    range: [
                      35,
                      49
                    ],
                    id: null,
                    params: [],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 38,
                      end: 49,
                      loc: {
                        start: {
                          line: 1,
                          column: 38
                        },
                        end: {
                          line: 1,
                          column: 49
                        }
                      },
                      range: [
                        38,
                        49
                      ],
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 40,
                          end: 47,
                          loc: {
                            start: {
                              line: 1,
                              column: 40
                            },
                            end: {
                              line: 1,
                              column: 47
                            }
                          },
                          range: [
                            40,
                            47
                          ],
                          expression: {
                            type: "CallExpression",
                            start: 40,
                            end: 47,
                            loc: {
                              start: {
                                line: 1,
                                column: 40
                              },
                              end: {
                                line: 1,
                                column: 47
                              }
                            },
                            range: [
                              40,
                              47
                            ],
                            callee: {
                              type: "Super",
                              start: 40,
                              end: 45,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 40
                                },
                                end: {
                                  line: 1,
                                  column: 45
                                }
                              },
                              range: [
                                40,
                                45
                              ]
                            },
                            arguments: []
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "class A {'constructor'() {}}": {
      type: "Program",
      start: 0,
      end: 28,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 28,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 28,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 27,
                static: false,
                computed: false,
                key: {
                  type: "Literal",
                  start: 9,
                  end: 22,
                  value: "constructor",
                  raw: "'constructor'"
                },
                kind: "constructor",
                value: {
                  type: "FunctionExpression",
                  start: 22,
                  end: 27,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 25,
                    end: 27,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static foo() {}}": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      range: [
        0,
        25
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          range: [
            0,
            25
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 25
              }
            },
            range: [
              8,
              25
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                range: [
                  9,
                  24
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 16,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    16,
                    19
                  ],
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 19,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    19,
                    24
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 22,
                    end: 24,
                    loc: {
                      start: {
                        line: 1,
                        column: 22
                      },
                      end: {
                        line: 1,
                        column: 24
                      }
                    },
                    range: [
                      22,
                      24
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {foo() {} static bar() {}}": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      range: [
        0,
        34
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          range: [
            0,
            34
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 34,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 34
              }
            },
            range: [
              8,
              34
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                range: [
                  9,
                  17
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    9,
                    12
                  ],
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    12,
                    17
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      15,
                      17
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 18,
                end: 33,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 33
                  }
                },
                range: [
                  18,
                  33
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 25,
                  end: 28,
                  loc: {
                    start: {
                      line: 1,
                      column: 25
                    },
                    end: {
                      line: 1,
                      column: 28
                    }
                  },
                  range: [
                    25,
                    28
                  ],
                  name: "bar"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 28,
                  end: 33,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 33
                    }
                  },
                  range: [
                    28,
                    33
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 31,
                    end: 33,
                    loc: {
                      start: {
                        line: 1,
                        column: 31
                      },
                      end: {
                        line: 1,
                        column: 33
                      }
                    },
                    range: [
                      31,
                      33
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "\"use strict\"; (class A { static constructor() { super() }})": {
      type: "Program",
      start: 0,
      end: 59,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 59
        }
      },
      range: [
        0,
        59
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            value: "use strict",
            raw: "\"use strict\""
          }
        },
        {
          type: "ExpressionStatement",
          start: 14,
          end: 59,
          loc: {
            start: {
              line: 1,
              column: 14
            },
            end: {
              line: 1,
              column: 59
            }
          },
          range: [
            14,
            59
          ],
          expression: {
            type: "ClassExpression",
            start: 15,
            end: 58,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 58
              }
            },
            range: [
              15,
              58
            ],
            id: {
              type: "Identifier",
              start: 21,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                21,
                22
              ],
              name: "A"
            },
            superClass: null,
            body: {
              type: "ClassBody",
              start: 23,
              end: 58,
              loc: {
                start: {
                  line: 1,
                  column: 23
                },
                end: {
                  line: 1,
                  column: 58
                }
              },
              range: [
                23,
                58
              ],
              body: [
                {
                  type: "MethodDefinition",
                  start: 25,
                  end: 57,
                  loc: {
                    start: {
                      line: 1,
                      column: 25
                    },
                    end: {
                      line: 1,
                      column: 57
                    }
                  },
                  range: [
                    25,
                    57
                  ],
                  static: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 32,
                    end: 43,
                    loc: {
                      start: {
                        line: 1,
                        column: 32
                      },
                      end: {
                        line: 1,
                        column: 43
                      }
                    },
                    range: [
                      32,
                      43
                    ],
                    name: "constructor"
                  },
                  kind: "method",
                  value: {
                    type: "FunctionExpression",
                    start: 43,
                    end: 57,
                    loc: {
                      start: {
                        line: 1,
                        column: 43
                      },
                      end: {
                        line: 1,
                        column: 57
                      }
                    },
                    range: [
                      43,
                      57
                    ],
                    id: null,
                    params: [],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 46,
                      end: 57,
                      loc: {
                        start: {
                          line: 1,
                          column: 46
                        },
                        end: {
                          line: 1,
                          column: 57
                        }
                      },
                      range: [
                        46,
                        57
                      ],
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 48,
                          end: 55,
                          loc: {
                            start: {
                              line: 1,
                              column: 48
                            },
                            end: {
                              line: 1,
                              column: 55
                            }
                          },
                          range: [
                            48,
                            55
                          ],
                          expression: {
                            type: "CallExpression",
                            start: 48,
                            end: 55,
                            loc: {
                              start: {
                                line: 1,
                                column: 48
                              },
                              end: {
                                line: 1,
                                column: 55
                              }
                            },
                            range: [
                              48,
                              55
                            ],
                            callee: {
                              type: "Super",
                              start: 48,
                              end: 53,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 48
                                },
                                end: {
                                  line: 1,
                                  column: 53
                                }
                              },
                              range: [
                                48,
                                53
                              ]
                            },
                            arguments: []
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "class A { foo() {} bar() {}}": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      range: [
        0,
        28
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          range: [
            0,
            28
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 28
              }
            },
            range: [
              8,
              28
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  10,
                  18
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    10,
                    13
                  ],
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 13,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    13,
                    18
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 16,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      16,
                      18
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 19,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  19,
                  27
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 19,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    19,
                    22
                  ],
                  name: "bar"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 22,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  range: [
                    22,
                    27
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 25,
                    end: 27,
                    loc: {
                      start: {
                        line: 1,
                        column: 25
                      },
                      end: {
                        line: 1,
                        column: 27
                      }
                    },
                    range: [
                      25,
                      27
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { get foo() {} set foo(v) {}}": {
      type: "Program",
      start: 0,
      end: 37,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 37
        }
      },
      range: [
        0,
        37
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 37,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 37
            }
          },
          range: [
            0,
            37
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 37,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 37
              }
            },
            range: [
              8,
              37
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                range: [
                  10,
                  22
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 14,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    14,
                    17
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 17,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    17,
                    22
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 20,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    range: [
                      20,
                      22
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 23,
                end: 36,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 36
                  }
                },
                range: [
                  23,
                  36
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 27,
                  end: 30,
                  loc: {
                    start: {
                      line: 1,
                      column: 27
                    },
                    end: {
                      line: 1,
                      column: 30
                    }
                  },
                  range: [
                    27,
                    30
                  ],
                  name: "foo"
                },
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 30,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 30
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  range: [
                    30,
                    36
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 31,
                      end: 32,
                      loc: {
                        start: {
                          line: 1,
                          column: 31
                        },
                        end: {
                          line: 1,
                          column: 32
                        }
                      },
                      range: [
                        31,
                        32
                      ],
                      name: "v"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 34,
                    end: 36,
                    loc: {
                      start: {
                        line: 1,
                        column: 34
                      },
                      end: {
                        line: 1,
                        column: 36
                      }
                    },
                    range: [
                      34,
                      36
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static get foo() {} get foo() {}}": {
      type: "Program",
      start: 0,
      end: 43,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 43
        }
      },
      range: [
        0,
        43
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 43,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 43
            }
          },
          range: [
            0,
            43
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 43,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 43
              }
            },
            range: [
              8,
              43
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  10,
                  29
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    21,
                    24
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 24,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    24,
                    29
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 27,
                    end: 29,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 29
                      }
                    },
                    range: [
                      27,
                      29
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 30,
                end: 42,
                loc: {
                  start: {
                    line: 1,
                    column: 30
                  },
                  end: {
                    line: 1,
                    column: 42
                  }
                },
                range: [
                  30,
                  42
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 34,
                  end: 37,
                  loc: {
                    start: {
                      line: 1,
                      column: 34
                    },
                    end: {
                      line: 1,
                      column: 37
                    }
                  },
                  range: [
                    34,
                    37
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 37,
                  end: 42,
                  loc: {
                    start: {
                      line: 1,
                      column: 37
                    },
                    end: {
                      line: 1,
                      column: 42
                    }
                  },
                  range: [
                    37,
                    42
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 40,
                    end: 42,
                    loc: {
                      start: {
                        line: 1,
                        column: 40
                      },
                      end: {
                        line: 1,
                        column: 42
                      }
                    },
                    range: [
                      40,
                      42
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static get foo() {} static get bar() {} }": {
      type: "Program",
      start: 0,
      end: 51,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 51
        }
      },
      range: [
        0,
        51
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 51,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 51
            }
          },
          range: [
            0,
            51
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 51,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 51
              }
            },
            range: [
              8,
              51
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  10,
                  29
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    21,
                    24
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 24,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    24,
                    29
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 27,
                    end: 29,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 29
                      }
                    },
                    range: [
                      27,
                      29
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 30,
                end: 49,
                loc: {
                  start: {
                    line: 1,
                    column: 30
                  },
                  end: {
                    line: 1,
                    column: 49
                  }
                },
                range: [
                  30,
                  49
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 41,
                  end: 44,
                  loc: {
                    start: {
                      line: 1,
                      column: 41
                    },
                    end: {
                      line: 1,
                      column: 44
                    }
                  },
                  range: [
                    41,
                    44
                  ],
                  name: "bar"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 44,
                  end: 49,
                  loc: {
                    start: {
                      line: 1,
                      column: 44
                    },
                    end: {
                      line: 1,
                      column: 49
                    }
                  },
                  range: [
                    44,
                    49
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 47,
                    end: 49,
                    loc: {
                      start: {
                        line: 1,
                        column: 47
                      },
                      end: {
                        line: 1,
                        column: 49
                      }
                    },
                    range: [
                      47,
                      49
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static get foo() {} static set foo(v) {} get foo() {} set foo(v) {}}": {
      type: "Program",
      start: 0,
      end: 78,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 78
        }
      },
      range: [
        0,
        78
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 78,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 78
            }
          },
          range: [
            0,
            78
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 78,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 78
              }
            },
            range: [
              8,
              78
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  10,
                  29
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 24,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 24
                    }
                  },
                  range: [
                    21,
                    24
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 24,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    24,
                    29
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 27,
                    end: 29,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 29
                      }
                    },
                    range: [
                      27,
                      29
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 30,
                end: 50,
                loc: {
                  start: {
                    line: 1,
                    column: 30
                  },
                  end: {
                    line: 1,
                    column: 50
                  }
                },
                range: [
                  30,
                  50
                ],
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 41,
                  end: 44,
                  loc: {
                    start: {
                      line: 1,
                      column: 41
                    },
                    end: {
                      line: 1,
                      column: 44
                    }
                  },
                  range: [
                    41,
                    44
                  ],
                  name: "foo"
                },
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 44,
                  end: 50,
                  loc: {
                    start: {
                      line: 1,
                      column: 44
                    },
                    end: {
                      line: 1,
                      column: 50
                    }
                  },
                  range: [
                    44,
                    50
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 45,
                      end: 46,
                      loc: {
                        start: {
                          line: 1,
                          column: 45
                        },
                        end: {
                          line: 1,
                          column: 46
                        }
                      },
                      range: [
                        45,
                        46
                      ],
                      name: "v"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 48,
                    end: 50,
                    loc: {
                      start: {
                        line: 1,
                        column: 48
                      },
                      end: {
                        line: 1,
                        column: 50
                      }
                    },
                    range: [
                      48,
                      50
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 51,
                end: 63,
                loc: {
                  start: {
                    line: 1,
                    column: 51
                  },
                  end: {
                    line: 1,
                    column: 63
                  }
                },
                range: [
                  51,
                  63
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 55,
                  end: 58,
                  loc: {
                    start: {
                      line: 1,
                      column: 55
                    },
                    end: {
                      line: 1,
                      column: 58
                    }
                  },
                  range: [
                    55,
                    58
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 58,
                  end: 63,
                  loc: {
                    start: {
                      line: 1,
                      column: 58
                    },
                    end: {
                      line: 1,
                      column: 63
                    }
                  },
                  range: [
                    58,
                    63
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 61,
                    end: 63,
                    loc: {
                      start: {
                        line: 1,
                        column: 61
                      },
                      end: {
                        line: 1,
                        column: 63
                      }
                    },
                    range: [
                      61,
                      63
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 64,
                end: 77,
                loc: {
                  start: {
                    line: 1,
                    column: 64
                  },
                  end: {
                    line: 1,
                    column: 77
                  }
                },
                range: [
                  64,
                  77
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 68,
                  end: 71,
                  loc: {
                    start: {
                      line: 1,
                      column: 68
                    },
                    end: {
                      line: 1,
                      column: 71
                    }
                  },
                  range: [
                    68,
                    71
                  ],
                  name: "foo"
                },
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 71,
                  end: 77,
                  loc: {
                    start: {
                      line: 1,
                      column: 71
                    },
                    end: {
                      line: 1,
                      column: 77
                    }
                  },
                  range: [
                    71,
                    77
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 72,
                      end: 73,
                      loc: {
                        start: {
                          line: 1,
                          column: 72
                        },
                        end: {
                          line: 1,
                          column: 73
                        }
                      },
                      range: [
                        72,
                        73
                      ],
                      name: "v"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 75,
                    end: 77,
                    loc: {
                      start: {
                        line: 1,
                        column: 75
                      },
                      end: {
                        line: 1,
                        column: 77
                      }
                    },
                    range: [
                      75,
                      77
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static [foo]() {} }": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      range: [
        0,
        29
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          range: [
            0,
            29
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 29,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 29
              }
            },
            range: [
              8,
              29
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  10,
                  27
                ],
                static: true,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 18,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 18
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    18,
                    21
                  ],
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 22,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  range: [
                    22,
                    27
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 25,
                    end: 27,
                    loc: {
                      start: {
                        line: 1,
                        column: 25
                      },
                      end: {
                        line: 1,
                        column: 27
                      }
                    },
                    range: [
                      25,
                      27
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { static get [foo]() {} }": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 33
              }
            },
            range: [
              8,
              33
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                range: [
                  10,
                  31
                ],
                static: true,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 22,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  range: [
                    22,
                    25
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 26,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  range: [
                    26,
                    31
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 29,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 29
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    range: [
                      29,
                      31
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { set foo(v) {} get foo() {} }": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      range: [
        0,
        38
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          range: [
            0,
            38
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 38
              }
            },
            range: [
              8,
              38
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                range: [
                  10,
                  23
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 14,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    14,
                    17
                  ],
                  name: "foo"
                },
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 17,
                  end: 23,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 23
                    }
                  },
                  range: [
                    17,
                    23
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 18,
                      end: 19,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 19
                        }
                      },
                      range: [
                        18,
                        19
                      ],
                      name: "v"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 21,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 21
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    range: [
                      21,
                      23
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 24,
                end: 36,
                loc: {
                  start: {
                    line: 1,
                    column: 24
                  },
                  end: {
                    line: 1,
                    column: 36
                  }
                },
                range: [
                  24,
                  36
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 28,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 28
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  range: [
                    28,
                    31
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 31,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 31
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  range: [
                    31,
                    36
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 34,
                    end: 36,
                    loc: {
                      start: {
                        line: 1,
                        column: 34
                      },
                      end: {
                        line: 1,
                        column: 36
                      }
                    },
                    range: [
                      34,
                      36
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A { foo() {} get foo() {} }": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 33
              }
            },
            range: [
              8,
              33
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  10,
                  18
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    10,
                    13
                  ],
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 13,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    13,
                    18
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 16,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      16,
                      18
                    ],
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 19,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 19
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                range: [
                  19,
                  31
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 23,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    23,
                    26
                  ],
                  name: "foo"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 26,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 26
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  range: [
                    26,
                    31
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 29,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 29
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    range: [
                      29,
                      31
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class Semicolon { ; }": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      range: [
        0,
        21
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          range: [
            0,
            21
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              6,
              15
            ],
            name: "Semicolon"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 16,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 21
              }
            },
            range: [
              16,
              21
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "({[x]: 10})": {
      type: "Program",
      start: 0,
      end: 11,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      },
      range: [
        0,
        11
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 11
            }
          },
          range: [
            0,
            11
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              1,
              10
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  2,
                  9
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 7,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  range: [
                    7,
                    9
                  ],
                  value: 10,
                  raw: "10"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({[\"x\" + \"y\"]: 10})": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          range: [
            0,
            19
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              1,
              18
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                range: [
                  2,
                  17
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "BinaryExpression",
                  start: 3,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    3,
                    12
                  ],
                  left: {
                    type: "Literal",
                    start: 3,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      3,
                      6
                    ],
                    value: "x",
                    raw: "\"x\""
                  },
                  operator: "+",
                  right: {
                    type: "Literal",
                    start: 9,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      9,
                      12
                    ],
                    value: "y",
                    raw: "\"y\""
                  }
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 15,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 15
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    15,
                    17
                  ],
                  value: 10,
                  raw: "10"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({[x]: function() {}})": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 21
              }
            },
            range: [
              1,
              21
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  2,
                  20
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 7,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    7,
                    20
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 18,
                    end: 20,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 20
                      }
                    },
                    range: [
                      18,
                      20
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({[x]: 10, y: 20})": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              1,
              17
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  2,
                  9
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 7,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  range: [
                    7,
                    9
                  ],
                  value: 10,
                  raw: "10"
                }
              },
              {
                type: "Property",
                start: 11,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  11,
                  16
                ],
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 11,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    11,
                    12
                  ],
                  name: "y"
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 14,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 14
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    14,
                    16
                  ],
                  value: 20,
                  raw: "20"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({get [x]() {}, set [x](v) {}})": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      range: [
        0,
        31
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          range: [
            0,
            31
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 30
              }
            },
            range: [
              1,
              30
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  2,
                  14
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 7,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  range: [
                    7,
                    8
                  ],
                  name: "x"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 9,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 9
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  range: [
                    9,
                    14
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 12,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      12,
                      14
                    ],
                    body: []
                  }
                }
              },
              {
                type: "Property",
                start: 16,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  16,
                  29
                ],
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 21
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    21,
                    22
                  ],
                  name: "x"
                },
                kind: "set",
                value: {
                  type: "FunctionExpression",
                  start: 23,
                  end: 29,
                  loc: {
                    start: {
                      line: 1,
                      column: 23
                    },
                    end: {
                      line: 1,
                      column: 29
                    }
                  },
                  range: [
                    23,
                    29
                  ],
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 24,
                      end: 25,
                      loc: {
                        start: {
                          line: 1,
                          column: 24
                        },
                        end: {
                          line: 1,
                          column: 25
                        }
                      },
                      range: [
                        24,
                        25
                      ],
                      name: "v"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 27,
                    end: 29,
                    loc: {
                      start: {
                        line: 1,
                        column: 27
                      },
                      end: {
                        line: 1,
                        column: 29
                      }
                    },
                    range: [
                      27,
                      29
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({[x]() {}})": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 11,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 11
              }
            },
            range: [
              1,
              11
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  2,
                  10
                ],
                method: true,
                shorthand: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 5,
                  end: 10,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 10
                    }
                  },
                  range: [
                    5,
                    10
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 8,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      8,
                      10
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var {[x]: y} = {y}": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                4,
                18
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  4,
                  12
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 11,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 11
                      }
                    },
                    range: [
                      5,
                      11
                    ],
                    method: false,
                    shorthand: false,
                    computed: true,
                    key: {
                      type: "Identifier",
                      start: 6,
                      end: 7,
                      loc: {
                        start: {
                          line: 1,
                          column: 6
                        },
                        end: {
                          line: 1,
                          column: 7
                        }
                      },
                      range: [
                        6,
                        7
                      ],
                      name: "x"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 10,
                      end: 11,
                      loc: {
                        start: {
                          line: 1,
                          column: 10
                        },
                        end: {
                          line: 1,
                          column: 11
                        }
                      },
                      range: [
                        10,
                        11
                      ],
                      name: "y"
                    }
                  }
                ]
              },
              init: {
                type: "ObjectExpression",
                start: 15,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  15,
                  18
                ],
                properties: [
                  {
                    type: "Property",
                    start: 16,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      16,
                      17
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 16,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      range: [
                        16,
                        17
                      ],
                      name: "y"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 16,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      range: [
                        16,
                        17
                      ],
                      name: "y"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "function f({[x]: y}) {}": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      range: [
        0,
        23
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          range: [
            0,
            23
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          params: [
            {
              type: "ObjectPattern",
              start: 11,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              range: [
                11,
                19
              ],
              properties: [
                {
                  type: "Property",
                  start: 12,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    12,
                    18
                  ],
                  method: false,
                  shorthand: false,
                  computed: true,
                  key: {
                    type: "Identifier",
                    start: 13,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      13,
                      14
                    ],
                    name: "x"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      17,
                      18
                    ],
                    name: "y"
                  }
                }
              ]
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 21,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              21,
              23
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "var x = {*[test]() { yield *v; }}": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              range: [
                4,
                33
              ],
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  4,
                  5
                ],
                name: "x"
              },
              init: {
                type: "ObjectExpression",
                start: 8,
                end: 33,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 33
                  }
                },
                range: [
                  8,
                  33
                ],
                properties: [
                  {
                    type: "Property",
                    start: 9,
                    end: 32,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 32
                      }
                    },
                    range: [
                      9,
                      32
                    ],
                    method: true,
                    shorthand: false,
                    computed: true,
                    key: {
                      type: "Identifier",
                      start: 11,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 11
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        11,
                        15
                      ],
                      name: "test"
                    },
                    kind: "init",
                    value: {
                      type: "FunctionExpression",
                      start: 16,
                      end: 32,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 32
                        }
                      },
                      range: [
                        16,
                        32
                      ],
                      id: null,
                      params: [],
                      generator: true,
                      expression: false,
                      body: {
                        type: "BlockStatement",
                        start: 19,
                        end: 32,
                        loc: {
                          start: {
                            line: 1,
                            column: 19
                          },
                          end: {
                            line: 1,
                            column: 32
                          }
                        },
                        range: [
                          19,
                          32
                        ],
                        body: [
                          {
                            type: "ExpressionStatement",
                            start: 21,
                            end: 30,
                            loc: {
                              start: {
                                line: 1,
                                column: 21
                              },
                              end: {
                                line: 1,
                                column: 30
                              }
                            },
                            range: [
                              21,
                              30
                            ],
                            expression: {
                              type: "YieldExpression",
                              start: 21,
                              end: 29,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 21
                                },
                                end: {
                                  line: 1,
                                  column: 29
                                }
                              },
                              range: [
                                21,
                                29
                              ],
                              delegate: true,
                              argument: {
                                type: "Identifier",
                                start: 28,
                                end: 29,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 28
                                  },
                                  end: {
                                    line: 1,
                                    column: 29
                                  }
                                },
                                range: [
                                  28,
                                  29
                                ],
                                name: "v"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "class A {[x]() {}}": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              8,
              18
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                range: [
                  9,
                  17
                ],
                static: false,
                computed: true,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 11,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 11
                    }
                  },
                  range: [
                    10,
                    11
                  ],
                  name: "x"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 12
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    12,
                    17
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      15,
                      17
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function f([x] = [1]) {}": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 11,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                11,
                20
              ],
              left: {
                type: "ArrayPattern",
                start: 11,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  11,
                  14
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 12,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    range: [
                      12,
                      13
                    ],
                    name: "x"
                  }
                ]
              },
              right: {
                type: "ArrayExpression",
                start: 17,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  17,
                  20
                ],
                elements: [
                  {
                    type: "Literal",
                    start: 18,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    range: [
                      18,
                      19
                    ],
                    value: 1,
                    raw: "1"
                  }
                ]
              }
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 22,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 22
              },
              end: {
                line: 1,
                column: 24
              }
            },
            range: [
              22,
              24
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function f([x] = [1]) { 'use strict' }": {
      type: "Program",
      start: 0,
      end: 38,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 38
        }
      },
      range: [
        0,
        38
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 38,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 38
            }
          },
          range: [
            0,
            38
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 11,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                11,
                20
              ],
              left: {
                type: "ArrayPattern",
                start: 11,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  11,
                  14
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 12,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    range: [
                      12,
                      13
                    ],
                    name: "x"
                  }
                ]
              },
              right: {
                type: "ArrayExpression",
                start: 17,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  17,
                  20
                ],
                elements: [
                  {
                    type: "Literal",
                    start: 18,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    range: [
                      18,
                      19
                    ],
                    value: 1,
                    raw: "1"
                  }
                ]
              }
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 22,
            end: 38,
            loc: {
              start: {
                line: 1,
                column: 22
              },
              end: {
                line: 1,
                column: 38
              }
            },
            range: [
              22,
              38
            ],
            body: [
              {
                type: "ExpressionStatement",
                start: 24,
                end: 36,
                loc: {
                  start: {
                    line: 1,
                    column: 24
                  },
                  end: {
                    line: 1,
                    column: 36
                  }
                },
                range: [
                  24,
                  36
                ],
                expression: {
                  type: "Literal",
                  start: 24,
                  end: 36,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 36
                    }
                  },
                  range: [
                    24,
                    36
                  ],
                  value: "use strict",
                  raw: "'use strict'"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function f({x} = {x: 10}) {}": {
      type: "Program",
      start: 0,
      end: 28,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 28
        }
      },
      range: [
        0,
        28
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 28,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 28
            }
          },
          range: [
            0,
            28
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 11,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              range: [
                11,
                24
              ],
              left: {
                type: "ObjectPattern",
                start: 11,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  11,
                  14
                ],
                properties: [
                  {
                    type: "Property",
                    start: 12,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 12
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    range: [
                      12,
                      13
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 12,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 12
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        12,
                        13
                      ],
                      name: "x"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 12,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 12
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        12,
                        13
                      ],
                      name: "x"
                    }
                  }
                ]
              },
              right: {
                type: "ObjectExpression",
                start: 17,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                range: [
                  17,
                  24
                ],
                properties: [
                  {
                    type: "Property",
                    start: 18,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    range: [
                      18,
                      23
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 18,
                      end: 19,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 19
                        }
                      },
                      range: [
                        18,
                        19
                      ],
                      name: "x"
                    },
                    kind: "init",
                    value: {
                      type: "Literal",
                      start: 21,
                      end: 23,
                      loc: {
                        start: {
                          line: 1,
                          column: 21
                        },
                        end: {
                          line: 1,
                          column: 23
                        }
                      },
                      range: [
                        21,
                        23
                      ],
                      value: 10,
                      raw: "10"
                    }
                  }
                ]
              }
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 26,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 26
              },
              end: {
                line: 1,
                column: 28
              }
            },
            range: [
              26,
              28
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "f = function({x} = {x: 10}) {}": {
      type: "Program",
      start: 0,
      end: 30,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 30
        }
      },
      range: [
        0,
        30
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 30,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 30
            }
          },
          range: [
            0,
            30
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 30,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 30
              }
            },
            range: [
              0,
              30
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "f"
            },
            right: {
              type: "FunctionExpression",
              start: 4,
              end: 30,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 30
                }
              },
              range: [
                4,
                30
              ],
              id: null,
              params: [
                {
                  type: "AssignmentPattern",
                  start: 13,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    13,
                    26
                  ],
                  left: {
                    type: "ObjectPattern",
                    start: 13,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    range: [
                      13,
                      16
                    ],
                    properties: [
                      {
                        type: "Property",
                        start: 14,
                        end: 15,
                        loc: {
                          start: {
                            line: 1,
                            column: 14
                          },
                          end: {
                            line: 1,
                            column: 15
                          }
                        },
                        range: [
                          14,
                          15
                        ],
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 14,
                          end: 15,
                          loc: {
                            start: {
                              line: 1,
                              column: 14
                            },
                            end: {
                              line: 1,
                              column: 15
                            }
                          },
                          range: [
                            14,
                            15
                          ],
                          name: "x"
                        },
                        kind: "init",
                        value: {
                          type: "Identifier",
                          start: 14,
                          end: 15,
                          loc: {
                            start: {
                              line: 1,
                              column: 14
                            },
                            end: {
                              line: 1,
                              column: 15
                            }
                          },
                          range: [
                            14,
                            15
                          ],
                          name: "x"
                        }
                      }
                    ]
                  },
                  right: {
                    type: "ObjectExpression",
                    start: 19,
                    end: 26,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 26
                      }
                    },
                    range: [
                      19,
                      26
                    ],
                    properties: [
                      {
                        type: "Property",
                        start: 20,
                        end: 25,
                        loc: {
                          start: {
                            line: 1,
                            column: 20
                          },
                          end: {
                            line: 1,
                            column: 25
                          }
                        },
                        range: [
                          20,
                          25
                        ],
                        method: false,
                        shorthand: false,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 20,
                          end: 21,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 21
                            }
                          },
                          range: [
                            20,
                            21
                          ],
                          name: "x"
                        },
                        kind: "init",
                        value: {
                          type: "Literal",
                          start: 23,
                          end: 25,
                          loc: {
                            start: {
                              line: 1,
                              column: 23
                            },
                            end: {
                              line: 1,
                              column: 25
                            }
                          },
                          range: [
                            23,
                            25
                          ],
                          value: 10,
                          raw: "10"
                        }
                      }
                    ]
                  }
                }
              ],
              generator: false,
              expression: false,
              body: {
                type: "BlockStatement",
                start: 28,
                end: 30,
                loc: {
                  start: {
                    line: 1,
                    column: 28
                  },
                  end: {
                    line: 1,
                    column: 30
                  }
                },
                range: [
                  28,
                  30
                ],
                body: []
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({f: function({x} = {x: 10}) {}})": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 32
              }
            },
            range: [
              1,
              32
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 31,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 31
                  }
                },
                range: [
                  2,
                  31
                ],
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 2,
                  end: 3,
                  loc: {
                    start: {
                      line: 1,
                      column: 2
                    },
                    end: {
                      line: 1,
                      column: 3
                    }
                  },
                  range: [
                    2,
                    3
                  ],
                  name: "f"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 5,
                  end: 31,
                  loc: {
                    start: {
                      line: 1,
                      column: 5
                    },
                    end: {
                      line: 1,
                      column: 31
                    }
                  },
                  range: [
                    5,
                    31
                  ],
                  id: null,
                  params: [
                    {
                      type: "AssignmentPattern",
                      start: 14,
                      end: 27,
                      loc: {
                        start: {
                          line: 1,
                          column: 14
                        },
                        end: {
                          line: 1,
                          column: 27
                        }
                      },
                      range: [
                        14,
                        27
                      ],
                      left: {
                        type: "ObjectPattern",
                        start: 14,
                        end: 17,
                        loc: {
                          start: {
                            line: 1,
                            column: 14
                          },
                          end: {
                            line: 1,
                            column: 17
                          }
                        },
                        range: [
                          14,
                          17
                        ],
                        properties: [
                          {
                            type: "Property",
                            start: 15,
                            end: 16,
                            loc: {
                              start: {
                                line: 1,
                                column: 15
                              },
                              end: {
                                line: 1,
                                column: 16
                              }
                            },
                            range: [
                              15,
                              16
                            ],
                            method: false,
                            shorthand: true,
                            computed: false,
                            key: {
                              type: "Identifier",
                              start: 15,
                              end: 16,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 15
                                },
                                end: {
                                  line: 1,
                                  column: 16
                                }
                              },
                              range: [
                                15,
                                16
                              ],
                              name: "x"
                            },
                            kind: "init",
                            value: {
                              type: "Identifier",
                              start: 15,
                              end: 16,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 15
                                },
                                end: {
                                  line: 1,
                                  column: 16
                                }
                              },
                              range: [
                                15,
                                16
                              ],
                              name: "x"
                            }
                          }
                        ]
                      },
                      right: {
                        type: "ObjectExpression",
                        start: 20,
                        end: 27,
                        loc: {
                          start: {
                            line: 1,
                            column: 20
                          },
                          end: {
                            line: 1,
                            column: 27
                          }
                        },
                        range: [
                          20,
                          27
                        ],
                        properties: [
                          {
                            type: "Property",
                            start: 21,
                            end: 26,
                            loc: {
                              start: {
                                line: 1,
                                column: 21
                              },
                              end: {
                                line: 1,
                                column: 26
                              }
                            },
                            range: [
                              21,
                              26
                            ],
                            method: false,
                            shorthand: false,
                            computed: false,
                            key: {
                              type: "Identifier",
                              start: 21,
                              end: 22,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 21
                                },
                                end: {
                                  line: 1,
                                  column: 22
                                }
                              },
                              range: [
                                21,
                                22
                              ],
                              name: "x"
                            },
                            kind: "init",
                            value: {
                              type: "Literal",
                              start: 24,
                              end: 26,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 24
                                },
                                end: {
                                  line: 1,
                                  column: 26
                                }
                              },
                              range: [
                                24,
                                26
                              ],
                              value: 10,
                              raw: "10"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 29,
                    end: 31,
                    loc: {
                      start: {
                        line: 1,
                        column: 29
                      },
                      end: {
                        line: 1,
                        column: 31
                      }
                    },
                    range: [
                      29,
                      31
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({f({x} = {x: 10}) {}})": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          range: [
            0,
            23
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              1,
              22
            ],
            properties: [
              {
                type: "Property",
                start: 2,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                range: [
                  2,
                  21
                ],
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 2,
                  end: 3,
                  loc: {
                    start: {
                      line: 1,
                      column: 2
                    },
                    end: {
                      line: 1,
                      column: 3
                    }
                  },
                  range: [
                    2,
                    3
                  ],
                  name: "f"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 3,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    3,
                    21
                  ],
                  id: null,
                  params: [
                    {
                      type: "AssignmentPattern",
                      start: 4,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 4
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      range: [
                        4,
                        17
                      ],
                      left: {
                        type: "ObjectPattern",
                        start: 4,
                        end: 7,
                        loc: {
                          start: {
                            line: 1,
                            column: 4
                          },
                          end: {
                            line: 1,
                            column: 7
                          }
                        },
                        range: [
                          4,
                          7
                        ],
                        properties: [
                          {
                            type: "Property",
                            start: 5,
                            end: 6,
                            loc: {
                              start: {
                                line: 1,
                                column: 5
                              },
                              end: {
                                line: 1,
                                column: 6
                              }
                            },
                            range: [
                              5,
                              6
                            ],
                            method: false,
                            shorthand: true,
                            computed: false,
                            key: {
                              type: "Identifier",
                              start: 5,
                              end: 6,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 5
                                },
                                end: {
                                  line: 1,
                                  column: 6
                                }
                              },
                              range: [
                                5,
                                6
                              ],
                              name: "x"
                            },
                            kind: "init",
                            value: {
                              type: "Identifier",
                              start: 5,
                              end: 6,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 5
                                },
                                end: {
                                  line: 1,
                                  column: 6
                                }
                              },
                              range: [
                                5,
                                6
                              ],
                              name: "x"
                            }
                          }
                        ]
                      },
                      right: {
                        type: "ObjectExpression",
                        start: 10,
                        end: 17,
                        loc: {
                          start: {
                            line: 1,
                            column: 10
                          },
                          end: {
                            line: 1,
                            column: 17
                          }
                        },
                        range: [
                          10,
                          17
                        ],
                        properties: [
                          {
                            type: "Property",
                            start: 11,
                            end: 16,
                            loc: {
                              start: {
                                line: 1,
                                column: 11
                              },
                              end: {
                                line: 1,
                                column: 16
                              }
                            },
                            range: [
                              11,
                              16
                            ],
                            method: false,
                            shorthand: false,
                            computed: false,
                            key: {
                              type: "Identifier",
                              start: 11,
                              end: 12,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 11
                                },
                                end: {
                                  line: 1,
                                  column: 12
                                }
                              },
                              range: [
                                11,
                                12
                              ],
                              name: "x"
                            },
                            kind: "init",
                            value: {
                              type: "Literal",
                              start: 14,
                              end: 16,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 14
                                },
                                end: {
                                  line: 1,
                                  column: 16
                                }
                              },
                              range: [
                                14,
                                16
                              ],
                              value: 10,
                              raw: "10"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 19,
                    end: 21,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 21
                      }
                    },
                    range: [
                      19,
                      21
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(class {f({x} = {x: 10}) {}})": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      range: [
        0,
        29
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          range: [
            0,
            29
          ],
          expression: {
            type: "ClassExpression",
            start: 1,
            end: 28,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 28
              }
            },
            range: [
              1,
              28
            ],
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 7,
              end: 28,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 28
                }
              },
              range: [
                7,
                28
              ],
              body: [
                {
                  type: "MethodDefinition",
                  start: 8,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  range: [
                    8,
                    27
                  ],
                  static: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 8,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      8,
                      9
                    ],
                    name: "f"
                  },
                  kind: "method",
                  value: {
                    type: "FunctionExpression",
                    start: 9,
                    end: 27,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 27
                      }
                    },
                    range: [
                      9,
                      27
                    ],
                    id: null,
                    params: [
                      {
                        type: "AssignmentPattern",
                        start: 10,
                        end: 23,
                        loc: {
                          start: {
                            line: 1,
                            column: 10
                          },
                          end: {
                            line: 1,
                            column: 23
                          }
                        },
                        range: [
                          10,
                          23
                        ],
                        left: {
                          type: "ObjectPattern",
                          start: 10,
                          end: 13,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 13
                            }
                          },
                          range: [
                            10,
                            13
                          ],
                          properties: [
                            {
                              type: "Property",
                              start: 11,
                              end: 12,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 11
                                },
                                end: {
                                  line: 1,
                                  column: 12
                                }
                              },
                              range: [
                                11,
                                12
                              ],
                              method: false,
                              shorthand: true,
                              computed: false,
                              key: {
                                type: "Identifier",
                                start: 11,
                                end: 12,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 11
                                  },
                                  end: {
                                    line: 1,
                                    column: 12
                                  }
                                },
                                range: [
                                  11,
                                  12
                                ],
                                name: "x"
                              },
                              kind: "init",
                              value: {
                                type: "Identifier",
                                start: 11,
                                end: 12,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 11
                                  },
                                  end: {
                                    line: 1,
                                    column: 12
                                  }
                                },
                                range: [
                                  11,
                                  12
                                ],
                                name: "x"
                              }
                            }
                          ]
                        },
                        right: {
                          type: "ObjectExpression",
                          start: 16,
                          end: 23,
                          loc: {
                            start: {
                              line: 1,
                              column: 16
                            },
                            end: {
                              line: 1,
                              column: 23
                            }
                          },
                          range: [
                            16,
                            23
                          ],
                          properties: [
                            {
                              type: "Property",
                              start: 17,
                              end: 22,
                              loc: {
                                start: {
                                  line: 1,
                                  column: 17
                                },
                                end: {
                                  line: 1,
                                  column: 22
                                }
                              },
                              range: [
                                17,
                                22
                              ],
                              method: false,
                              shorthand: false,
                              computed: false,
                              key: {
                                type: "Identifier",
                                start: 17,
                                end: 18,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 17
                                  },
                                  end: {
                                    line: 1,
                                    column: 18
                                  }
                                },
                                range: [
                                  17,
                                  18
                                ],
                                name: "x"
                              },
                              kind: "init",
                              value: {
                                type: "Literal",
                                start: 20,
                                end: 22,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 20
                                  },
                                  end: {
                                    line: 1,
                                    column: 22
                                  }
                                },
                                range: [
                                  20,
                                  22
                                ],
                                value: 10,
                                raw: "10"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 25,
                      end: 27,
                      loc: {
                        start: {
                          line: 1,
                          column: 25
                        },
                        end: {
                          line: 1,
                          column: 27
                        }
                      },
                      range: [
                        25,
                        27
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(({x} = {x: 10}) => {})": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          range: [
            0,
            23
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 1,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              1,
              22
            ],
            id: null,
            params: [
              {
                type: "AssignmentPattern",
                start: 2,
                end: 15,
                loc: {
                  start: {
                    line: 1,
                    column: 2
                  },
                  end: {
                    line: 1,
                    column: 15
                  }
                },
                range: [
                  2,
                  15
                ],
                left: {
                  type: "ObjectPattern",
                  start: 2,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 2
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  range: [
                    2,
                    5
                  ],
                  properties: [
                    {
                      type: "Property",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 3,
                        end: 4,
                        loc: {
                          start: {
                            line: 1,
                            column: 3
                          },
                          end: {
                            line: 1,
                            column: 4
                          }
                        },
                        range: [
                          3,
                          4
                        ],
                        name: "x"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 3,
                        end: 4,
                        loc: {
                          start: {
                            line: 1,
                            column: 3
                          },
                          end: {
                            line: 1,
                            column: 4
                          }
                        },
                        range: [
                          3,
                          4
                        ],
                        name: "x"
                      }
                    }
                  ]
                },
                right: {
                  type: "ObjectExpression",
                  start: 8,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    8,
                    15
                  ],
                  properties: [
                    {
                      type: "Property",
                      start: 9,
                      end: 14,
                      loc: {
                        start: {
                          line: 1,
                          column: 9
                        },
                        end: {
                          line: 1,
                          column: 14
                        }
                      },
                      range: [
                        9,
                        14
                      ],
                      method: false,
                      shorthand: false,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 9,
                        end: 10,
                        loc: {
                          start: {
                            line: 1,
                            column: 9
                          },
                          end: {
                            line: 1,
                            column: 10
                          }
                        },
                        range: [
                          9,
                          10
                        ],
                        name: "x"
                      },
                      kind: "init",
                      value: {
                        type: "Literal",
                        start: 12,
                        end: 14,
                        loc: {
                          start: {
                            line: 1,
                            column: 12
                          },
                          end: {
                            line: 1,
                            column: 14
                          }
                        },
                        range: [
                          12,
                          14
                        ],
                        value: 10,
                        raw: "10"
                      }
                    }
                  ]
                }
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 20,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 20
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                20,
                22
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = function(y = 1) {}": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              0,
              22
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "FunctionExpression",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                4,
                22
              ],
              id: null,
              params: [
                {
                  type: "AssignmentPattern",
                  start: 13,
                  end: 18,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 18
                    }
                  },
                  range: [
                    13,
                    18
                  ],
                  left: {
                    type: "Identifier",
                    start: 13,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      13,
                      14
                    ],
                    name: "y"
                  },
                  right: {
                    type: "Literal",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      17,
                      18
                    ],
                    value: 1,
                    raw: "1"
                  }
                }
              ],
              generator: false,
              expression: false,
              body: {
                type: "BlockStatement",
                start: 20,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                range: [
                  20,
                  22
                ],
                body: []
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function f(a = 1) {}": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      range: [
        0,
        20
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          range: [
            0,
            20
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 11,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                11,
                16
              ],
              left: {
                type: "Identifier",
                start: 11,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  11,
                  12
                ],
                name: "a"
              },
              right: {
                type: "Literal",
                start: 15,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 15
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  15,
                  16
                ],
                value: 1,
                raw: "1"
              }
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 18,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 18
              },
              end: {
                line: 1,
                column: 20
              }
            },
            range: [
              18,
              20
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "x = { f: function(a=1) {} }": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              0,
              27
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                4,
                27
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  range: [
                    6,
                    25
                  ],
                  method: false,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    range: [
                      6,
                      7
                    ],
                    name: "f"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 9,
                    end: 25,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 25
                      }
                    },
                    range: [
                      9,
                      25
                    ],
                    id: null,
                    params: [
                      {
                        type: "AssignmentPattern",
                        start: 18,
                        end: 21,
                        loc: {
                          start: {
                            line: 1,
                            column: 18
                          },
                          end: {
                            line: 1,
                            column: 21
                          }
                        },
                        range: [
                          18,
                          21
                        ],
                        left: {
                          type: "Identifier",
                          start: 18,
                          end: 19,
                          loc: {
                            start: {
                              line: 1,
                              column: 18
                            },
                            end: {
                              line: 1,
                              column: 19
                            }
                          },
                          range: [
                            18,
                            19
                          ],
                          name: "a"
                        },
                        right: {
                          type: "Literal",
                          start: 20,
                          end: 21,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 21
                            }
                          },
                          range: [
                            20,
                            21
                          ],
                          value: 1,
                          raw: "1"
                        }
                      }
                    ],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 23,
                      end: 25,
                      loc: {
                        start: {
                          line: 1,
                          column: 23
                        },
                        end: {
                          line: 1,
                          column: 25
                        }
                      },
                      range: [
                        23,
                        25
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x = { f(a=1) {} }": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              0,
              17
            ],
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              range: [
                0,
                1
              ],
              name: "x"
            },
            right: {
              type: "ObjectExpression",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                4,
                17
              ],
              properties: [
                {
                  type: "Property",
                  start: 6,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 6
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    6,
                    15
                  ],
                  method: true,
                  shorthand: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 6
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    range: [
                      6,
                      7
                    ],
                    name: "f"
                  },
                  kind: "init",
                  value: {
                    type: "FunctionExpression",
                    start: 7,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      7,
                      15
                    ],
                    id: null,
                    params: [
                      {
                        type: "AssignmentPattern",
                        start: 8,
                        end: 11,
                        loc: {
                          start: {
                            line: 1,
                            column: 8
                          },
                          end: {
                            line: 1,
                            column: 11
                          }
                        },
                        range: [
                          8,
                          11
                        ],
                        left: {
                          type: "Identifier",
                          start: 8,
                          end: 9,
                          loc: {
                            start: {
                              line: 1,
                              column: 8
                            },
                            end: {
                              line: 1,
                              column: 9
                            }
                          },
                          range: [
                            8,
                            9
                          ],
                          name: "a"
                        },
                        right: {
                          type: "Literal",
                          start: 10,
                          end: 11,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 11
                            }
                          },
                          range: [
                            10,
                            11
                          ],
                          value: 1,
                          raw: "1"
                        }
                      }
                    ],
                    generator: false,
                    expression: false,
                    body: {
                      type: "BlockStatement",
                      start: 13,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 13
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        13,
                        15
                      ],
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function f(a, ...b) {}": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "f"
          },
          params: [
            {
              type: "Identifier",
              start: 11,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                11,
                12
              ],
              name: "a"
            },
            {
              type: "RestElement",
              start: 14,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                14,
                18
              ],
              argument: {
                type: "Identifier",
                start: 17,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  17,
                  18
                ],
                name: "b"
              }
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 20,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              20,
              22
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function x([ a, b ]){}": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "x"
          },
          params: [
            {
              type: "ArrayPattern",
              start: 11,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              range: [
                11,
                19
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  range: [
                    13,
                    14
                  ],
                  name: "a"
                },
                {
                  type: "Identifier",
                  start: 16,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    16,
                    17
                  ],
                  name: "b"
                }
              ]
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 20,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              20,
              22
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function x({ a, b }){}": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 9
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              9,
              10
            ],
            name: "x"
          },
          params: [
            {
              type: "ObjectPattern",
              start: 11,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              range: [
                11,
                19
              ],
              properties: [
                {
                  type: "Property",
                  start: 13,
                  end: 14,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 14
                    }
                  },
                  range: [
                    13,
                    14
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 13,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      13,
                      14
                    ],
                    name: "a"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 13,
                    end: 14,
                    loc: {
                      start: {
                        line: 1,
                        column: 13
                      },
                      end: {
                        line: 1,
                        column: 14
                      }
                    },
                    range: [
                      13,
                      14
                    ],
                    name: "a"
                  }
                },
                {
                  type: "Property",
                  start: 16,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    16,
                    17
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 16,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      16,
                      17
                    ],
                    name: "b"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 16,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      16,
                      17
                    ],
                    name: "b"
                  }
                }
              ]
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 20,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 20
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              20,
              22
            ],
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "(function x([ a, b ]){})": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              1,
              23
            ],
            id: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              range: [
                10,
                11
              ],
              name: "x"
            },
            params: [
              {
                type: "ArrayPattern",
                start: 12,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  12,
                  20
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 14,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      14,
                      15
                    ],
                    name: "a"
                  },
                  {
                    type: "Identifier",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      17,
                      18
                    ],
                    name: "b"
                  }
                ]
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 21,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                21,
                23
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(function x({ a, b }){})": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              1,
              23
            ],
            id: {
              type: "Identifier",
              start: 10,
              end: 11,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 11
                }
              },
              range: [
                10,
                11
              ],
              name: "x"
            },
            params: [
              {
                type: "ObjectPattern",
                start: 12,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  12,
                  20
                ],
                properties: [
                  {
                    type: "Property",
                    start: 14,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      14,
                      15
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 14,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 14
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        14,
                        15
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 14,
                      end: 15,
                      loc: {
                        start: {
                          line: 1,
                          column: 14
                        },
                        end: {
                          line: 1,
                          column: 15
                        }
                      },
                      range: [
                        14,
                        15
                      ],
                      name: "a"
                    }
                  },
                  {
                    type: "Property",
                    start: 17,
                    end: 18,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 18
                      }
                    },
                    range: [
                      17,
                      18
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 17,
                      end: 18,
                      loc: {
                        start: {
                          line: 1,
                          column: 17
                        },
                        end: {
                          line: 1,
                          column: 18
                        }
                      },
                      range: [
                        17,
                        18
                      ],
                      name: "b"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 17,
                      end: 18,
                      loc: {
                        start: {
                          line: 1,
                          column: 17
                        },
                        end: {
                          line: 1,
                          column: 18
                        }
                      },
                      range: [
                        17,
                        18
                      ],
                      name: "b"
                    }
                  }
                ]
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 21,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 21
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                21,
                23
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ x([ a, b ]){} })": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          range: [
            0,
            19
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              1,
              18
            ],
            properties: [
              {
                type: "Property",
                start: 3,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  3,
                  16
                ],
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 4,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    4,
                    16
                  ],
                  id: null,
                  params: [
                    {
                      type: "ArrayPattern",
                      start: 5,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        5,
                        13
                      ],
                      elements: [
                        {
                          type: "Identifier",
                          start: 7,
                          end: 8,
                          loc: {
                            start: {
                              line: 1,
                              column: 7
                            },
                            end: {
                              line: 1,
                              column: 8
                            }
                          },
                          range: [
                            7,
                            8
                          ],
                          name: "a"
                        },
                        {
                          type: "Identifier",
                          start: 10,
                          end: 11,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 11
                            }
                          },
                          range: [
                            10,
                            11
                          ],
                          name: "b"
                        }
                      ]
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 14,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    range: [
                      14,
                      16
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ x(...[ a, b ]){} })": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 21
              }
            },
            range: [
              1,
              21
            ],
            properties: [
              {
                type: "Property",
                start: 3,
                end: 19,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 19
                  }
                },
                range: [
                  3,
                  19
                ],
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 4,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    4,
                    19
                  ],
                  id: null,
                  params: [
                    {
                      type: "RestElement",
                      start: 5,
                      end: 16,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 16
                        }
                      },
                      range: [
                        5,
                        16
                      ],
                      argument: {
                        type: "ArrayPattern",
                        start: 8,
                        end: 16,
                        loc: {
                          start: {
                            line: 1,
                            column: 8
                          },
                          end: {
                            line: 1,
                            column: 16
                          }
                        },
                        range: [
                          8,
                          16
                        ],
                        elements: [
                          {
                            type: "Identifier",
                            start: 10,
                            end: 11,
                            loc: {
                              start: {
                                line: 1,
                                column: 10
                              },
                              end: {
                                line: 1,
                                column: 11
                              }
                            },
                            range: [
                              10,
                              11
                            ],
                            name: "a"
                          },
                          {
                            type: "Identifier",
                            start: 13,
                            end: 14,
                            loc: {
                              start: {
                                line: 1,
                                column: 13
                              },
                              end: {
                                line: 1,
                                column: 14
                              }
                            },
                            range: [
                              13,
                              14
                            ],
                            name: "b"
                          }
                        ]
                      }
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 17,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 17
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    range: [
                      17,
                      19
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ x({ a: { w, x }, b: [y, z] }, ...[a, b, c]){} })": {
      type: "Program",
      start: 0,
      end: 51,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 51
        }
      },
      range: [
        0,
        51
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 51,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 51
            }
          },
          range: [
            0,
            51
          ],
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 50,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 50
              }
            },
            range: [
              1,
              50
            ],
            properties: [
              {
                type: "Property",
                start: 3,
                end: 48,
                loc: {
                  start: {
                    line: 1,
                    column: 3
                  },
                  end: {
                    line: 1,
                    column: 48
                  }
                },
                range: [
                  3,
                  48
                ],
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 4,
                  loc: {
                    start: {
                      line: 1,
                      column: 3
                    },
                    end: {
                      line: 1,
                      column: 4
                    }
                  },
                  range: [
                    3,
                    4
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 4,
                  end: 48,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 48
                    }
                  },
                  range: [
                    4,
                    48
                  ],
                  id: null,
                  params: [
                    {
                      type: "ObjectPattern",
                      start: 5,
                      end: 31,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 31
                        }
                      },
                      range: [
                        5,
                        31
                      ],
                      properties: [
                        {
                          type: "Property",
                          start: 7,
                          end: 18,
                          loc: {
                            start: {
                              line: 1,
                              column: 7
                            },
                            end: {
                              line: 1,
                              column: 18
                            }
                          },
                          range: [
                            7,
                            18
                          ],
                          method: false,
                          shorthand: false,
                          computed: false,
                          key: {
                            type: "Identifier",
                            start: 7,
                            end: 8,
                            loc: {
                              start: {
                                line: 1,
                                column: 7
                              },
                              end: {
                                line: 1,
                                column: 8
                              }
                            },
                            range: [
                              7,
                              8
                            ],
                            name: "a"
                          },
                          kind: "init",
                          value: {
                            type: "ObjectPattern",
                            start: 10,
                            end: 18,
                            loc: {
                              start: {
                                line: 1,
                                column: 10
                              },
                              end: {
                                line: 1,
                                column: 18
                              }
                            },
                            range: [
                              10,
                              18
                            ],
                            properties: [
                              {
                                type: "Property",
                                start: 12,
                                end: 13,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 12
                                  },
                                  end: {
                                    line: 1,
                                    column: 13
                                  }
                                },
                                range: [
                                  12,
                                  13
                                ],
                                method: false,
                                shorthand: true,
                                computed: false,
                                key: {
                                  type: "Identifier",
                                  start: 12,
                                  end: 13,
                                  loc: {
                                    start: {
                                      line: 1,
                                      column: 12
                                    },
                                    end: {
                                      line: 1,
                                      column: 13
                                    }
                                  },
                                  range: [
                                    12,
                                    13
                                  ],
                                  name: "w"
                                },
                                kind: "init",
                                value: {
                                  type: "Identifier",
                                  start: 12,
                                  end: 13,
                                  loc: {
                                    start: {
                                      line: 1,
                                      column: 12
                                    },
                                    end: {
                                      line: 1,
                                      column: 13
                                    }
                                  },
                                  range: [
                                    12,
                                    13
                                  ],
                                  name: "w"
                                }
                              },
                              {
                                type: "Property",
                                start: 15,
                                end: 16,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 15
                                  },
                                  end: {
                                    line: 1,
                                    column: 16
                                  }
                                },
                                range: [
                                  15,
                                  16
                                ],
                                method: false,
                                shorthand: true,
                                computed: false,
                                key: {
                                  type: "Identifier",
                                  start: 15,
                                  end: 16,
                                  loc: {
                                    start: {
                                      line: 1,
                                      column: 15
                                    },
                                    end: {
                                      line: 1,
                                      column: 16
                                    }
                                  },
                                  range: [
                                    15,
                                    16
                                  ],
                                  name: "x"
                                },
                                kind: "init",
                                value: {
                                  type: "Identifier",
                                  start: 15,
                                  end: 16,
                                  loc: {
                                    start: {
                                      line: 1,
                                      column: 15
                                    },
                                    end: {
                                      line: 1,
                                      column: 16
                                    }
                                  },
                                  range: [
                                    15,
                                    16
                                  ],
                                  name: "x"
                                }
                              }
                            ]
                          }
                        },
                        {
                          type: "Property",
                          start: 20,
                          end: 29,
                          loc: {
                            start: {
                              line: 1,
                              column: 20
                            },
                            end: {
                              line: 1,
                              column: 29
                            }
                          },
                          range: [
                            20,
                            29
                          ],
                          method: false,
                          shorthand: false,
                          computed: false,
                          key: {
                            type: "Identifier",
                            start: 20,
                            end: 21,
                            loc: {
                              start: {
                                line: 1,
                                column: 20
                              },
                              end: {
                                line: 1,
                                column: 21
                              }
                            },
                            range: [
                              20,
                              21
                            ],
                            name: "b"
                          },
                          kind: "init",
                          value: {
                            type: "ArrayPattern",
                            start: 23,
                            end: 29,
                            loc: {
                              start: {
                                line: 1,
                                column: 23
                              },
                              end: {
                                line: 1,
                                column: 29
                              }
                            },
                            range: [
                              23,
                              29
                            ],
                            elements: [
                              {
                                type: "Identifier",
                                start: 24,
                                end: 25,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 24
                                  },
                                  end: {
                                    line: 1,
                                    column: 25
                                  }
                                },
                                range: [
                                  24,
                                  25
                                ],
                                name: "y"
                              },
                              {
                                type: "Identifier",
                                start: 27,
                                end: 28,
                                loc: {
                                  start: {
                                    line: 1,
                                    column: 27
                                  },
                                  end: {
                                    line: 1,
                                    column: 28
                                  }
                                },
                                range: [
                                  27,
                                  28
                                ],
                                name: "z"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    {
                      type: "RestElement",
                      start: 33,
                      end: 45,
                      loc: {
                        start: {
                          line: 1,
                          column: 33
                        },
                        end: {
                          line: 1,
                          column: 45
                        }
                      },
                      range: [
                        33,
                        45
                      ],
                      argument: {
                        type: "ArrayPattern",
                        start: 36,
                        end: 45,
                        loc: {
                          start: {
                            line: 1,
                            column: 36
                          },
                          end: {
                            line: 1,
                            column: 45
                          }
                        },
                        range: [
                          36,
                          45
                        ],
                        elements: [
                          {
                            type: "Identifier",
                            start: 37,
                            end: 38,
                            loc: {
                              start: {
                                line: 1,
                                column: 37
                              },
                              end: {
                                line: 1,
                                column: 38
                              }
                            },
                            range: [
                              37,
                              38
                            ],
                            name: "a"
                          },
                          {
                            type: "Identifier",
                            start: 40,
                            end: 41,
                            loc: {
                              start: {
                                line: 1,
                                column: 40
                              },
                              end: {
                                line: 1,
                                column: 41
                              }
                            },
                            range: [
                              40,
                              41
                            ],
                            name: "b"
                          },
                          {
                            type: "Identifier",
                            start: 43,
                            end: 44,
                            loc: {
                              start: {
                                line: 1,
                                column: 43
                              },
                              end: {
                                line: 1,
                                column: 44
                              }
                            },
                            range: [
                              43,
                              44
                            ],
                            name: "c"
                          }
                        ]
                      }
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 46,
                    end: 48,
                    loc: {
                      start: {
                        line: 1,
                        column: 46
                      },
                      end: {
                        line: 1,
                        column: 48
                      }
                    },
                    range: [
                      46,
                      48
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(...a) => {}": {
      type: "Program",
      start: 0,
      end: 12,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      },
      range: [
        0,
        12
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          },
          range: [
            0,
            12
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 12,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 12
              }
            },
            range: [
              0,
              12
            ],
            id: null,
            params: [
              {
                type: "RestElement",
                start: 1,
                end: 5,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 5
                  }
                },
                range: [
                  1,
                  5
                ],
                argument: {
                  type: "Identifier",
                  start: 4,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  range: [
                    4,
                    5
                  ],
                  name: "a"
                }
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 10,
              end: 12,
              loc: {
                start: {
                  line: 1,
                  column: 10
                },
                end: {
                  line: 1,
                  column: 12
                }
              },
              range: [
                10,
                12
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a, ...b) => {}": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          range: [
            0,
            15
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              0,
              15
            ],
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 2
                  }
                },
                range: [
                  1,
                  2
                ],
                name: "a"
              },
              {
                type: "RestElement",
                start: 4,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                range: [
                  4,
                  8
                ],
                argument: {
                  type: "Identifier",
                  start: 7,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 7
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  range: [
                    7,
                    8
                  ],
                  name: "b"
                }
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 13,
              end: 15,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 15
                }
              },
              range: [
                13,
                15
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ a }) => {}": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            id: null,
            params: [
              {
                type: "ObjectPattern",
                start: 1,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                range: [
                  1,
                  6
                ],
                properties: [
                  {
                    type: "Property",
                    start: 3,
                    end: 4,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 4
                      }
                    },
                    range: [
                      3,
                      4
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    }
                  }
                ]
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 11,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 11
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              range: [
                11,
                13
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ a }, ...b) => {}": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          range: [
            0,
            19
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 19
              }
            },
            range: [
              0,
              19
            ],
            id: null,
            params: [
              {
                type: "ObjectPattern",
                start: 1,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                range: [
                  1,
                  6
                ],
                properties: [
                  {
                    type: "Property",
                    start: 3,
                    end: 4,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 4
                      }
                    },
                    range: [
                      3,
                      4
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    }
                  }
                ]
              },
              {
                type: "RestElement",
                start: 8,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  8,
                  12
                ],
                argument: {
                  type: "Identifier",
                  start: 11,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    11,
                    12
                  ],
                  name: "b"
                }
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 17,
              end: 19,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 19
                }
              },
              range: [
                17,
                19
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ a: [a, b] }, ...c) => {}": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              0,
              27
            ],
            id: null,
            params: [
              {
                type: "ObjectPattern",
                start: 1,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  1,
                  14
                ],
                properties: [
                  {
                    type: "Property",
                    start: 3,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      3,
                      12
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "ArrayPattern",
                      start: 6,
                      end: 12,
                      loc: {
                        start: {
                          line: 1,
                          column: 6
                        },
                        end: {
                          line: 1,
                          column: 12
                        }
                      },
                      range: [
                        6,
                        12
                      ],
                      elements: [
                        {
                          type: "Identifier",
                          start: 7,
                          end: 8,
                          loc: {
                            start: {
                              line: 1,
                              column: 7
                            },
                            end: {
                              line: 1,
                              column: 8
                            }
                          },
                          range: [
                            7,
                            8
                          ],
                          name: "a"
                        },
                        {
                          type: "Identifier",
                          start: 10,
                          end: 11,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 11
                            }
                          },
                          range: [
                            10,
                            11
                          ],
                          name: "b"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                type: "RestElement",
                start: 16,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  16,
                  20
                ],
                argument: {
                  type: "Identifier",
                  start: 19,
                  end: 20,
                  loc: {
                    start: {
                      line: 1,
                      column: 19
                    },
                    end: {
                      line: 1,
                      column: 20
                    }
                  },
                  range: [
                    19,
                    20
                  ],
                  name: "c"
                }
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 25,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                25,
                27
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ a: b, c }, [d, e], ...f) => {}": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 33
              }
            },
            range: [
              0,
              33
            ],
            id: null,
            params: [
              {
                type: "ObjectPattern",
                start: 1,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 1
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  1,
                  12
                ],
                properties: [
                  {
                    type: "Property",
                    start: 3,
                    end: 7,
                    loc: {
                      start: {
                        line: 1,
                        column: 3
                      },
                      end: {
                        line: 1,
                        column: 7
                      }
                    },
                    range: [
                      3,
                      7
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 6,
                      end: 7,
                      loc: {
                        start: {
                          line: 1,
                          column: 6
                        },
                        end: {
                          line: 1,
                          column: 7
                        }
                      },
                      range: [
                        6,
                        7
                      ],
                      name: "b"
                    }
                  },
                  {
                    type: "Property",
                    start: 9,
                    end: 10,
                    loc: {
                      start: {
                        line: 1,
                        column: 9
                      },
                      end: {
                        line: 1,
                        column: 10
                      }
                    },
                    range: [
                      9,
                      10
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 9,
                      end: 10,
                      loc: {
                        start: {
                          line: 1,
                          column: 9
                        },
                        end: {
                          line: 1,
                          column: 10
                        }
                      },
                      range: [
                        9,
                        10
                      ],
                      name: "c"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 9,
                      end: 10,
                      loc: {
                        start: {
                          line: 1,
                          column: 9
                        },
                        end: {
                          line: 1,
                          column: 10
                        }
                      },
                      range: [
                        9,
                        10
                      ],
                      name: "c"
                    }
                  }
                ]
              },
              {
                type: "ArrayPattern",
                start: 14,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 14
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  14,
                  20
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 15,
                    end: 16,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 16
                      }
                    },
                    range: [
                      15,
                      16
                    ],
                    name: "d"
                  },
                  {
                    type: "Identifier",
                    start: 18,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 18
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    range: [
                      18,
                      19
                    ],
                    name: "e"
                  }
                ]
              },
              {
                type: "RestElement",
                start: 22,
                end: 26,
                loc: {
                  start: {
                    line: 1,
                    column: 22
                  },
                  end: {
                    line: 1,
                    column: 26
                  }
                },
                range: [
                  22,
                  26
                ],
                argument: {
                  type: "Identifier",
                  start: 25,
                  end: 26,
                  loc: {
                    start: {
                      line: 1,
                      column: 25
                    },
                    end: {
                      line: 1,
                      column: 26
                    }
                  },
                  range: [
                    25,
                    26
                  ],
                  name: "f"
                }
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 31,
              end: 33,
              loc: {
                start: {
                  line: 1,
                  column: 31
                },
                end: {
                  line: 1,
                  column: 33
                }
              },
              range: [
                31,
                33
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[...a] = b": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      range: [
        0,
        10
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          range: [
            0,
            10
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              0,
              10
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              range: [
                0,
                6
              ],
              elements: [
                {
                  type: "RestElement",
                  start: 1,
                  end: 5,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 5
                    }
                  },
                  range: [
                    1,
                    5
                  ],
                  argument: {
                    type: "Identifier",
                    start: 4,
                    end: 5,
                    loc: {
                      start: {
                        line: 1,
                        column: 4
                      },
                      end: {
                        line: 1,
                        column: 5
                      }
                    },
                    range: [
                      4,
                      5
                    ],
                    name: "a"
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 9,
              end: 10,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 10
                }
              },
              range: [
                9,
                10
              ],
              name: "b"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[a, ...b] = c": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 9,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 9
                }
              },
              range: [
                0,
                9
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  range: [
                    1,
                    2
                  ],
                  name: "a"
                },
                {
                  type: "RestElement",
                  start: 4,
                  end: 8,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 8
                    }
                  },
                  range: [
                    4,
                    8
                  ],
                  argument: {
                    type: "Identifier",
                    start: 7,
                    end: 8,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 8
                      }
                    },
                    range: [
                      7,
                      8
                    ],
                    name: "b"
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 12,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 12
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              range: [
                12,
                13
              ],
              name: "c"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[{ a, b }, ...c] = d": {
      type: "Program",
      start: 0,
      end: 20,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 20
        }
      },
      range: [
        0,
        20
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 20
            }
          },
          range: [
            0,
            20
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 20,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 20
              }
            },
            range: [
              0,
              20
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                0,
                16
              ],
              elements: [
                {
                  type: "ObjectPattern",
                  start: 1,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  range: [
                    1,
                    9
                  ],
                  properties: [
                    {
                      type: "Property",
                      start: 3,
                      end: 4,
                      loc: {
                        start: {
                          line: 1,
                          column: 3
                        },
                        end: {
                          line: 1,
                          column: 4
                        }
                      },
                      range: [
                        3,
                        4
                      ],
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 3,
                        end: 4,
                        loc: {
                          start: {
                            line: 1,
                            column: 3
                          },
                          end: {
                            line: 1,
                            column: 4
                          }
                        },
                        range: [
                          3,
                          4
                        ],
                        name: "a"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 3,
                        end: 4,
                        loc: {
                          start: {
                            line: 1,
                            column: 3
                          },
                          end: {
                            line: 1,
                            column: 4
                          }
                        },
                        range: [
                          3,
                          4
                        ],
                        name: "a"
                      }
                    },
                    {
                      type: "Property",
                      start: 6,
                      end: 7,
                      loc: {
                        start: {
                          line: 1,
                          column: 6
                        },
                        end: {
                          line: 1,
                          column: 7
                        }
                      },
                      range: [
                        6,
                        7
                      ],
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 6,
                        end: 7,
                        loc: {
                          start: {
                            line: 1,
                            column: 6
                          },
                          end: {
                            line: 1,
                            column: 7
                          }
                        },
                        range: [
                          6,
                          7
                        ],
                        name: "b"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 6,
                        end: 7,
                        loc: {
                          start: {
                            line: 1,
                            column: 6
                          },
                          end: {
                            line: 1,
                            column: 7
                          }
                        },
                        range: [
                          6,
                          7
                        ],
                        name: "b"
                      }
                    }
                  ]
                },
                {
                  type: "RestElement",
                  start: 11,
                  end: 15,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 15
                    }
                  },
                  range: [
                    11,
                    15
                  ],
                  argument: {
                    type: "Identifier",
                    start: 14,
                    end: 15,
                    loc: {
                      start: {
                        line: 1,
                        column: 14
                      },
                      end: {
                        line: 1,
                        column: 15
                      }
                    },
                    range: [
                      14,
                      15
                    ],
                    name: "c"
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 19,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                19,
                20
              ],
              name: "d"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[a, ...[b, c]] = d": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 18,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 18
              }
            },
            range: [
              0,
              18
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                0,
                14
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  loc: {
                    start: {
                      line: 1,
                      column: 1
                    },
                    end: {
                      line: 1,
                      column: 2
                    }
                  },
                  range: [
                    1,
                    2
                  ],
                  name: "a"
                },
                {
                  type: "RestElement",
                  start: 4,
                  end: 13,
                  loc: {
                    start: {
                      line: 1,
                      column: 4
                    },
                    end: {
                      line: 1,
                      column: 13
                    }
                  },
                  range: [
                    4,
                    13
                  ],
                  argument: {
                    type: "ArrayPattern",
                    start: 7,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 7
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    range: [
                      7,
                      13
                    ],
                    elements: [
                      {
                        type: "Identifier",
                        start: 8,
                        end: 9,
                        loc: {
                          start: {
                            line: 1,
                            column: 8
                          },
                          end: {
                            line: 1,
                            column: 9
                          }
                        },
                        range: [
                          8,
                          9
                        ],
                        name: "b"
                      },
                      {
                        type: "Identifier",
                        start: 11,
                        end: 12,
                        loc: {
                          start: {
                            line: 1,
                            column: 11
                          },
                          end: {
                            line: 1,
                            column: 12
                          }
                        },
                        range: [
                          11,
                          12
                        ],
                        name: "c"
                      }
                    ]
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 17,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                17,
                18
              ],
              name: "d"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "var [...a] = b": {
      type: "Program",
      start: 0,
      end: 14,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 14
        }
      },
      range: [
        0,
        14
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 14
            }
          },
          range: [
            0,
            14
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 14,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 14
                }
              },
              range: [
                4,
                14
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 10,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 10
                  }
                },
                range: [
                  4,
                  10
                ],
                elements: [
                  {
                    type: "RestElement",
                    start: 5,
                    end: 9,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 9
                      }
                    },
                    range: [
                      5,
                      9
                    ],
                    argument: {
                      type: "Identifier",
                      start: 8,
                      end: 9,
                      loc: {
                        start: {
                          line: 1,
                          column: 8
                        },
                        end: {
                          line: 1,
                          column: 9
                        }
                      },
                      range: [
                        8,
                        9
                      ],
                      name: "a"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 13,
                end: 14,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 14
                  }
                },
                range: [
                  13,
                  14
                ],
                name: "b"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var [a, ...b] = c": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 17,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 17
                }
              },
              range: [
                4,
                17
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                range: [
                  4,
                  13
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    name: "a"
                  },
                  {
                    type: "RestElement",
                    start: 8,
                    end: 12,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 12
                      }
                    },
                    range: [
                      8,
                      12
                    ],
                    argument: {
                      type: "Identifier",
                      start: 11,
                      end: 12,
                      loc: {
                        start: {
                          line: 1,
                          column: 11
                        },
                        end: {
                          line: 1,
                          column: 12
                        }
                      },
                      range: [
                        11,
                        12
                      ],
                      name: "b"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 16,
                end: 17,
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                },
                range: [
                  16,
                  17
                ],
                name: "c"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var [{ a, b }, ...c] = d": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              range: [
                4,
                24
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  4,
                  20
                ],
                elements: [
                  {
                    type: "ObjectPattern",
                    start: 5,
                    end: 13,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 13
                      }
                    },
                    range: [
                      5,
                      13
                    ],
                    properties: [
                      {
                        type: "Property",
                        start: 7,
                        end: 8,
                        loc: {
                          start: {
                            line: 1,
                            column: 7
                          },
                          end: {
                            line: 1,
                            column: 8
                          }
                        },
                        range: [
                          7,
                          8
                        ],
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 7,
                          end: 8,
                          loc: {
                            start: {
                              line: 1,
                              column: 7
                            },
                            end: {
                              line: 1,
                              column: 8
                            }
                          },
                          range: [
                            7,
                            8
                          ],
                          name: "a"
                        },
                        kind: "init",
                        value: {
                          type: "Identifier",
                          start: 7,
                          end: 8,
                          loc: {
                            start: {
                              line: 1,
                              column: 7
                            },
                            end: {
                              line: 1,
                              column: 8
                            }
                          },
                          range: [
                            7,
                            8
                          ],
                          name: "a"
                        }
                      },
                      {
                        type: "Property",
                        start: 10,
                        end: 11,
                        loc: {
                          start: {
                            line: 1,
                            column: 10
                          },
                          end: {
                            line: 1,
                            column: 11
                          }
                        },
                        range: [
                          10,
                          11
                        ],
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 10,
                          end: 11,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 11
                            }
                          },
                          range: [
                            10,
                            11
                          ],
                          name: "b"
                        },
                        kind: "init",
                        value: {
                          type: "Identifier",
                          start: 10,
                          end: 11,
                          loc: {
                            start: {
                              line: 1,
                              column: 10
                            },
                            end: {
                              line: 1,
                              column: 11
                            }
                          },
                          range: [
                            10,
                            11
                          ],
                          name: "b"
                        }
                      }
                    ]
                  },
                  {
                    type: "RestElement",
                    start: 15,
                    end: 19,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 19
                      }
                    },
                    range: [
                      15,
                      19
                    ],
                    argument: {
                      type: "Identifier",
                      start: 18,
                      end: 19,
                      loc: {
                        start: {
                          line: 1,
                          column: 18
                        },
                        end: {
                          line: 1,
                          column: 19
                        }
                      },
                      range: [
                        18,
                        19
                      ],
                      name: "c"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 23,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 23
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                range: [
                  23,
                  24
                ],
                name: "d"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var [a, ...[b, c]] = d": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 22,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 22
                }
              },
              range: [
                4,
                22
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  4,
                  18
                ],
                elements: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 6
                      }
                    },
                    range: [
                      5,
                      6
                    ],
                    name: "a"
                  },
                  {
                    type: "RestElement",
                    start: 8,
                    end: 17,
                    loc: {
                      start: {
                        line: 1,
                        column: 8
                      },
                      end: {
                        line: 1,
                        column: 17
                      }
                    },
                    range: [
                      8,
                      17
                    ],
                    argument: {
                      type: "ArrayPattern",
                      start: 11,
                      end: 17,
                      loc: {
                        start: {
                          line: 1,
                          column: 11
                        },
                        end: {
                          line: 1,
                          column: 17
                        }
                      },
                      range: [
                        11,
                        17
                      ],
                      elements: [
                        {
                          type: "Identifier",
                          start: 12,
                          end: 13,
                          loc: {
                            start: {
                              line: 1,
                              column: 12
                            },
                            end: {
                              line: 1,
                              column: 13
                            }
                          },
                          range: [
                            12,
                            13
                          ],
                          name: "b"
                        },
                        {
                          type: "Identifier",
                          start: 15,
                          end: 16,
                          loc: {
                            start: {
                              line: 1,
                              column: 15
                            },
                            end: {
                              line: 1,
                              column: 16
                            }
                          },
                          range: [
                            15,
                            16
                          ],
                          name: "c"
                        }
                      ]
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 21,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 21
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                range: [
                  21,
                  22
                ],
                name: "d"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "func(...a)": {
      type: "Program",
      start: 0,
      end: 10,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 10
        }
      },
      range: [
        0,
        10
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 10
            }
          },
          range: [
            0,
            10
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 10,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 10
              }
            },
            range: [
              0,
              10
            ],
            callee: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              range: [
                0,
                4
              ],
              name: "func"
            },
            arguments: [
              {
                type: "SpreadElement",
                start: 5,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  5,
                  9
                ],
                argument: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  range: [
                    8,
                    9
                  ],
                  name: "a"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "func(a, ...b)": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            callee: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              range: [
                0,
                4
              ],
              name: "func"
            },
            arguments: [
              {
                type: "Identifier",
                start: 5,
                end: 6,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 6
                  }
                },
                range: [
                  5,
                  6
                ],
                name: "a"
              },
              {
                type: "SpreadElement",
                start: 8,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 8
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  8,
                  12
                ],
                argument: {
                  type: "Identifier",
                  start: 11,
                  end: 12,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 12
                    }
                  },
                  range: [
                    11,
                    12
                  ],
                  name: "b"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "func(...a, b)": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      range: [
        0,
        13
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          range: [
            0,
            13
          ],
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 13
              }
            },
            range: [
              0,
              13
            ],
            callee: {
              type: "Identifier",
              start: 0,
              end: 4,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 4
                }
              },
              range: [
                0,
                4
              ],
              name: "func"
            },
            arguments: [
              {
                type: "SpreadElement",
                start: 5,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                range: [
                  5,
                  9
                ],
                argument: {
                  type: "Identifier",
                  start: 8,
                  end: 9,
                  loc: {
                    start: {
                      line: 1,
                      column: 8
                    },
                    end: {
                      line: 1,
                      column: 9
                    }
                  },
                  range: [
                    8,
                    9
                  ],
                  name: "a"
                }
              },
              {
                type: "Identifier",
                start: 11,
                end: 12,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 12
                  }
                },
                range: [
                  11,
                  12
                ],
                name: "b"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "/[a-z]/u": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            regex: {
              pattern: "[a-z]",
              flags: "u"
            },
            value: {},
            raw: "/[a-z]/u"
          }
        }
      ],
      sourceType: "script"
    },
    "/[\\uD834\\uDF06-\\uD834\\uDF08a-z]/u": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          expression: {
            type: "Literal",
            start: 0,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 33
              }
            },
            regex: {
              pattern: "[\\uD834\\uDF06-\\uD834\\uDF08a-z]",
              flags: "u"
            },
            value: {},
            raw: "/[\\uD834\\uDF06-\\uD834\\uDF08a-z]/u"
          }
        }
      ],
      sourceType: "script"
    },
    "do {} while (false) foo();": {
      type: "Program",
      start: 0,
      end: 26,
      body: [
        {
          type: "DoWhileStatement",
          start: 0,
          end: 19,
          body: {
            type: "BlockStatement",
            start: 3,
            end: 5,
            body: []
          },
          test: {
            type: "Literal",
            start: 13,
            end: 18,
            value: false,
            raw: "false"
          }
        },
        {
          type: "ExpressionStatement",
          start: 20,
          end: 26,
          expression: {
            type: "CallExpression",
            start: 20,
            end: 25,
            callee: {
              type: "Identifier",
              start: 20,
              end: 23,
              name: "foo"
            },
            arguments: []
          }
        }
      ],
      sourceType: "script"
    },
    "\"\\u{110000}\"": {
      type: "Error",
      message: "Code point out of bounds (1:4)"
    },
    "let + 1": {
      type: "Program",
      start: 0,
      end: 7,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 7,
            left: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "let"
            },
            operator: "+",
            right: {
              type: "Literal",
              start: 6,
              end: 7,
              value: 1,
              raw: "1"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "var let = 1": {
      type: "Program",
      start: 0,
      end: 11,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 11,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "let"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 11,
                value: 1,
                raw: "1"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var yield = 2": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 13,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 13,
              id: {
                type: "Identifier",
                start: 4,
                end: 9,
                name: "yield"
              },
              init: {
                type: "Literal",
                start: 12,
                end: 13,
                value: 2,
                raw: "2"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "doSmth(`${x} + ${y} = ${x + y}`)": {
      type: "Program",
      start: 0,
      end: 32,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 32,
          expression: {
            type: "CallExpression",
            start: 0,
            end: 32,
            callee: {
              type: "Identifier",
              start: 0,
              end: 6,
              name: "doSmth"
            },
            arguments: [
              {
                type: "TemplateLiteral",
                start: 7,
                end: 31,
                expressions: [
                  {
                    type: "Identifier",
                    start: 10,
                    end: 11,
                    name: "x"
                  },
                  {
                    type: "Identifier",
                    start: 17,
                    end: 18,
                    name: "y"
                  },
                  {
                    type: "BinaryExpression",
                    start: 24,
                    end: 29,
                    left: {
                      type: "Identifier",
                      start: 24,
                      end: 25,
                      name: "x"
                    },
                    operator: "+",
                    right: {
                      type: "Identifier",
                      start: 28,
                      end: 29,
                      name: "y"
                    }
                  }
                ],
                quasis: [
                  {
                    type: "TemplateElement",
                    start: 8,
                    end: 8,
                    value: {
                      raw: "",
                      cooked: ""
                    },
                    tail: false
                  },
                  {
                    type: "TemplateElement",
                    start: 12,
                    end: 15,
                    value: {
                      raw: " + ",
                      cooked: " + "
                    },
                    tail: false
                  },
                  {
                    type: "TemplateElement",
                    start: 19,
                    end: 22,
                    value: {
                      raw: " = ",
                      cooked: " = "
                    },
                    tail: false
                  },
                  {
                    type: "TemplateElement",
                    start: 30,
                    end: 30,
                    value: {
                      raw: "",
                      cooked: ""
                    },
                    tail: true
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function normal(x, y = 10) {}": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 29,
          id: {
            type: "Identifier",
            start: 9,
            end: 15,
            name: "normal"
          },
          params: [
            {
              type: "Identifier",
              start: 16,
              end: 17,
              name: "x"
            },
            {
              type: "AssignmentPattern",
              start: 19,
              end: 25,
              left: {
                type: "Identifier",
                start: 19,
                end: 20,
                name: "y"
              },
              right: {
                type: "Literal",
                start: 23,
                end: 25,
                value: 10,
                raw: "10"
              }
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 27,
            end: 29,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "`{${x}}`, `}`": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "SequenceExpression",
            start: 0,
            end: 13,
            expressions: [
              {
                type: "TemplateLiteral",
                start: 0,
                end: 8,
                expressions: [
                  {
                    type: "Identifier",
                    start: 4,
                    end: 5,
                    name: "x"
                  }
                ],
                quasis: [
                  {
                    type: "TemplateElement",
                    start: 1,
                    end: 2,
                    value: {
                      raw: "{",
                      cooked: "{"
                    },
                    tail: false
                  },
                  {
                    type: "TemplateElement",
                    start: 6,
                    end: 7,
                    value: {
                      raw: "}",
                      cooked: "}"
                    },
                    tail: true
                  }
                ]
              },
              {
                type: "TemplateLiteral",
                start: 10,
                end: 13,
                expressions: [],
                quasis: [
                  {
                    type: "TemplateElement",
                    start: 11,
                    end: 12,
                    value: {
                      raw: "}",
                      cooked: "}"
                    },
                    tail: true
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var {get} = obj;": {
      type: "Program",
      start: 0,
      end: 16,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 16,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 15,
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 9,
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 8,
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 8,
                      name: "get"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 5,
                      end: 8,
                      name: "get"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 12,
                end: 15,
                name: "obj"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var {propName: localVar = defaultValue} = obj": {
      type: "Program",
      start: 0,
      end: 45,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 45
        }
      },
      range: [
        0,
        45
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 45,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 45
            }
          },
          range: [
            0,
            45
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 45,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 45
                }
              },
              range: [
                4,
                45
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 39,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 39
                  }
                },
                range: [
                  4,
                  39
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 38,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 38
                      }
                    },
                    range: [
                      5,
                      38
                    ],
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        5,
                        13
                      ],
                      name: "propName"
                    },
                    kind: "init",
                    value: {
                      type: "AssignmentPattern",
                      start: 15,
                      end: 38,
                      loc: {
                        start: {
                          line: 1,
                          column: 15
                        },
                        end: {
                          line: 1,
                          column: 38
                        }
                      },
                      range: [
                        15,
                        38
                      ],
                      left: {
                        type: "Identifier",
                        start: 15,
                        end: 23,
                        loc: {
                          start: {
                            line: 1,
                            column: 15
                          },
                          end: {
                            line: 1,
                            column: 23
                          }
                        },
                        range: [
                          15,
                          23
                        ],
                        name: "localVar"
                      },
                      right: {
                        type: "Identifier",
                        start: 26,
                        end: 38,
                        loc: {
                          start: {
                            line: 1,
                            column: 26
                          },
                          end: {
                            line: 1,
                            column: 38
                          }
                        },
                        range: [
                          26,
                          38
                        ],
                        name: "defaultValue"
                      }
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 42,
                end: 45,
                loc: {
                  start: {
                    line: 1,
                    column: 42
                  },
                  end: {
                    line: 1,
                    column: 45
                  }
                },
                range: [
                  42,
                  45
                ],
                name: "obj"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var {propName = defaultValue} = obj": {
      type: "Program",
      start: 0,
      end: 35,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 35
        }
      },
      range: [
        0,
        35
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 35,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 35
            }
          },
          range: [
            0,
            35
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              range: [
                4,
                35
              ],
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  4,
                  29
                ],
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    range: [
                      5,
                      28
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        5,
                        13
                      ],
                      name: "propName"
                    },
                    kind: "init",
                    value: {
                      type: "AssignmentPattern",
                      start: 5,
                      end: 28,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 28
                        }
                      },
                      range: [
                        5,
                        28
                      ],
                      left: {
                        type: "Identifier",
                        start: 5,
                        end: 13,
                        loc: {
                          start: {
                            line: 1,
                            column: 5
                          },
                          end: {
                            line: 1,
                            column: 13
                          }
                        },
                        range: [
                          5,
                          13
                        ],
                        name: "propName"
                      },
                      right: {
                        type: "Identifier",
                        start: 16,
                        end: 28,
                        loc: {
                          start: {
                            line: 1,
                            column: 16
                          },
                          end: {
                            line: 1,
                            column: 28
                          }
                        },
                        range: [
                          16,
                          28
                        ],
                        name: "defaultValue"
                      }
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 32,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 32
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                range: [
                  32,
                  35
                ],
                name: "obj"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var [localVar = defaultValue] = obj": {
      type: "Program",
      start: 0,
      end: 35,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 35
        }
      },
      range: [
        0,
        35
      ],
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 35,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 35
            }
          },
          range: [
            0,
            35
          ],
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 35,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 35
                }
              },
              range: [
                4,
                35
              ],
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 29,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 29
                  }
                },
                range: [
                  4,
                  29
                ],
                elements: [
                  {
                    type: "AssignmentPattern",
                    start: 5,
                    end: 28,
                    loc: {
                      start: {
                        line: 1,
                        column: 5
                      },
                      end: {
                        line: 1,
                        column: 28
                      }
                    },
                    range: [
                      5,
                      28
                    ],
                    left: {
                      type: "Identifier",
                      start: 5,
                      end: 13,
                      loc: {
                        start: {
                          line: 1,
                          column: 5
                        },
                        end: {
                          line: 1,
                          column: 13
                        }
                      },
                      range: [
                        5,
                        13
                      ],
                      name: "localVar"
                    },
                    right: {
                      type: "Identifier",
                      start: 16,
                      end: 28,
                      loc: {
                        start: {
                          line: 1,
                          column: 16
                        },
                        end: {
                          line: 1,
                          column: 28
                        }
                      },
                      range: [
                        16,
                        28
                      ],
                      name: "defaultValue"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 32,
                end: 35,
                loc: {
                  start: {
                    line: 1,
                    column: 32
                  },
                  end: {
                    line: 1,
                    column: 35
                  }
                },
                range: [
                  32,
                  35
                ],
                name: "obj"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "({x = 0} = obj)": {
      type: "Program",
      start: 0,
      end: 15,
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          range: [
            0,
            15
          ],
          expression: {
            type: "AssignmentExpression",
            start: 1,
            end: 14,
            range: [
              1,
              14
            ],
            operator: "=",
            left: {
              type: "ObjectPattern",
              start: 1,
              end: 8,
              range: [
                1,
                8
              ],
              properties: [
                {
                  type: "Property",
                  start: 2,
                  end: 7,
                  range: [
                    2,
                    7
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 2,
                    end: 3,
                    range: [
                      2,
                      3
                    ],
                    name: "x"
                  },
                  kind: "init",
                  value: {
                    type: "AssignmentPattern",
                    start: 2,
                    end: 7,
                    range: [
                      2,
                      7
                    ],
                    left: {
                      type: "Identifier",
                      start: 2,
                      end: 3,
                      range: [
                        2,
                        3
                      ],
                      name: "x"
                    },
                    right: {
                      type: "Literal",
                      start: 6,
                      end: 7,
                      range: [
                        6,
                        7
                      ],
                      value: 0,
                      raw: "0"
                    }
                  }
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 11,
              end: 14,
              range: [
                11,
                14
              ],
              name: "obj"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({x = 0}) => x": {
      type: "Program",
      start: 0,
      end: 14,
      range: [
        0,
        14
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          range: [
            0,
            14
          ],
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 14,
            range: [
              0,
              14
            ],
            id: null,
            params: [
              {
                type: "ObjectPattern",
                start: 1,
                end: 8,
                range: [
                  1,
                  8
                ],
                properties: [
                  {
                    type: "Property",
                    start: 2,
                    end: 7,
                    range: [
                      2,
                      7
                    ],
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 2,
                      end: 3,
                      range: [
                        2,
                        3
                      ],
                      name: "x"
                    },
                    kind: "init",
                    value: {
                      type: "AssignmentPattern",
                      start: 2,
                      end: 7,
                      range: [
                        2,
                        7
                      ],
                      left: {
                        type: "Identifier",
                        start: 2,
                        end: 3,
                        range: [
                          2,
                          3
                        ],
                        name: "x"
                      },
                      right: {
                        type: "Literal",
                        start: 6,
                        end: 7,
                        range: [
                          6,
                          7
                        ],
                        value: 0,
                        raw: "0"
                      }
                    }
                  }
                ]
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Identifier",
              start: 13,
              end: 14,
              range: [
                13,
                14
              ],
              name: "x"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "[a, {b: {c = 1}}] = arr": {
      type: "Program",
      start: 0,
      end: 23,
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          range: [
            0,
            23
          ],
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 23,
            range: [
              0,
              23
            ],
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 17,
              range: [
                0,
                17
              ],
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  range: [
                    1,
                    2
                  ],
                  name: "a"
                },
                {
                  type: "ObjectPattern",
                  start: 4,
                  end: 16,
                  range: [
                    4,
                    16
                  ],
                  properties: [
                    {
                      type: "Property",
                      start: 5,
                      end: 15,
                      range: [
                        5,
                        15
                      ],
                      method: false,
                      shorthand: false,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 5,
                        end: 6,
                        range: [
                          5,
                          6
                        ],
                        name: "b"
                      },
                      kind: "init",
                      value: {
                        type: "ObjectPattern",
                        start: 8,
                        end: 15,
                        range: [
                          8,
                          15
                        ],
                        properties: [
                          {
                            type: "Property",
                            start: 9,
                            end: 14,
                            range: [
                              9,
                              14
                            ],
                            method: false,
                            shorthand: true,
                            computed: false,
                            key: {
                              type: "Identifier",
                              start: 9,
                              end: 10,
                              range: [
                                9,
                                10
                              ],
                              name: "c"
                            },
                            kind: "init",
                            value: {
                              type: "AssignmentPattern",
                              start: 9,
                              end: 14,
                              range: [
                                9,
                                14
                              ],
                              left: {
                                type: "Identifier",
                                start: 9,
                                end: 10,
                                range: [
                                  9,
                                  10
                                ],
                                name: "c"
                              },
                              right: {
                                type: "Literal",
                                start: 13,
                                end: 14,
                                range: [
                                  13,
                                  14
                                ],
                                value: 1,
                                raw: "1"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 20,
              end: 23,
              range: [
                20,
                23
              ],
              name: "arr"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for ({x = 0} in arr);": {
      type: "Program",
      start: 0,
      end: 21,
      range: [
        0,
        21
      ],
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 21,
          range: [
            0,
            21
          ],
          left: {
            type: "ObjectPattern",
            start: 5,
            end: 12,
            range: [
              5,
              12
            ],
            properties: [
              {
                type: "Property",
                start: 6,
                end: 11,
                range: [
                  6,
                  11
                ],
                method: false,
                shorthand: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 6,
                  end: 7,
                  range: [
                    6,
                    7
                  ],
                  name: "x"
                },
                kind: "init",
                value: {
                  type: "AssignmentPattern",
                  start: 6,
                  end: 11,
                  range: [
                    6,
                    11
                  ],
                  left: {
                    type: "Identifier",
                    start: 6,
                    end: 7,
                    range: [
                      6,
                      7
                    ],
                    name: "x"
                  },
                  right: {
                    type: "Literal",
                    start: 10,
                    end: 11,
                    range: [
                      10,
                      11
                    ],
                    value: 0,
                    raw: "0"
                  }
                }
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 16,
            end: 19,
            range: [
              16,
              19
            ],
            name: "arr"
          },
          body: {
            type: "EmptyStatement",
            start: 20,
            end: 21,
            range: [
              20,
              21
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "try {} catch ({message}) {}": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "TryStatement",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          block: {
            type: "BlockStatement",
            start: 4,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 6
              }
            },
            range: [
              4,
              6
            ],
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 7,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              7,
              27
            ],
            param: {
              type: "ObjectPattern",
              start: 14,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                14,
                23
              ],
              properties: [
                {
                  type: "Property",
                  start: 15,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 15
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    15,
                    22
                  ],
                  method: false,
                  shorthand: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 15,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    range: [
                      15,
                      22
                    ],
                    name: "message"
                  },
                  kind: "init",
                  value: {
                    type: "Identifier",
                    start: 15,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 15
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    range: [
                      15,
                      22
                    ],
                    name: "message"
                  }
                }
              ]
            },
            body: {
              type: "BlockStatement",
              start: 25,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 25
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                25,
                27
              ],
              body: []
            }
          },
          finalizer: null
        }
      ],
      sourceType: "script"
    },
    "class A { static() {} }": {
      type: "Program",
      start: 0,
      end: 23,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      },
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 23,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 23
            }
          },
          range: [
            0,
            23
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 23,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 23
              }
            },
            range: [
              8,
              23
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 21,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 21
                  }
                },
                range: [
                  10,
                  21
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 16,
                  loc: {
                    start: {
                      line: 1,
                      column: 10
                    },
                    end: {
                      line: 1,
                      column: 16
                    }
                  },
                  range: [
                    10,
                    16
                  ],
                  name: "static"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 16,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    16,
                    21
                  ],
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 19,
                    end: 21,
                    loc: {
                      start: {
                        line: 1,
                        column: 19
                      },
                      end: {
                        line: 1,
                        column: 21
                      }
                    },
                    range: [
                      19,
                      21
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "for (const x of list) process(x);": {
      type: "Program",
      start: 0,
      end: 33,
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 33,
          range: [
            0,
            33
          ],
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 12,
            range: [
              5,
              12
            ],
            kind: "const",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 12,
                range: [
                  11,
                  12
                ],
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 12,
                  range: [
                    11,
                    12
                  ],
                  name: "x"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 16,
            end: 20,
            range: [
              16,
              20
            ],
            name: "list"
          },
          body: {
            type: "ExpressionStatement",
            start: 22,
            end: 33,
            range: [
              22,
              33
            ],
            expression: {
              type: "CallExpression",
              start: 22,
              end: 32,
              range: [
                22,
                32
              ],
              callee: {
                type: "Identifier",
                start: 22,
                end: 29,
                range: [
                  22,
                  29
                ],
                name: "process"
              },
              arguments: [
                {
                  type: "Identifier",
                  start: 30,
                  end: 31,
                  range: [
                    30,
                    31
                  ],
                  name: "x"
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "class A { *static() {} }": {
      type: "Program",
      start: 0,
      end: 24,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 24
        }
      },
      range: [
        0,
        24
      ],
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 24,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 24
            }
          },
          range: [
            0,
            24
          ],
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            },
            range: [
              6,
              7
            ],
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 24,
            loc: {
              start: {
                line: 1,
                column: 8
              },
              end: {
                line: 1,
                column: 24
              }
            },
            range: [
              8,
              24
            ],
            body: [
              {
                type: "MethodDefinition",
                start: 10,
                end: 22,
                loc: {
                  start: {
                    line: 1,
                    column: 10
                  },
                  end: {
                    line: 1,
                    column: 22
                  }
                },
                range: [
                  10,
                  22
                ],
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 11,
                  end: 17,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 17
                    }
                  },
                  range: [
                    11,
                    17
                  ],
                  name: "static"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 17,
                  end: 22,
                  loc: {
                    start: {
                      line: 1,
                      column: 17
                    },
                    end: {
                      line: 1,
                      column: 22
                    }
                  },
                  range: [
                    17,
                    22
                  ],
                  id: null,
                  params: [],
                  generator: true,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 20,
                    end: 22,
                    loc: {
                      start: {
                        line: 1,
                        column: 20
                      },
                      end: {
                        line: 1,
                        column: 22
                      }
                    },
                    range: [
                      20,
                      22
                    ],
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`${/\\d/.exec('1')[0]}`": {
      type: "Program",
      start: 0,
      end: 22,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 22,
            expressions: [
              {
                type: "MemberExpression",
                start: 3,
                end: 20,
                object: {
                  type: "CallExpression",
                  start: 3,
                  end: 17,
                  callee: {
                    type: "MemberExpression",
                    start: 3,
                    end: 12,
                    object: {
                      type: "Literal",
                      start: 3,
                      end: 7,
                      regex: {
                        pattern: "\\d",
                        flags: ""
                      },
                      value: {},
                      raw: "/\\d/"
                    },
                    property: {
                      type: "Identifier",
                      start: 8,
                      end: 12,
                      name: "exec"
                    },
                    computed: false
                  },
                  arguments: [
                    {
                      type: "Literal",
                      start: 13,
                      end: 16,
                      value: "1",
                      raw: "'1'"
                    }
                  ]
                },
                property: {
                  type: "Literal",
                  start: 18,
                  end: 19,
                  value: 0,
                  raw: "0"
                },
                computed: true
              }
            ],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 1,
                value: {
                  raw: "",
                  cooked: ""
                },
                tail: false
              },
              {
                type: "TemplateElement",
                start: 21,
                end: 21,
                value: {
                  raw: "",
                  cooked: ""
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var _𐒦 = 10;": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 13,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "_𐒦"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 12,
                value: 10,
                raw: "10"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var 𫠝_ = 10;": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 13,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 12,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "𫠝_"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 12,
                value: 10,
                raw: "10"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var _\\u{104A6} = 10;": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 20,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 19,
              id: {
                type: "Identifier",
                start: 4,
                end: 14,
                name: "_𐒦"
              },
              init: {
                type: "Literal",
                start: 17,
                end: 19,
                value: 10,
                raw: "10"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "let [x,] = [1]": {
      type: "Program",
      start: 0,
      end: 14,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 14,
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 14,
              id: {
                type: "ArrayPattern",
                start: 4,
                end: 8,
                elements: [
                  {
                    type: "Identifier",
                    start: 5,
                    end: 6,
                    name: "x"
                  }
                ]
              },
              init: {
                type: "ArrayExpression",
                start: 11,
                end: 14,
                elements: [
                  {
                    type: "Literal",
                    start: 12,
                    end: 13,
                    value: 1,
                    raw: "1"
                  }
                ]
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "let {x} = y": {
      type: "Program",
      start: 0,
      end: 11,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 11,
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              id: {
                type: "ObjectPattern",
                start: 4,
                end: 7,
                properties: [
                  {
                    type: "Property",
                    start: 5,
                    end: 6,
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      name: "x"
                    },
                    kind: "init",
                    value: {
                      type: "Identifier",
                      start: 5,
                      end: 6,
                      name: "x"
                    }
                  }
                ]
              },
              init: {
                type: "Identifier",
                start: 10,
                end: 11,
                name: "y"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "[x,,] = 1": {
      type: "Program",
      start: 0,
      end: 9,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 9,
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 5,
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  name: "x"
                },
                null
              ]
            },
            right: {
              type: "Literal",
              start: 8,
              end: 9,
              value: 1,
              raw: "1"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "for (var [name, value] in obj) {}": {
      type: "Program",
      start: 0,
      end: 33,
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 33,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 22,
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 22,
                id: {
                  type: "ArrayPattern",
                  start: 9,
                  end: 22,
                  elements: [
                    {
                      type: "Identifier",
                      start: 10,
                      end: 14,
                      name: "name"
                    },
                    {
                      type: "Identifier",
                      start: 16,
                      end: 21,
                      name: "value"
                    }
                  ]
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 26,
            end: 29,
            name: "obj"
          },
          body: {
            type: "BlockStatement",
            start: 31,
            end: 33,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { new.target; }": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 15,
            end: 30,
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 28,
                expression: {
                  type: "MetaProperty",
                  start: 17,
                  end: 27,
                  meta: {
                    type: "Identifier",
                    start: 17,
                    end: 20,
                    name: "new"
                  },
                  property: {
                    type: "Identifier",
                    start: 21,
                    end: 27,
                    name: "target"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ ['__proto__']: 1, __proto__: 2 })": {
      type: "Program",
      start: 0,
      end: 36,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 36,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 35,
            properties: [
              {
                type: "Property",
                start: 3,
                end: 19,
                method: false,
                shorthand: false,
                computed: true,
                key: {
                  type: "Literal",
                  start: 4,
                  end: 15,
                  value: "__proto__",
                  raw: "'__proto__'"
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 18,
                  end: 19,
                  value: 1,
                  raw: "1"
                }
              },
              {
                type: "Property",
                start: 21,
                end: 33,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 21,
                  end: 30,
                  name: "__proto__"
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 32,
                  end: 33,
                  value: 2,
                  raw: "2"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ __proto__() { return 1 }, __proto__: 2 })": {
      type: "Program",
      start: 0,
      end: 44,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 44,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 43,
            properties: [
              {
                type: "Property",
                start: 3,
                end: 27,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 12,
                  name: "__proto__"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 27,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 27,
                    body: [
                      {
                        type: "ReturnStatement",
                        start: 17,
                        end: 25,
                        argument: {
                          type: "Literal",
                          start: 24,
                          end: 25,
                          value: 1,
                          raw: "1"
                        }
                      }
                    ]
                  }
                }
              },
              {
                type: "Property",
                start: 29,
                end: 41,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 29,
                  end: 38,
                  name: "__proto__"
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 40,
                  end: 41,
                  value: 2,
                  raw: "2"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ get __proto__() { return 1 }, __proto__: 2 })": {
      type: "Program",
      start: 0,
      end: 48,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 48,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 47,
            properties: [
              {
                type: "Property",
                start: 3,
                end: 31,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 7,
                  end: 16,
                  name: "__proto__"
                },
                kind: "get",
                value: {
                  type: "FunctionExpression",
                  start: 16,
                  end: 31,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 19,
                    end: 31,
                    body: [
                      {
                        type: "ReturnStatement",
                        start: 21,
                        end: 29,
                        argument: {
                          type: "Literal",
                          start: 28,
                          end: 29,
                          value: 1,
                          raw: "1"
                        }
                      }
                    ]
                  }
                }
              },
              {
                type: "Property",
                start: 33,
                end: 45,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 33,
                  end: 42,
                  name: "__proto__"
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 44,
                  end: 45,
                  value: 2,
                  raw: "2"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({ __proto__, __proto__: 2 })": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 29,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 28,
            properties: [
              {
                type: "Property",
                start: 3,
                end: 12,
                method: false,
                shorthand: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 12,
                  name: "__proto__"
                },
                kind: "init",
                value: {
                  type: "Identifier",
                  start: 3,
                  end: 12,
                  name: "__proto__"
                }
              },
              {
                type: "Property",
                start: 14,
                end: 26,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 14,
                  end: 23,
                  name: "__proto__"
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 25,
                  end: 26,
                  value: 2,
                  raw: "2"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var await = 0": {
      type: "Program",
      start: 0,
      end: 13,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 13
        }
      },
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 13,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          },
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 4
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              id: {
                type: "Identifier",
                start: 4,
                end: 9,
                loc: {
                  start: {
                    line: 1,
                    column: 4
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                },
                name: "await"
              },
              init: {
                type: "Literal",
                start: 12,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                value: 0,
                raw: "0"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "/[a-z]/gimuy": {
      type: "Program",
      start: 0,
      end: 12,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            regex: {
              pattern: "[a-z]",
              flags: "gimuy"
            },
            value: {},
            raw: "/[a-z]/gimuy"
          }
        }
      ],
      sourceType: "script"
    },
    "(([,]) => 0)": {
      type: "Program",
      start: 0,
      end: 12,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          expression: {
            type: "ArrowFunctionExpression",
            start: 1,
            end: 11,
            id: null,
            params: [
              {
                type: "ArrayPattern",
                start: 2,
                end: 5,
                elements: [
                  null
                ]
              }
            ],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 10,
              end: 11,
              value: 0,
              raw: "0"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { return {arguments} }": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 37,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 15,
            end: 37,
            body: [
              {
                type: "ReturnStatement",
                start: 17,
                end: 35,
                argument: {
                  type: "ObjectExpression",
                  start: 24,
                  end: 35,
                  properties: [
                    {
                      type: "Property",
                      start: 25,
                      end: 34,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 25,
                        end: 34,
                        name: "arguments"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 25,
                        end: 34,
                        name: "arguments"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { return {eval} }": {
      type: "Program",
      start: 0,
      end: 32,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 32,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 15,
            end: 32,
            body: [
              {
                type: "ReturnStatement",
                start: 17,
                end: 30,
                argument: {
                  type: "ObjectExpression",
                  start: 24,
                  end: 30,
                  properties: [
                    {
                      type: "Property",
                      start: 25,
                      end: 29,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 25,
                        end: 29,
                        name: "eval"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 25,
                        end: 29,
                        name: "eval"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { 'use strict'; return {arguments} }": {
      type: "Program",
      start: 0,
      end: 51,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 51,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 15,
            end: 51,
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 30,
                expression: {
                  type: "Literal",
                  start: 17,
                  end: 29,
                  value: "use strict",
                  raw: "'use strict'"
                }
              },
              {
                type: "ReturnStatement",
                start: 31,
                end: 49,
                argument: {
                  type: "ObjectExpression",
                  start: 38,
                  end: 49,
                  properties: [
                    {
                      type: "Property",
                      start: 39,
                      end: 48,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 39,
                        end: 48,
                        name: "arguments"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 39,
                        end: 48,
                        name: "arguments"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { 'use strict'; return {eval} }": {
      type: "Program",
      start: 0,
      end: 46,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 46,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 15,
            end: 46,
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 30,
                expression: {
                  type: "Literal",
                  start: 17,
                  end: 29,
                  value: "use strict",
                  raw: "'use strict'"
                }
              },
              {
                type: "ReturnStatement",
                start: 31,
                end: 44,
                argument: {
                  type: "ObjectExpression",
                  start: 38,
                  end: 44,
                  properties: [
                    {
                      type: "Property",
                      start: 39,
                      end: 43,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 39,
                        end: 43,
                        name: "eval"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 39,
                        end: 43,
                        name: "eval"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { return {yield} }": {
      type: "Program",
      start: 0,
      end: 33,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 33,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 15,
            end: 33,
            body: [
              {
                type: "ReturnStatement",
                start: 17,
                end: 31,
                argument: {
                  type: "ObjectExpression",
                  start: 24,
                  end: 31,
                  properties: [
                    {
                      type: "Property",
                      start: 25,
                      end: 30,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 25,
                        end: 30,
                        name: "yield"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 25,
                        end: 30,
                        name: "yield"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function* foo(a = function*(b) { yield b }) { }": {
      type: "Program",
      start: 0,
      end: 47,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 47,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "foo"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 14,
              end: 42,
              left: {
                type: "Identifier",
                start: 14,
                end: 15,
                name: "a"
              },
              right: {
                type: "FunctionExpression",
                start: 18,
                end: 42,
                id: null,
                params: [
                  {
                    type: "Identifier",
                    start: 28,
                    end: 29,
                    name: "b"
                  }
                ],
                generator: true,
                expression: false,
                body: {
                  type: "BlockStatement",
                  start: 31,
                  end: 42,
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 33,
                      end: 40,
                      expression: {
                        type: "YieldExpression",
                        start: 33,
                        end: 40,
                        delegate: false,
                        argument: {
                          type: "Identifier",
                          start: 39,
                          end: 40,
                          name: "b"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 44,
            end: 47,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function* yield() {}": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 20,
          id: {
            type: "Identifier",
            start: 10,
            end: 15,
            name: "yield"
          },
          params: [],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 18,
            end: 20,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "({*yield() {}})": {
      type: "Program",
      start: 0,
      end: 15,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 14,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 13,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 8,
                  name: "yield"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 8,
                  end: 13,
                  id: null,
                  params: [],
                  generator: true,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 11,
                    end: 13,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {*yield() {}}": {
      type: "Program",
      start: 0,
      end: 21,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 21,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 21,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 20,
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 15,
                  name: "yield"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 15,
                  end: 20,
                  id: null,
                  params: [],
                  generator: true,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 18,
                    end: 20,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function* foo(a = function* foo() { yield b }) {}": {
      type: "Program",
      start: 0,
      end: 49,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 49,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "foo"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 14,
              end: 45,
              left: {
                type: "Identifier",
                start: 14,
                end: 15,
                name: "a"
              },
              right: {
                type: "FunctionExpression",
                start: 18,
                end: 45,
                id: {
                  type: "Identifier",
                  start: 28,
                  end: 31,
                  name: "foo"
                },
                params: [],
                generator: true,
                expression: false,
                body: {
                  type: "BlockStatement",
                  start: 34,
                  end: 45,
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 36,
                      end: 43,
                      expression: {
                        type: "YieldExpression",
                        start: 36,
                        end: 43,
                        delegate: false,
                        argument: {
                          type: "Identifier",
                          start: 42,
                          end: 43,
                          name: "b"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 47,
            end: 49,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function* foo(a = {*bar() { yield b }}) {}": {
      type: "Program",
      start: 0,
      end: 42,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 42,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "foo"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 14,
              end: 38,
              left: {
                type: "Identifier",
                start: 14,
                end: 15,
                name: "a"
              },
              right: {
                type: "ObjectExpression",
                start: 18,
                end: 38,
                properties: [
                  {
                    type: "Property",
                    start: 19,
                    end: 37,
                    method: true,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 20,
                      end: 23,
                      name: "bar"
                    },
                    kind: "init",
                    value: {
                      type: "FunctionExpression",
                      start: 23,
                      end: 37,
                      id: null,
                      params: [],
                      generator: true,
                      expression: false,
                      body: {
                        type: "BlockStatement",
                        start: 26,
                        end: 37,
                        body: [
                          {
                            type: "ExpressionStatement",
                            start: 28,
                            end: 35,
                            expression: {
                              type: "YieldExpression",
                              start: 28,
                              end: 35,
                              delegate: false,
                              argument: {
                                type: "Identifier",
                                start: 34,
                                end: 35,
                                name: "b"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 40,
            end: 42,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function* foo(a = class {*bar() { yield b }}) {}": {
      type: "Program",
      start: 0,
      end: 48,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 48,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "foo"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 14,
              end: 44,
              left: {
                type: "Identifier",
                start: 14,
                end: 15,
                name: "a"
              },
              right: {
                type: "ClassExpression",
                start: 18,
                end: 44,
                id: null,
                superClass: null,
                body: {
                  type: "ClassBody",
                  start: 24,
                  end: 44,
                  body: [
                    {
                      type: "MethodDefinition",
                      start: 25,
                      end: 43,
                      static: false,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 26,
                        end: 29,
                        name: "bar"
                      },
                      kind: "method",
                      value: {
                        type: "FunctionExpression",
                        start: 29,
                        end: 43,
                        id: null,
                        params: [],
                        generator: true,
                        expression: false,
                        body: {
                          type: "BlockStatement",
                          start: 32,
                          end: 43,
                          body: [
                            {
                              type: "ExpressionStatement",
                              start: 34,
                              end: 41,
                              expression: {
                                type: "YieldExpression",
                                start: 34,
                                end: 41,
                                delegate: false,
                                argument: {
                                  type: "Identifier",
                                  start: 40,
                                  end: 41,
                                  name: "b"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 46,
            end: 48,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function* wrap() {\n(a = yield b)\n}": {
      type: "Program",
      start: 0,
      end: 34,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 34,
          id: {
            type: "Identifier",
            start: 10,
            end: 14,
            name: "wrap"
          },
          params: [],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 17,
            end: 34,
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 32,
                expression: {
                  type: "AssignmentExpression",
                  start: 20,
                  end: 31,
                  operator: "=",
                  left: {
                    type: "Identifier",
                    start: 20,
                    end: 21,
                    name: "a"
                  },
                  right: {
                    type: "YieldExpression",
                    start: 24,
                    end: 31,
                    delegate: false,
                    argument: {
                      type: "Identifier",
                      start: 30,
                      end: 31,
                      name: "b"
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function* wrap() {\n({a = yield b} = obj)\n}": {
      type: "Program",
      start: 0,
      end: 42,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 42,
          id: {
            type: "Identifier",
            start: 10,
            end: 14,
            name: "wrap"
          },
          params: [],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 17,
            end: 42,
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 40,
                expression: {
                  type: "AssignmentExpression",
                  start: 20,
                  end: 39,
                  operator: "=",
                  left: {
                    type: "ObjectPattern",
                    start: 20,
                    end: 33,
                    properties: [
                      {
                        type: "Property",
                        start: 21,
                        end: 32,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 21,
                          end: 22,
                          name: "a"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 21,
                          end: 32,
                          left: {
                            type: "Identifier",
                            start: 21,
                            end: 22,
                            name: "a"
                          },
                          right: {
                            type: "YieldExpression",
                            start: 25,
                            end: 32,
                            delegate: false,
                            argument: {
                              type: "Identifier",
                              start: 31,
                              end: 32,
                              name: "b"
                            }
                          }
                        }
                      }
                    ]
                  },
                  right: {
                    type: "Identifier",
                    start: 36,
                    end: 39,
                    name: "obj"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function *f() { yield\n{}/1/g\n}": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          id: {
            type: "Identifier",
            start: 10,
            end: 11,
            name: "f"
          },
          params: [],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 14,
            end: 30,
            body: [
              {
                type: "ExpressionStatement",
                start: 16,
                end: 21,
                expression: {
                  type: "YieldExpression",
                  start: 16,
                  end: 21,
                  delegate: false,
                  argument: null
                }
              },
              {
                type: "BlockStatement",
                start: 22,
                end: 24,
                body: []
              },
              {
                type: "ExpressionStatement",
                start: 24,
                end: 28,
                expression: {
                  type: "Literal",
                  start: 24,
                  end: 28,
                  regex: {
                    pattern: "1",
                    flags: "g"
                  },
                  value: {},
                  raw: "/1/g"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class B extends A { foo(a = super.foo()) { return a }}": {
      type: "Program",
      start: 0,
      end: 54,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 54,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "B"
          },
          superClass: {
            type: "Identifier",
            start: 16,
            end: 17,
            name: "A"
          },
          body: {
            type: "ClassBody",
            start: 18,
            end: 54,
            body: [
              {
                type: "MethodDefinition",
                start: 20,
                end: 53,
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 20,
                  end: 23,
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 23,
                  end: 53,
                  id: null,
                  params: [
                    {
                      type: "AssignmentPattern",
                      start: 24,
                      end: 39,
                      left: {
                        type: "Identifier",
                        start: 24,
                        end: 25,
                        name: "a"
                      },
                      right: {
                        type: "CallExpression",
                        start: 28,
                        end: 39,
                        callee: {
                          type: "MemberExpression",
                          start: 28,
                          end: 37,
                          object: {
                            type: "Super",
                            start: 28,
                            end: 33
                          },
                          property: {
                            type: "Identifier",
                            start: 34,
                            end: 37,
                            name: "foo"
                          },
                          computed: false
                        },
                        arguments: []
                      }
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 41,
                    end: 53,
                    body: [
                      {
                        type: "ReturnStatement",
                        start: 43,
                        end: 51,
                        argument: {
                          type: "Identifier",
                          start: 50,
                          end: 51,
                          name: "a"
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "[x, (y), {z, u: (v)}] = foo": {
      type: "Program",
      start: 0,
      end: 27,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 27,
            operator: "=",
            left: {
              type: "ArrayPattern",
              start: 0,
              end: 21,
              elements: [
                {
                  type: "Identifier",
                  start: 1,
                  end: 2,
                  name: "x"
                },
                {
                  type: "Identifier",
                  start: 5,
                  end: 6,
                  name: "y"
                },
                {
                  type: "ObjectPattern",
                  start: 9,
                  end: 20,
                  properties: [
                    {
                      type: "Property",
                      start: 10,
                      end: 11,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "z"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "z"
                      }
                    },
                    {
                      type: "Property",
                      start: 13,
                      end: 19,
                      method: false,
                      shorthand: false,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 13,
                        end: 14,
                        name: "u"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 17,
                        end: 18,
                        name: "v"
                      }
                    }
                  ]
                }
              ]
            },
            right: {
              type: "Identifier",
              start: 24,
              end: 27,
              name: "foo"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "var foo = 1; var foo = 1;": {
      type: "Program",
      start: 0,
      end: 25,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 11,
                value: 1,
                raw: "1"
              }
            }
          ]
        },
        {
          type: "VariableDeclaration",
          start: 13,
          end: 25,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 17,
              end: 24,
              id: {
                type: "Identifier",
                start: 17,
                end: 20,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 23,
                end: 24,
                value: 1,
                raw: "1"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "if (x) var foo = 1; var foo = 1;": {
      type: "Program",
      start: 0,
      end: 32,
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 19,
          test: {
            type: "Identifier",
            start: 4,
            end: 5,
            name: "x"
          },
          consequent: {
            type: "VariableDeclaration",
            start: 7,
            end: 19,
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 18,
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 14,
                  name: "foo"
                },
                init: {
                  type: "Literal",
                  start: 17,
                  end: 18,
                  value: 1,
                  raw: "1"
                }
              }
            ]
          },
          alternate: null
        },
        {
          type: "VariableDeclaration",
          start: 20,
          end: 32,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 24,
              end: 31,
              id: {
                type: "Identifier",
                start: 24,
                end: 27,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 30,
                end: 31,
                value: 1,
                raw: "1"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "function x() { var foo = 1; } let foo = 1;": {
      type: "Program",
      start: 0,
      end: 42,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 29,
          id: {
            type: "Identifier",
            start: 9,
            end: 10,
            name: "x"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 13,
            end: 29,
            body: [
              {
                type: "VariableDeclaration",
                start: 15,
                end: 27,
                kind: "var",
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 19,
                    end: 26,
                    id: {
                      type: "Identifier",
                      start: 19,
                      end: 22,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 25,
                      end: 26,
                      value: 1,
                      raw: "1"
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          type: "VariableDeclaration",
          start: 30,
          end: 42,
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 34,
              end: 41,
              id: {
                type: "Identifier",
                start: 34,
                end: 37,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 40,
                end: 41,
                value: 1,
                raw: "1"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "function foo() { let foo = 1; }": {
      type: "Program",
      start: 0,
      end: 31,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 31,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 15,
            end: 31,
            body: [
              {
                type: "VariableDeclaration",
                start: 17,
                end: 29,
                kind: "let",
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 21,
                    end: 28,
                    id: {
                      type: "Identifier",
                      start: 21,
                      end: 24,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 27,
                      end: 28,
                      value: 1,
                      raw: "1"
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "var foo = 1; { let foo = 1; }": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 11,
                value: 1,
                raw: "1"
              }
            }
          ]
        },
        {
          type: "BlockStatement",
          start: 13,
          end: 29,
          body: [
            {
              type: "VariableDeclaration",
              start: 15,
              end: 27,
              kind: "let",
              declarations: [
                {
                  type: "VariableDeclarator",
                  start: 19,
                  end: 26,
                  id: {
                    type: "Identifier",
                    start: 19,
                    end: 22,
                    name: "foo"
                  },
                  init: {
                    type: "Literal",
                    start: 25,
                    end: 26,
                    value: 1,
                    raw: "1"
                  }
                }
              ]
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "{ let foo = 1; { let foo = 2; } }": {
      type: "Program",
      start: 0,
      end: 33,
      body: [
        {
          type: "BlockStatement",
          start: 0,
          end: 33,
          body: [
            {
              type: "VariableDeclaration",
              start: 2,
              end: 14,
              kind: "let",
              declarations: [
                {
                  type: "VariableDeclarator",
                  start: 6,
                  end: 13,
                  id: {
                    type: "Identifier",
                    start: 6,
                    end: 9,
                    name: "foo"
                  },
                  init: {
                    type: "Literal",
                    start: 12,
                    end: 13,
                    value: 1,
                    raw: "1"
                  }
                }
              ]
            },
            {
              type: "BlockStatement",
              start: 15,
              end: 31,
              body: [
                {
                  type: "VariableDeclaration",
                  start: 17,
                  end: 29,
                  kind: "let",
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 21,
                      end: 28,
                      id: {
                        type: "Identifier",
                        start: 21,
                        end: 24,
                        name: "foo"
                      },
                      init: {
                        type: "Literal",
                        start: 27,
                        end: 28,
                        value: 2,
                        raw: "2"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "var foo; try {} catch (_) { let foo; }": {
      type: "Program",
      start: 0,
      end: 38,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 8,
          kind: "var",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 7,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "foo"
              },
              init: null
            }
          ]
        },
        {
          type: "TryStatement",
          start: 9,
          end: 38,
          block: {
            type: "BlockStatement",
            start: 13,
            end: 15,
            body: []
          },
          handler: {
            type: "CatchClause",
            start: 16,
            end: 38,
            param: {
              type: "Identifier",
              start: 23,
              end: 24,
              name: "_"
            },
            body: {
              type: "BlockStatement",
              start: 26,
              end: 38,
              body: [
                {
                  type: "VariableDeclaration",
                  start: 28,
                  end: 36,
                  kind: "let",
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 32,
                      end: 35,
                      id: {
                        type: "Identifier",
                        start: 32,
                        end: 35,
                        name: "foo"
                      },
                      init: null
                    }
                  ]
                }
              ]
            }
          },
          finalizer: null
        }
      ],
      sourceType: "script"
    },
    "let x = 1; function foo(x) {}": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 10,
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 9,
              id: {
                type: "Identifier",
                start: 4,
                end: 5,
                name: "x"
              },
              init: {
                type: "Literal",
                start: 8,
                end: 9,
                value: 1,
                raw: "1"
              }
            }
          ]
        },
        {
          type: "FunctionDeclaration",
          start: 11,
          end: 29,
          id: {
            type: "Identifier",
            start: 20,
            end: 23,
            name: "foo"
          },
          params: [
            {
              type: "Identifier",
              start: 24,
              end: 25,
              name: "x"
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 27,
            end: 29,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "for (let i = 0;;); for (let i = 0;;);": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "ForStatement",
          start: 0,
          end: 18,
          init: {
            type: "VariableDeclaration",
            start: 5,
            end: 14,
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 14,
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  name: "i"
                },
                init: {
                  type: "Literal",
                  start: 13,
                  end: 14,
                  value: 0,
                  raw: "0"
                }
              }
            ]
          },
          update: null,
          test: null,
          body: {
            type: "EmptyStatement",
            start: 17,
            end: 18
          }
        },
        {
          type: "ForStatement",
          start: 19,
          end: 37,
          init: {
            type: "VariableDeclaration",
            start: 24,
            end: 33,
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 28,
                end: 33,
                id: {
                  type: "Identifier",
                  start: 28,
                  end: 29,
                  name: "i"
                },
                init: {
                  type: "Literal",
                  start: 32,
                  end: 33,
                  value: 0,
                  raw: "0"
                }
              }
            ]
          },
          update: null,
          test: null,
          body: {
            type: "EmptyStatement",
            start: 36,
            end: 37
          }
        }
      ],
      sourceType: "script"
    },
    "for (const foo of bar); for (const foo of bar);": {
      type: "Program",
      start: 0,
      end: 47,
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 23,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 14,
            kind: "const",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 14,
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 14,
                  name: "foo"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 18,
            end: 21,
            name: "bar"
          },
          body: {
            type: "EmptyStatement",
            start: 22,
            end: 23
          }
        },
        {
          type: "ForOfStatement",
          start: 24,
          end: 47,
          left: {
            type: "VariableDeclaration",
            start: 29,
            end: 38,
            kind: "const",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 35,
                end: 38,
                id: {
                  type: "Identifier",
                  start: 35,
                  end: 38,
                  name: "foo"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 42,
            end: 45,
            name: "bar"
          },
          body: {
            type: "EmptyStatement",
            start: 46,
            end: 47
          }
        }
      ],
      sourceType: "script"
    },
    "for (const foo in bar); for (const foo in bar);": {
      type: "Program",
      start: 0,
      end: 47,
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 23,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 14,
            kind: "const",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 14,
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 14,
                  name: "foo"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 18,
            end: 21,
            name: "bar"
          },
          body: {
            type: "EmptyStatement",
            start: 22,
            end: 23
          }
        },
        {
          type: "ForInStatement",
          start: 24,
          end: 47,
          left: {
            type: "VariableDeclaration",
            start: 29,
            end: 38,
            kind: "const",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 35,
                end: 38,
                id: {
                  type: "Identifier",
                  start: 35,
                  end: 38,
                  name: "foo"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 42,
            end: 45,
            name: "bar"
          },
          body: {
            type: "EmptyStatement",
            start: 46,
            end: 47
          }
        }
      ],
      sourceType: "script"
    },
    "for (let foo in bar) { let foo = 1; }": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "ForInStatement",
          start: 0,
          end: 37,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 12,
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 12,
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "foo"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 16,
            end: 19,
            name: "bar"
          },
          body: {
            type: "BlockStatement",
            start: 21,
            end: 37,
            body: [
              {
                type: "VariableDeclaration",
                start: 23,
                end: 35,
                kind: "let",
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 27,
                    end: 34,
                    id: {
                      type: "Identifier",
                      start: 27,
                      end: 30,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 33,
                      end: 34,
                      value: 1,
                      raw: "1"
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "for (let foo of bar) { let foo = 1; }": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 37,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 12,
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 12,
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "foo"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Identifier",
            start: 16,
            end: 19,
            name: "bar"
          },
          body: {
            type: "BlockStatement",
            start: 21,
            end: 37,
            body: [
              {
                type: "VariableDeclaration",
                start: 23,
                end: 35,
                kind: "let",
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 27,
                    end: 34,
                    id: {
                      type: "Identifier",
                      start: 27,
                      end: 30,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 33,
                      end: 34,
                      value: 1,
                      raw: "1"
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class Foo { method(foo) {} method2() { let foo; } }": {
      type: "Program",
      start: 0,
      end: 51,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 51,
          id: {
            type: "Identifier",
            start: 6,
            end: 9,
            name: "Foo"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 10,
            end: 51,
            body: [
              {
                type: "MethodDefinition",
                start: 12,
                end: 26,
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 12,
                  end: 18,
                  name: "method"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 18,
                  end: 26,
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 19,
                      end: 22,
                      name: "foo"
                    }
                  ],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 24,
                    end: 26,
                    body: []
                  }
                }
              },
              {
                type: "MethodDefinition",
                start: 27,
                end: 49,
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 27,
                  end: 34,
                  name: "method2"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 34,
                  end: 49,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  body: {
                    type: "BlockStatement",
                    start: 37,
                    end: 49,
                    body: [
                      {
                        type: "VariableDeclaration",
                        start: 39,
                        end: 47,
                        kind: "let",
                        declarations: [
                          {
                            type: "VariableDeclarator",
                            start: 43,
                            end: 46,
                            id: {
                              type: "Identifier",
                              start: 43,
                              end: 46,
                              name: "foo"
                            },
                            init: null
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "() => { let foo; }; foo => {}": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 18,
            id: null,
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 6,
              end: 18,
              body: [
                {
                  type: "VariableDeclaration",
                  start: 8,
                  end: 16,
                  kind: "let",
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 12,
                      end: 15,
                      id: {
                        type: "Identifier",
                        start: 12,
                        end: 15,
                        name: "foo"
                      },
                      init: null
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          type: "ExpressionStatement",
          start: 20,
          end: 29,
          expression: {
            type: "ArrowFunctionExpression",
            start: 20,
            end: 29,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 20,
                end: 23,
                name: "foo"
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 27,
              end: 29,
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "() => { let foo; }; () => { let foo; }": {
      type: "Program",
      start: 0,
      end: 38,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 18,
            id: null,
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 6,
              end: 18,
              body: [
                {
                  type: "VariableDeclaration",
                  start: 8,
                  end: 16,
                  kind: "let",
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 12,
                      end: 15,
                      id: {
                        type: "Identifier",
                        start: 12,
                        end: 15,
                        name: "foo"
                      },
                      init: null
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          type: "ExpressionStatement",
          start: 20,
          end: 38,
          expression: {
            type: "ArrowFunctionExpression",
            start: 20,
            end: 38,
            id: null,
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 26,
              end: 38,
              body: [
                {
                  type: "VariableDeclaration",
                  start: 28,
                  end: 36,
                  kind: "let",
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 32,
                      end: 35,
                      id: {
                        type: "Identifier",
                        start: 32,
                        end: 35,
                        name: "foo"
                      },
                      init: null
                    }
                  ]
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "switch(x) { case 1: let foo = 1; } let foo = 1;": {
      type: "Program",
      start: 0,
      end: 47,
      body: [
        {
          type: "SwitchStatement",
          start: 0,
          end: 34,
          discriminant: {
            type: "Identifier",
            start: 7,
            end: 8,
            name: "x"
          },
          cases: [
            {
              type: "SwitchCase",
              start: 12,
              end: 32,
              consequent: [
                {
                  type: "VariableDeclaration",
                  start: 20,
                  end: 32,
                  kind: "let",
                  declarations: [
                    {
                      type: "VariableDeclarator",
                      start: 24,
                      end: 31,
                      id: {
                        type: "Identifier",
                        start: 24,
                        end: 27,
                        name: "foo"
                      },
                      init: {
                        type: "Literal",
                        start: 30,
                        end: 31,
                        value: 1,
                        raw: "1"
                      }
                    }
                  ]
                }
              ],
              test: {
                type: "Literal",
                start: 17,
                end: 18,
                value: 1,
                raw: "1"
              }
            }
          ]
        },
        {
          type: "VariableDeclaration",
          start: 35,
          end: 47,
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 39,
              end: 46,
              id: {
                type: "Identifier",
                start: 39,
                end: 42,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 45,
                end: 46,
                value: 1,
                raw: "1"
              }
            }
          ]
        }
      ],
      sourceType: "script"
    },
    "'use strict'; function foo() { let foo = 1; }": {
      type: "Program",
      start: 0,
      end: 45,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "Literal",
            start: 0,
            end: 12,
            value: "use strict",
            raw: "'use strict'"
          }
        },
        {
          type: "FunctionDeclaration",
          start: 14,
          end: 45,
          id: {
            type: "Identifier",
            start: 23,
            end: 26,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 29,
            end: 45,
            body: [
              {
                type: "VariableDeclaration",
                start: 31,
                end: 43,
                kind: "let",
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 35,
                    end: 42,
                    id: {
                      type: "Identifier",
                      start: 35,
                      end: 38,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 41,
                      end: 42,
                      value: 1,
                      raw: "1"
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "let foo = 1; function x() { var foo = 1; }": {
      type: "Program",
      start: 0,
      end: 42,
      body: [
        {
          type: "VariableDeclaration",
          start: 0,
          end: 12,
          kind: "let",
          declarations: [
            {
              type: "VariableDeclarator",
              start: 4,
              end: 11,
              id: {
                type: "Identifier",
                start: 4,
                end: 7,
                name: "foo"
              },
              init: {
                type: "Literal",
                start: 10,
                end: 11,
                value: 1,
                raw: "1"
              }
            }
          ]
        },
        {
          type: "FunctionDeclaration",
          start: 13,
          end: 42,
          id: {
            type: "Identifier",
            start: 22,
            end: 23,
            name: "x"
          },
          params: [],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 26,
            end: 42,
            body: [
              {
                type: "VariableDeclaration",
                start: 28,
                end: 40,
                kind: "var",
                declarations: [
                  {
                    type: "VariableDeclarator",
                    start: 32,
                    end: 39,
                    id: {
                      type: "Identifier",
                      start: 32,
                      end: 35,
                      name: "foo"
                    },
                    init: {
                      type: "Literal",
                      start: 38,
                      end: 39,
                      value: 1,
                      raw: "1"
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "[...foo, bar = 1]": {
      type: "Program",
      start: 0,
      end: 17,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          expression: {
            type: "ArrayExpression",
            start: 0,
            end: 17,
            elements: [
              {
                type: "SpreadElement",
                start: 1,
                end: 7,
                argument: {
                  type: "Identifier",
                  start: 4,
                  end: 7,
                  name: "foo"
                }
              },
              {
                type: "AssignmentExpression",
                start: 9,
                end: 16,
                operator: "=",
                left: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "bar"
                },
                right: {
                  type: "Literal",
                  start: 15,
                  end: 16,
                  value: 1,
                  raw: "1"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "for (var a of /b/) {}": {
      type: "Program",
      start: 0,
      end: 21,
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 21,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 10,
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 10,
                id: {
                  type: "Identifier",
                  start: 9,
                  end: 10,
                  name: "a"
                },
                init: null
              }
            ]
          },
          right: {
            type: "Literal",
            start: 14,
            end: 17,
            regex: {
              pattern: "b",
              flags: ""
            },
            value: {},
            raw: "/b/"
          },
          body: {
            type: "BlockStatement",
            start: 19,
            end: 21,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "for (var {a} of /b/) {}": {
      type: "Program",
      start: 0,
      end: 23,
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 23,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 12,
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 12,
                id: {
                  type: "ObjectPattern",
                  start: 9,
                  end: 12,
                  properties: [
                    {
                      type: "Property",
                      start: 10,
                      end: 11,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "a"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "a"
                      }
                    }
                  ]
                },
                init: null
              }
            ]
          },
          right: {
            type: "Literal",
            start: 16,
            end: 19,
            regex: {
              pattern: "b",
              flags: ""
            },
            value: {},
            raw: "/b/"
          },
          body: {
            type: "BlockStatement",
            start: 21,
            end: 23,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "for (let {a} of /b/) {}": {
      type: "Program",
      start: 0,
      end: 23,
      body: [
        {
          type: "ForOfStatement",
          start: 0,
          end: 23,
          left: {
            type: "VariableDeclaration",
            start: 5,
            end: 12,
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 9,
                end: 12,
                id: {
                  type: "ObjectPattern",
                  start: 9,
                  end: 12,
                  properties: [
                    {
                      type: "Property",
                      start: 10,
                      end: 11,
                      method: false,
                      shorthand: true,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "a"
                      },
                      kind: "init",
                      value: {
                        type: "Identifier",
                        start: 10,
                        end: 11,
                        name: "a"
                      }
                    }
                  ]
                },
                init: null
              }
            ]
          },
          right: {
            type: "Literal",
            start: 16,
            end: 19,
            regex: {
              pattern: "b",
              flags: ""
            },
            value: {},
            raw: "/b/"
          },
          body: {
            type: "BlockStatement",
            start: 21,
            end: 23,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "function* bar() { yield /re/ }": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 30,
          id: {
            type: "Identifier",
            start: 10,
            end: 13,
            name: "bar"
          },
          params: [],
          generator: true,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 16,
            end: 30,
            body: [
              {
                type: "ExpressionStatement",
                start: 18,
                end: 28,
                expression: {
                  type: "YieldExpression",
                  start: 18,
                  end: 28,
                  delegate: false,
                  argument: {
                    type: "Literal",
                    start: 24,
                    end: 28,
                    regex: {
                      pattern: "re",
                      flags: ""
                    },
                    value: {},
                    raw: "/re/"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "() => {}\n/re/": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 8,
            id: null,
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 6,
              end: 8,
              body: []
            }
          }
        },
        {
          type: "ExpressionStatement",
          start: 9,
          end: 13,
          expression: {
            type: "Literal",
            start: 9,
            end: 13,
            regex: {
              pattern: "re",
              flags: ""
            },
            value: {},
            raw: "/re/"
          }
        }
      ],
      sourceType: "script"
    },
    "(() => {}) + 2": {
      type: "Program",
      start: 0,
      end: 14,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 14,
            left: {
              type: "ArrowFunctionExpression",
              start: 1,
              end: 9,
              id: null,
              params: [],
              generator: false,
              expression: false,
              body: {
                type: "BlockStatement",
                start: 7,
                end: 9,
                body: []
              }
            },
            operator: "+",
            right: {
              type: "Literal",
              start: 13,
              end: 14,
              value: 2,
              raw: "2"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "-a * 5": {
      type: "Program",
      start: 0,
      end: 6,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            left: {
              type: "UnaryExpression",
              start: 0,
              end: 2,
              operator: "-",
              prefix: true,
              argument: {
                type: "Identifier",
                start: 1,
                end: 2,
                name: "a"
              }
            },
            operator: "*",
            right: {
              type: "Literal",
              start: 5,
              end: 6,
              value: 5,
              raw: "5"
            }
          }
        }
      ],
      sourceType: "script"
    }
  },
  "es8-loose": {
    "undefined": {
      type: "Program",
      start: 0,
      end: 9,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          expression: {
            type: "Identifier",
            start: 0,
            end: 9,
            name: "undefined"
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { }": {
      type: "Program",
      start: 0,
      end: 18,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 18,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          async: false,
          body: {
            type: "BlockStatement",
            start: 15,
            end: 18,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo() { }": {
      type: "Program",
      start: 0,
      end: 24,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 24,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 21,
            end: 24,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async\nfunction foo() { }": {
      type: "Program",
      start: 0,
      end: 24,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          expression: {
            type: "Identifier",
            start: 0,
            end: 5,
            name: "async"
          }
        },
        {
          type: "FunctionDeclaration",
          start: 6,
          end: 24,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          async: false,
          body: {
            type: "BlockStatement",
            start: 21,
            end: 24,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function await() { }": {
      type: "Program",
      start: 0,
      end: 26,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 26,
          id: {
            type: "Identifier",
            start: 15,
            end: 20,
            name: "await"
          },
          params: [],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 23,
            end: 26,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "(function foo() { })": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 19,
            id: {
              type: "Identifier",
              start: 10,
              end: 13,
              name: "foo"
            },
            params: [],
            generator: false,
            expression: false,
            async: false,
            body: {
              type: "BlockStatement",
              start: 16,
              end: 19,
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(async function foo() { })": {
      type: "Program",
      start: 0,
      end: 26,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 26,
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 25,
            id: {
              type: "Identifier",
              start: 16,
              end: 19,
              name: "foo"
            },
            params: [],
            generator: false,
            expression: false,
            async: true,
            body: {
              type: "BlockStatement",
              start: 22,
              end: 25,
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "a => a": {
      type: "Program",
      start: 0,
      end: 6,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 6,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 0,
                end: 1,
                name: "a"
              }
            ],
            generator: false,
            expression: true,
            async: false,
            body: {
              type: "Identifier",
              start: 5,
              end: 6,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a) => a": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 8,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                name: "a"
              }
            ],
            generator: false,
            expression: true,
            async: false,
            body: {
              type: "Identifier",
              start: 7,
              end: 8,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async a => a": {
      type: "Program",
      start: 0,
      end: 12,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 12,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 12,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 6,
                end: 7,
                name: "a"
              }
            ],
            generator: false,
            expression: true,
            async: true,
            body: {
              type: "Identifier",
              start: 11,
              end: 12,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async () => a": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 13,
            id: null,
            params: [],
            generator: false,
            expression: true,
            async: true,
            body: {
              type: "Identifier",
              start: 12,
              end: 13,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async (a, b) => a": {
      type: "Program",
      start: 0,
      end: 17,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 17,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 7,
                end: 8,
                name: "a"
              },
              {
                type: "Identifier",
                start: 10,
                end: 11,
                name: "b"
              }
            ],
            generator: false,
            expression: true,
            async: true,
            body: {
              type: "Identifier",
              start: 16,
              end: 17,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async ({a = b}) => a": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 20,
            id: null,
            params: [
              {
                type: "ObjectPattern",
                start: 7,
                end: 14,
                properties: [
                  {
                    type: "Property",
                    start: 8,
                    end: 13,
                    method: false,
                    shorthand: true,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 8,
                      end: 9,
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "AssignmentPattern",
                      start: 8,
                      end: 13,
                      left: {
                        type: "Identifier",
                        start: 8,
                        end: 9,
                        name: "a"
                      },
                      right: {
                        type: "Identifier",
                        start: 12,
                        end: 13,
                        name: "b"
                      }
                    }
                  }
                ]
              }
            ],
            generator: false,
            expression: true,
            async: true,
            body: {
              type: "Identifier",
              start: 19,
              end: 20,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async ({a: b = c}) => a": {
      type: "Program",
      start: 0,
      end: 23,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 23,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 23,
            id: null,
            params: [
              {
                type: "ObjectPattern",
                start: 7,
                end: 17,
                properties: [
                  {
                    type: "Property",
                    start: 8,
                    end: 16,
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 8,
                      end: 9,
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "AssignmentPattern",
                      start: 11,
                      end: 16,
                      left: {
                        type: "Identifier",
                        start: 11,
                        end: 12,
                        name: "b"
                      },
                      right: {
                        type: "Identifier",
                        start: 15,
                        end: 16,
                        name: "c"
                      }
                    }
                  }
                ]
              }
            ],
            generator: false,
            expression: true,
            async: true,
            body: {
              type: "Identifier",
              start: 22,
              end: 23,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async ({a: b = c})": {
      type: "Program",
      start: 0,
      end: 18,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          expression: {
            type: "CallExpression",
            start: 0,
            end: 18,
            callee: {
              type: "Identifier",
              start: 0,
              end: 5,
              name: "async"
            },
            arguments: [
              {
                type: "ObjectExpression",
                start: 7,
                end: 17,
                properties: [
                  {
                    type: "Property",
                    start: 8,
                    end: 16,
                    method: false,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 8,
                      end: 9,
                      name: "a"
                    },
                    kind: "init",
                    value: {
                      type: "AssignmentExpression",
                      start: 11,
                      end: 16,
                      operator: "=",
                      left: {
                        type: "Identifier",
                        start: 11,
                        end: 12,
                        name: "b"
                      },
                      right: {
                        type: "Identifier",
                        start: 15,
                        end: 16,
                        name: "c"
                      }
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async\na => a": {
      type: "Program",
      start: 0,
      end: 12,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          expression: {
            type: "Identifier",
            start: 0,
            end: 5,
            name: "async"
          }
        },
        {
          type: "ExpressionStatement",
          start: 6,
          end: 12,
          expression: {
            type: "ArrowFunctionExpression",
            start: 6,
            end: 12,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 6,
                end: 7,
                name: "a"
              }
            ],
            generator: false,
            expression: true,
            async: false,
            body: {
              type: "Identifier",
              start: 11,
              end: 12,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async (await)": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "CallExpression",
            start: 0,
            end: 13,
            callee: {
              type: "Identifier",
              start: 0,
              end: 5,
              name: "async"
            },
            arguments: [
              {
                type: "Identifier",
                start: 7,
                end: 12,
                name: "await"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async yield => 1": {
      type: "Program",
      start: 0,
      end: 16,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 16,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 16,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 6,
                end: 11,
                name: "yield"
              }
            ],
            generator: false,
            expression: true,
            async: true,
            body: {
              type: "Literal",
              start: 15,
              end: 16,
              value: 1,
              raw: "1"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({foo() { }})": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 12,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 11,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 2,
                  end: 5,
                  name: "foo"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 5,
                  end: 11,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: false,
                  body: {
                    type: "BlockStatement",
                    start: 8,
                    end: 11,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({async foo() { }})": {
      type: "Program",
      start: 0,
      end: 19,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 19,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 18,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 17,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 8,
                  end: 11,
                  name: "foo"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 11,
                  end: 17,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: true,
                  body: {
                    type: "BlockStatement",
                    start: 14,
                    end: 17,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({async() { }})": {
      type: "Program",
      start: 0,
      end: 15,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 14,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 13,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 2,
                  end: 7,
                  name: "async"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 7,
                  end: 13,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: false,
                  body: {
                    type: "BlockStatement",
                    start: 10,
                    end: 13,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "({async await() { }})": {
      type: "Program",
      start: 0,
      end: 21,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 21,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 20,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 19,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 8,
                  end: 13,
                  name: "await"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 13,
                  end: 19,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: true,
                  body: {
                    type: "BlockStatement",
                    start: 16,
                    end: 19,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {foo() { }}": {
      type: "Program",
      start: 0,
      end: 19,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 19,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 19,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 18,
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 18,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: false,
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 18,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {async foo() { }}": {
      type: "Program",
      start: 0,
      end: 25,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 25,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 25,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 24,
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 15,
                  end: 18,
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 18,
                  end: 24,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: true,
                  body: {
                    type: "BlockStatement",
                    start: 21,
                    end: 24,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static async foo() { }}": {
      type: "Program",
      start: 0,
      end: 32,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 32,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 32,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 31,
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 22,
                  end: 25,
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 25,
                  end: 31,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: true,
                  body: {
                    type: "BlockStatement",
                    start: 28,
                    end: 31,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {async() { }}": {
      type: "Program",
      start: 0,
      end: 21,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 21,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 21,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 20,
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 14,
                  name: "async"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 14,
                  end: 20,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: false,
                  body: {
                    type: "BlockStatement",
                    start: 17,
                    end: 20,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static async() { }}": {
      type: "Program",
      start: 0,
      end: 28,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 28,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 28,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 27,
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 16,
                  end: 21,
                  name: "async"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 21,
                  end: 27,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: false,
                  body: {
                    type: "BlockStatement",
                    start: 24,
                    end: 27,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {*async() { }}": {
      type: "Program",
      start: 0,
      end: 22,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 22,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 22,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 21,
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 10,
                  end: 15,
                  name: "async"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 15,
                  end: 21,
                  id: null,
                  params: [],
                  generator: true,
                  expression: false,
                  async: false,
                  body: {
                    type: "BlockStatement",
                    start: 18,
                    end: 21,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static* async() { }}": {
      type: "Program",
      start: 0,
      end: 29,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 29,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 29,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 28,
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 17,
                  end: 22,
                  name: "async"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 22,
                  end: 28,
                  id: null,
                  params: [],
                  generator: true,
                  expression: false,
                  async: false,
                  body: {
                    type: "BlockStatement",
                    start: 25,
                    end: 28,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {async await() { }}": {
      type: "Program",
      start: 0,
      end: 27,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 27,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 27,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 26,
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 15,
                  end: 20,
                  name: "await"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 20,
                  end: 26,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: true,
                  body: {
                    type: "BlockStatement",
                    start: 23,
                    end: 26,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static async await() { }}": {
      type: "Program",
      start: 0,
      end: 34,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 34,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 34,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 33,
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 22,
                  end: 27,
                  name: "await"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 27,
                  end: 33,
                  id: null,
                  params: [],
                  generator: false,
                  expression: false,
                  async: true,
                  body: {
                    type: "BlockStatement",
                    start: 30,
                    end: 33,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "await": {
      type: "Program",
      start: 0,
      end: 5,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          expression: {
            type: "Identifier",
            start: 0,
            end: 5,
            name: "await"
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo(a, b) { await a }": {
      type: "Program",
      start: 0,
      end: 36,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 36,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          params: [
            {
              type: "Identifier",
              start: 19,
              end: 20,
              name: "a"
            },
            {
              type: "Identifier",
              start: 22,
              end: 23,
              name: "b"
            }
          ],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 25,
            end: 36,
            body: [
              {
                type: "ExpressionStatement",
                start: 27,
                end: 34,
                expression: {
                  type: "AwaitExpression",
                  start: 27,
                  end: 34,
                  argument: {
                    type: "Identifier",
                    start: 33,
                    end: 34,
                    name: "a"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(async function foo(a) { await a })": {
      type: "Program",
      start: 0,
      end: 35,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 35,
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 34,
            id: {
              type: "Identifier",
              start: 16,
              end: 19,
              name: "foo"
            },
            params: [
              {
                type: "Identifier",
                start: 20,
                end: 21,
                name: "a"
              }
            ],
            generator: false,
            expression: false,
            async: true,
            body: {
              type: "BlockStatement",
              start: 23,
              end: 34,
              body: [
                {
                  type: "ExpressionStatement",
                  start: 25,
                  end: 32,
                  expression: {
                    type: "AwaitExpression",
                    start: 25,
                    end: 32,
                    argument: {
                      type: "Identifier",
                      start: 31,
                      end: 32,
                      name: "a"
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(async (a) => await a)": {
      type: "Program",
      start: 0,
      end: 22,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          expression: {
            type: "ArrowFunctionExpression",
            start: 1,
            end: 21,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 8,
                end: 9,
                name: "a"
              }
            ],
            generator: false,
            expression: true,
            async: true,
            body: {
              type: "AwaitExpression",
              start: 14,
              end: 21,
              argument: {
                type: "Identifier",
                start: 20,
                end: 21,
                name: "a"
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({async foo(a) { await a }})": {
      type: "Program",
      start: 0,
      end: 28,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 28,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 27,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 26,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 8,
                  end: 11,
                  name: "foo"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 11,
                  end: 26,
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 12,
                      end: 13,
                      name: "a"
                    }
                  ],
                  generator: false,
                  expression: false,
                  async: true,
                  body: {
                    type: "BlockStatement",
                    start: 15,
                    end: 26,
                    body: [
                      {
                        type: "ExpressionStatement",
                        start: 17,
                        end: 24,
                        expression: {
                          type: "AwaitExpression",
                          start: 17,
                          end: 24,
                          argument: {
                            type: "Identifier",
                            start: 23,
                            end: 24,
                            name: "a"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(class {async foo(a) { await a }})": {
      type: "Program",
      start: 0,
      end: 34,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 34,
          expression: {
            type: "ClassExpression",
            start: 1,
            end: 33,
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 7,
              end: 33,
              body: [
                {
                  type: "MethodDefinition",
                  start: 8,
                  end: 32,
                  static: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 14,
                    end: 17,
                    name: "foo"
                  },
                  kind: "method",
                  value: {
                    type: "FunctionExpression",
                    start: 17,
                    end: 32,
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 18,
                        end: 19,
                        name: "a"
                      }
                    ],
                    generator: false,
                    expression: false,
                    async: true,
                    body: {
                      type: "BlockStatement",
                      start: 21,
                      end: 32,
                      body: [
                        {
                          type: "ExpressionStatement",
                          start: 23,
                          end: 30,
                          expression: {
                            type: "AwaitExpression",
                            start: 23,
                            end: 30,
                            argument: {
                              type: "Identifier",
                              start: 29,
                              end: 30,
                              name: "a"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo(a, b) { await a + await b }": {
      type: "Program",
      start: 0,
      end: 46,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 46,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          params: [
            {
              type: "Identifier",
              start: 19,
              end: 20,
              name: "a"
            },
            {
              type: "Identifier",
              start: 22,
              end: 23,
              name: "b"
            }
          ],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 25,
            end: 46,
            body: [
              {
                type: "ExpressionStatement",
                start: 27,
                end: 44,
                expression: {
                  type: "BinaryExpression",
                  start: 27,
                  end: 44,
                  left: {
                    type: "AwaitExpression",
                    start: 27,
                    end: 34,
                    argument: {
                      type: "Identifier",
                      start: 33,
                      end: 34,
                      name: "a"
                    }
                  },
                  operator: "+",
                  right: {
                    type: "AwaitExpression",
                    start: 37,
                    end: 44,
                    argument: {
                      type: "Identifier",
                      start: 43,
                      end: 44,
                      name: "b"
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function foo() { await + 1 }": {
      type: "Program",
      start: 0,
      end: 28,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 28,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          async: false,
          body: {
            type: "BlockStatement",
            start: 15,
            end: 28,
            body: [
              {
                type: "ExpressionStatement",
                start: 17,
                end: 26,
                expression: {
                  type: "BinaryExpression",
                  start: 17,
                  end: 26,
                  left: {
                    type: "Identifier",
                    start: 17,
                    end: 22,
                    name: "await"
                  },
                  operator: "+",
                  right: {
                    type: "Literal",
                    start: 25,
                    end: 26,
                    value: 1,
                    raw: "1"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo() { await + 1 }": {
      type: "Program",
      start: 0,
      end: 34,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 34,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          params: [],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 21,
            end: 34,
            body: [
              {
                type: "ExpressionStatement",
                start: 23,
                end: 32,
                expression: {
                  type: "AwaitExpression",
                  start: 23,
                  end: 32,
                  argument: {
                    type: "UnaryExpression",
                    start: 29,
                    end: 32,
                    operator: "+",
                    prefix: true,
                    argument: {
                      type: "Literal",
                      start: 31,
                      end: 32,
                      value: 1,
                      raw: "1"
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo(a = async function foo() { await b }) {}": {
      type: "Program",
      start: 0,
      end: 59,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 59,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 19,
              end: 55,
              left: {
                type: "Identifier",
                start: 19,
                end: 20,
                name: "a"
              },
              right: {
                type: "FunctionExpression",
                start: 23,
                end: 55,
                id: {
                  type: "Identifier",
                  start: 38,
                  end: 41,
                  name: "foo"
                },
                params: [],
                generator: false,
                expression: false,
                async: true,
                body: {
                  type: "BlockStatement",
                  start: 44,
                  end: 55,
                  body: [
                    {
                      type: "ExpressionStatement",
                      start: 46,
                      end: 53,
                      expression: {
                        type: "AwaitExpression",
                        start: 46,
                        end: 53,
                        argument: {
                          type: "Identifier",
                          start: 52,
                          end: 53,
                          name: "b"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 57,
            end: 59,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo(a = async () => await b) {}": {
      type: "Program",
      start: 0,
      end: 46,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 46,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 19,
              end: 42,
              left: {
                type: "Identifier",
                start: 19,
                end: 20,
                name: "a"
              },
              right: {
                type: "ArrowFunctionExpression",
                start: 23,
                end: 42,
                id: null,
                params: [],
                generator: false,
                expression: true,
                async: true,
                body: {
                  type: "AwaitExpression",
                  start: 35,
                  end: 42,
                  argument: {
                    type: "Identifier",
                    start: 41,
                    end: 42,
                    name: "b"
                  }
                }
              }
            }
          ],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 44,
            end: 46,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo(a = {async bar() { await b }}) {}": {
      type: "Program",
      start: 0,
      end: 52,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 52,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 19,
              end: 48,
              left: {
                type: "Identifier",
                start: 19,
                end: 20,
                name: "a"
              },
              right: {
                type: "ObjectExpression",
                start: 23,
                end: 48,
                properties: [
                  {
                    type: "Property",
                    start: 24,
                    end: 47,
                    method: true,
                    shorthand: false,
                    computed: false,
                    key: {
                      type: "Identifier",
                      start: 30,
                      end: 33,
                      name: "bar"
                    },
                    kind: "init",
                    value: {
                      type: "FunctionExpression",
                      start: 33,
                      end: 47,
                      id: null,
                      params: [],
                      generator: false,
                      expression: false,
                      async: true,
                      body: {
                        type: "BlockStatement",
                        start: 36,
                        end: 47,
                        body: [
                          {
                            type: "ExpressionStatement",
                            start: 38,
                            end: 45,
                            expression: {
                              type: "AwaitExpression",
                              start: 38,
                              end: 45,
                              argument: {
                                type: "Identifier",
                                start: 44,
                                end: 45,
                                name: "b"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 50,
            end: 52,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function foo(a = class {async bar() { await b }}) {}": {
      type: "Program",
      start: 0,
      end: 58,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 58,
          id: {
            type: "Identifier",
            start: 15,
            end: 18,
            name: "foo"
          },
          params: [
            {
              type: "AssignmentPattern",
              start: 19,
              end: 54,
              left: {
                type: "Identifier",
                start: 19,
                end: 20,
                name: "a"
              },
              right: {
                type: "ClassExpression",
                start: 23,
                end: 54,
                id: null,
                superClass: null,
                body: {
                  type: "ClassBody",
                  start: 29,
                  end: 54,
                  body: [
                    {
                      type: "MethodDefinition",
                      start: 30,
                      end: 53,
                      static: false,
                      computed: false,
                      key: {
                        type: "Identifier",
                        start: 36,
                        end: 39,
                        name: "bar"
                      },
                      kind: "method",
                      value: {
                        type: "FunctionExpression",
                        start: 39,
                        end: 53,
                        id: null,
                        params: [],
                        generator: false,
                        expression: false,
                        async: true,
                        body: {
                          type: "BlockStatement",
                          start: 42,
                          end: 53,
                          body: [
                            {
                              type: "ExpressionStatement",
                              start: 44,
                              end: 51,
                              expression: {
                                type: "AwaitExpression",
                                start: 44,
                                end: 51,
                                argument: {
                                  type: "Identifier",
                                  start: 50,
                                  end: 51,
                                  name: "b"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 56,
            end: 58,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "async function wrap() {\n(a = await b)\n}": {
      type: "Program",
      start: 0,
      end: 39,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 39,
          id: {
            type: "Identifier",
            start: 15,
            end: 19,
            name: "wrap"
          },
          params: [],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 22,
            end: 39,
            body: [
              {
                type: "ExpressionStatement",
                start: 24,
                end: 37,
                expression: {
                  type: "AssignmentExpression",
                  start: 25,
                  end: 36,
                  operator: "=",
                  left: {
                    type: "Identifier",
                    start: 25,
                    end: 26,
                    name: "a"
                  },
                  right: {
                    type: "AwaitExpression",
                    start: 29,
                    end: 36,
                    argument: {
                      type: "Identifier",
                      start: 35,
                      end: 36,
                      name: "b"
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "async function wrap() {\n({a = await b} = obj)\n}": {
      type: "Program",
      start: 0,
      end: 47,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 47,
          id: {
            type: "Identifier",
            start: 15,
            end: 19,
            name: "wrap"
          },
          params: [],
          generator: false,
          expression: false,
          async: true,
          body: {
            type: "BlockStatement",
            start: 22,
            end: 47,
            body: [
              {
                type: "ExpressionStatement",
                start: 24,
                end: 45,
                expression: {
                  type: "AssignmentExpression",
                  start: 25,
                  end: 44,
                  operator: "=",
                  left: {
                    type: "ObjectPattern",
                    start: 25,
                    end: 38,
                    properties: [
                      {
                        type: "Property",
                        start: 26,
                        end: 37,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 26,
                          end: 27,
                          name: "a"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 26,
                          end: 37,
                          left: {
                            type: "Identifier",
                            start: 26,
                            end: 27,
                            name: "a"
                          },
                          right: {
                            type: "AwaitExpression",
                            start: 30,
                            end: 37,
                            argument: {
                              type: "Identifier",
                              start: 36,
                              end: 37,
                              name: "b"
                            }
                          }
                        }
                      }
                    ]
                  },
                  right: {
                    type: "Identifier",
                    start: 41,
                    end: 44,
                    name: "obj"
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "function* wrap() {\nasync(a = yield b)\n}": {
      type: "Program",
      start: 0,
      end: 39,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 39,
          id: {
            type: "Identifier",
            start: 10,
            end: 14,
            name: "wrap"
          },
          params: [],
          generator: true,
          expression: false,
          async: false,
          body: {
            type: "BlockStatement",
            start: 17,
            end: 39,
            body: [
              {
                type: "ExpressionStatement",
                start: 19,
                end: 37,
                expression: {
                  type: "CallExpression",
                  start: 19,
                  end: 37,
                  callee: {
                    type: "Identifier",
                    start: 19,
                    end: 24,
                    name: "async"
                  },
                  arguments: [
                    {
                      type: "AssignmentExpression",
                      start: 25,
                      end: 36,
                      operator: "=",
                      left: {
                        type: "Identifier",
                        start: 25,
                        end: 26,
                        name: "a"
                      },
                      right: {
                        type: "YieldExpression",
                        start: 29,
                        end: 36,
                        delegate: false,
                        argument: {
                          type: "Identifier",
                          start: 35,
                          end: 36,
                          name: "b"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "f = ({ w = counter(), x = counter(), y = counter(), z = counter() } = { w: null, x: 0, y: false, z: '' }) => {}": {
      type: "Program",
      start: 0,
      end: 111,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 111,
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 111,
            operator: "=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              name: "f"
            },
            right: {
              type: "ArrowFunctionExpression",
              start: 4,
              end: 111,
              id: null,
              params: [
                {
                  type: "AssignmentPattern",
                  start: 5,
                  end: 104,
                  left: {
                    type: "ObjectPattern",
                    start: 5,
                    end: 67,
                    properties: [
                      {
                        type: "Property",
                        start: 7,
                        end: 20,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 7,
                          end: 8,
                          name: "w"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 7,
                          end: 20,
                          left: {
                            type: "Identifier",
                            start: 7,
                            end: 8,
                            name: "w"
                          },
                          right: {
                            type: "CallExpression",
                            start: 11,
                            end: 20,
                            callee: {
                              type: "Identifier",
                              start: 11,
                              end: 18,
                              name: "counter"
                            },
                            arguments: []
                          }
                        }
                      },
                      {
                        type: "Property",
                        start: 22,
                        end: 35,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 22,
                          end: 23,
                          name: "x"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 22,
                          end: 35,
                          left: {
                            type: "Identifier",
                            start: 22,
                            end: 23,
                            name: "x"
                          },
                          right: {
                            type: "CallExpression",
                            start: 26,
                            end: 35,
                            callee: {
                              type: "Identifier",
                              start: 26,
                              end: 33,
                              name: "counter"
                            },
                            arguments: []
                          }
                        }
                      },
                      {
                        type: "Property",
                        start: 37,
                        end: 50,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 37,
                          end: 38,
                          name: "y"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 37,
                          end: 50,
                          left: {
                            type: "Identifier",
                            start: 37,
                            end: 38,
                            name: "y"
                          },
                          right: {
                            type: "CallExpression",
                            start: 41,
                            end: 50,
                            callee: {
                              type: "Identifier",
                              start: 41,
                              end: 48,
                              name: "counter"
                            },
                            arguments: []
                          }
                        }
                      },
                      {
                        type: "Property",
                        start: 52,
                        end: 65,
                        method: false,
                        shorthand: true,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 52,
                          end: 53,
                          name: "z"
                        },
                        kind: "init",
                        value: {
                          type: "AssignmentPattern",
                          start: 52,
                          end: 65,
                          left: {
                            type: "Identifier",
                            start: 52,
                            end: 53,
                            name: "z"
                          },
                          right: {
                            type: "CallExpression",
                            start: 56,
                            end: 65,
                            callee: {
                              type: "Identifier",
                              start: 56,
                              end: 63,
                              name: "counter"
                            },
                            arguments: []
                          }
                        }
                      }
                    ]
                  },
                  right: {
                    type: "ObjectExpression",
                    start: 70,
                    end: 104,
                    properties: [
                      {
                        type: "Property",
                        start: 72,
                        end: 79,
                        method: false,
                        shorthand: false,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 72,
                          end: 73,
                          name: "w"
                        },
                        kind: "init",
                        value: {
                          type: "Literal",
                          start: 75,
                          end: 79,
                          value: null,
                          raw: "null"
                        }
                      },
                      {
                        type: "Property",
                        start: 81,
                        end: 85,
                        method: false,
                        shorthand: false,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 81,
                          end: 82,
                          name: "x"
                        },
                        kind: "init",
                        value: {
                          type: "Literal",
                          start: 84,
                          end: 85,
                          value: 0,
                          raw: "0"
                        }
                      },
                      {
                        type: "Property",
                        start: 87,
                        end: 95,
                        method: false,
                        shorthand: false,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 87,
                          end: 88,
                          name: "y"
                        },
                        kind: "init",
                        value: {
                          type: "Literal",
                          start: 90,
                          end: 95,
                          value: false,
                          raw: "false"
                        }
                      },
                      {
                        type: "Property",
                        start: 97,
                        end: 102,
                        method: false,
                        shorthand: false,
                        computed: false,
                        key: {
                          type: "Identifier",
                          start: 97,
                          end: 98,
                          name: "z"
                        },
                        kind: "init",
                        value: {
                          type: "Literal",
                          start: 100,
                          end: 102,
                          value: "",
                          raw: "''"
                        }
                      }
                    ]
                  }
                }
              ],
              generator: false,
              expression: false,
              async: false,
              body: {
                type: "BlockStatement",
                start: 109,
                end: 111,
                body: []
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({ async: true })": {
      type: "Program",
      start: 0,
      end: 17,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 16,
            properties: [
              {
                type: "Property",
                start: 3,
                end: 14,
                method: false,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 3,
                  end: 8,
                  name: "async"
                },
                kind: "init",
                value: {
                  type: "Literal",
                  start: 10,
                  end: 14,
                  value: true,
                  raw: "true"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "if (x) async function f() {}": {
      type: "Program",
      start: 0,
      end: 28,
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 28,
          test: {
            type: "Identifier",
            start: 4,
            end: 5,
            name: "x"
          },
          consequent: {
            type: "FunctionDeclaration",
            start: 7,
            end: 28,
            id: {
              type: "Identifier",
              start: 22,
              end: 23,
              name: "f"
            },
            params: [],
            generator: false,
            expression: false,
            async: true,
            body: {
              type: "BlockStatement",
              start: 26,
              end: 28,
              body: []
            }
          },
          alternate: null
        }
      ],
      sourceType: "script"
    },
    "function foo(a,) { }": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 20,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [
            {
              type: "Identifier",
              start: 13,
              end: 14,
              name: "a"
            }
          ],
          generator: false,
          expression: false,
          async: false,
          body: {
            type: "BlockStatement",
            start: 17,
            end: 20,
            body: []
          }
        }
      ],
      sourceType: "script"
    },
    "(function(a,) { })": {
      type: "Program",
      start: 0,
      end: 18,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 18,
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 17,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 10,
                end: 11,
                name: "a"
              }
            ],
            generator: false,
            expression: false,
            async: false,
            body: {
              type: "BlockStatement",
              start: 14,
              end: 17,
              body: []
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(a,) => a": {
      type: "Program",
      start: 0,
      end: 9,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 9,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 1,
                end: 2,
                name: "a"
              }
            ],
            generator: false,
            expression: true,
            async: false,
            body: {
              type: "Identifier",
              start: 8,
              end: 9,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "async (a,) => a": {
      type: "Program",
      start: 0,
      end: 15,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 15,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 7,
                end: 8,
                name: "a"
              }
            ],
            generator: false,
            expression: true,
            async: true,
            body: {
              type: "Identifier",
              start: 14,
              end: 15,
              name: "a"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "({foo(a,) {}})": {
      type: "Program",
      start: 0,
      end: 14,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          expression: {
            type: "ObjectExpression",
            start: 1,
            end: 13,
            properties: [
              {
                type: "Property",
                start: 2,
                end: 12,
                method: true,
                shorthand: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 2,
                  end: 5,
                  name: "foo"
                },
                kind: "init",
                value: {
                  type: "FunctionExpression",
                  start: 5,
                  end: 12,
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 6,
                      end: 7,
                      name: "a"
                    }
                  ],
                  generator: false,
                  expression: false,
                  async: false,
                  body: {
                    type: "BlockStatement",
                    start: 10,
                    end: 12,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {foo(a,) {}}": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 20,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 20,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 19,
                static: false,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 12,
                  end: 19,
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 13,
                      end: 14,
                      name: "a"
                    }
                  ],
                  generator: false,
                  expression: false,
                  async: false,
                  body: {
                    type: "BlockStatement",
                    start: 17,
                    end: 19,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "class A {static foo(a,) {}}": {
      type: "Program",
      start: 0,
      end: 27,
      body: [
        {
          type: "ClassDeclaration",
          start: 0,
          end: 27,
          id: {
            type: "Identifier",
            start: 6,
            end: 7,
            name: "A"
          },
          superClass: null,
          body: {
            type: "ClassBody",
            start: 8,
            end: 27,
            body: [
              {
                type: "MethodDefinition",
                start: 9,
                end: 26,
                static: true,
                computed: false,
                key: {
                  type: "Identifier",
                  start: 16,
                  end: 19,
                  name: "foo"
                },
                kind: "method",
                value: {
                  type: "FunctionExpression",
                  start: 19,
                  end: 26,
                  id: null,
                  params: [
                    {
                      type: "Identifier",
                      start: 20,
                      end: 21,
                      name: "a"
                    }
                  ],
                  generator: false,
                  expression: false,
                  async: false,
                  body: {
                    type: "BlockStatement",
                    start: 24,
                    end: 26,
                    body: []
                  }
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "(class {foo(a,) {}})": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          expression: {
            type: "ClassExpression",
            start: 1,
            end: 19,
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 7,
              end: 19,
              body: [
                {
                  type: "MethodDefinition",
                  start: 8,
                  end: 18,
                  static: false,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 8,
                    end: 11,
                    name: "foo"
                  },
                  kind: "method",
                  value: {
                    type: "FunctionExpression",
                    start: 11,
                    end: 18,
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 12,
                        end: 13,
                        name: "a"
                      }
                    ],
                    generator: false,
                    expression: false,
                    async: false,
                    body: {
                      type: "BlockStatement",
                      start: 16,
                      end: 18,
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(class {static foo(a,) {}})": {
      type: "Program",
      start: 0,
      end: 27,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 27,
          expression: {
            type: "ClassExpression",
            start: 1,
            end: 26,
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 7,
              end: 26,
              body: [
                {
                  type: "MethodDefinition",
                  start: 8,
                  end: 25,
                  static: true,
                  computed: false,
                  key: {
                    type: "Identifier",
                    start: 15,
                    end: 18,
                    name: "foo"
                  },
                  kind: "method",
                  value: {
                    type: "FunctionExpression",
                    start: 18,
                    end: 25,
                    id: null,
                    params: [
                      {
                        type: "Identifier",
                        start: 19,
                        end: 20,
                        name: "a"
                      }
                    ],
                    generator: false,
                    expression: false,
                    async: false,
                    body: {
                      type: "BlockStatement",
                      start: 23,
                      end: 25,
                      body: []
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo(a,)": {
      type: "Program",
      start: 0,
      end: 7,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          expression: {
            type: "CallExpression",
            start: 0,
            end: 7,
            callee: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            arguments: [
              {
                type: "Identifier",
                start: 4,
                end: 5,
                name: "a"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "new foo(a,)": {
      type: "Program",
      start: 0,
      end: 11,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          expression: {
            type: "NewExpression",
            start: 0,
            end: 11,
            callee: {
              type: "Identifier",
              start: 4,
              end: 7,
              name: "foo"
            },
            arguments: [
              {
                type: "Identifier",
                start: 8,
                end: 9,
                name: "a"
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "foo(...a,)": {
      type: "Program",
      start: 0,
      end: 10,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          expression: {
            type: "CallExpression",
            start: 0,
            end: 10,
            callee: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            arguments: [
              {
                type: "SpreadElement",
                start: 4,
                end: 8,
                argument: {
                  type: "Identifier",
                  start: 7,
                  end: 8,
                  name: "a"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "new foo(...a,)": {
      type: "Program",
      start: 0,
      end: 14,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          expression: {
            type: "NewExpression",
            start: 0,
            end: 14,
            callee: {
              type: "Identifier",
              start: 4,
              end: 7,
              name: "foo"
            },
            arguments: [
              {
                type: "SpreadElement",
                start: 8,
                end: 12,
                argument: {
                  type: "Identifier",
                  start: 11,
                  end: 12,
                  name: "a"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    }
  },
  "es6-module-loose": {
    "export var document": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          range: [
            0,
            19
          ],
          declaration: {
            type: "VariableDeclaration",
            start: 7,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 19
              }
            },
            range: [
              7,
              19
            ],
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 19,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 19
                  }
                },
                range: [
                  11,
                  19
                ],
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    11,
                    19
                  ],
                  name: "document"
                },
                init: null
              }
            ]
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export var document = { }": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      range: [
        0,
        25
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          range: [
            0,
            25
          ],
          declaration: {
            type: "VariableDeclaration",
            start: 7,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 25
              }
            },
            range: [
              7,
              25
            ],
            kind: "var",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  11,
                  25
                ],
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    11,
                    19
                  ],
                  name: "document"
                },
                init: {
                  type: "ObjectExpression",
                  start: 22,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  range: [
                    22,
                    25
                  ],
                  properties: []
                }
              }
            ]
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export let document": {
      type: "Program",
      start: 0,
      end: 19,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 19
        }
      },
      range: [
        0,
        19
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 19,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 19
            }
          },
          range: [
            0,
            19
          ],
          declaration: {
            type: "VariableDeclaration",
            start: 7,
            end: 19,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 19
              }
            },
            range: [
              7,
              19
            ],
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 19,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 19
                  }
                },
                range: [
                  11,
                  19
                ],
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    11,
                    19
                  ],
                  name: "document"
                },
                init: null
              }
            ]
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export let document = { }": {
      type: "Program",
      start: 0,
      end: 25,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 25
        }
      },
      range: [
        0,
        25
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 25,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 25
            }
          },
          range: [
            0,
            25
          ],
          declaration: {
            type: "VariableDeclaration",
            start: 7,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 25
              }
            },
            range: [
              7,
              25
            ],
            kind: "let",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 11,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 11
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  11,
                  25
                ],
                id: {
                  type: "Identifier",
                  start: 11,
                  end: 19,
                  loc: {
                    start: {
                      line: 1,
                      column: 11
                    },
                    end: {
                      line: 1,
                      column: 19
                    }
                  },
                  range: [
                    11,
                    19
                  ],
                  name: "document"
                },
                init: {
                  type: "ObjectExpression",
                  start: 22,
                  end: 25,
                  loc: {
                    start: {
                      line: 1,
                      column: 22
                    },
                    end: {
                      line: 1,
                      column: 25
                    }
                  },
                  range: [
                    22,
                    25
                  ],
                  properties: []
                }
              }
            ]
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export const document = { }": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          declaration: {
            type: "VariableDeclaration",
            start: 7,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              7,
              27
            ],
            kind: "const",
            declarations: [
              {
                type: "VariableDeclarator",
                start: 13,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 13
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  13,
                  27
                ],
                id: {
                  type: "Identifier",
                  start: 13,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 13
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    13,
                    21
                  ],
                  name: "document"
                },
                init: {
                  type: "ObjectExpression",
                  start: 24,
                  end: 27,
                  loc: {
                    start: {
                      line: 1,
                      column: 24
                    },
                    end: {
                      line: 1,
                      column: 27
                    }
                  },
                  range: [
                    24,
                    27
                  ],
                  properties: []
                }
              }
            ]
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export function parse() { }": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          declaration: {
            type: "FunctionDeclaration",
            start: 7,
            end: 27,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 27
              }
            },
            range: [
              7,
              27
            ],
            id: {
              type: "Identifier",
              start: 16,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 16
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              range: [
                16,
                21
              ],
              name: "parse"
            },
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 24,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 24
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                24,
                27
              ],
              body: []
            }
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export class Class {}": {
      type: "Program",
      start: 0,
      end: 21,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 21
        }
      },
      range: [
        0,
        21
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 21,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 21
            }
          },
          range: [
            0,
            21
          ],
          declaration: {
            type: "ClassDeclaration",
            start: 7,
            end: 21,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 21
              }
            },
            range: [
              7,
              21
            ],
            id: {
              type: "Identifier",
              start: 13,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 13
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                13,
                18
              ],
              name: "Class"
            },
            superClass: null,
            body: {
              type: "ClassBody",
              start: 19,
              end: 21,
              loc: {
                start: {
                  line: 1,
                  column: 19
                },
                end: {
                  line: 1,
                  column: 21
                }
              },
              range: [
                19,
                21
              ],
              body: []
            }
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export default 42": {
      type: "Program",
      start: 0,
      end: 17,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 17
        }
      },
      range: [
        0,
        17
      ],
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 17,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 17
            }
          },
          range: [
            0,
            17
          ],
          declaration: {
            type: "Literal",
            start: 15,
            end: 17,
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 17
              }
            },
            range: [
              15,
              17
            ],
            value: 42,
            raw: "42"
          }
        }
      ],
      sourceType: "module"
    },
    "export default function () {}": {
      type: "Program",
      start: 0,
      end: 29,
      range: [
        0,
        29
      ],
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 29,
          range: [
            0,
            29
          ],
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 29,
            range: [
              15,
              29
            ],
            id: null,
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 27,
              end: 29,
              range: [
                27,
                29
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default function f() {}": {
      type: "Program",
      start: 0,
      end: 30,
      range: [
        0,
        30
      ],
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 30,
          range: [
            0,
            30
          ],
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 30,
            range: [
              15,
              30
            ],
            id: {
              type: "Identifier",
              start: 24,
              end: 25,
              range: [
                24,
                25
              ],
              name: "f"
            },
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 28,
              end: 30,
              range: [
                28,
                30
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default class {}": {
      type: "Program",
      start: 0,
      end: 23,
      range: [
        0,
        23
      ],
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 23,
          range: [
            0,
            23
          ],
          declaration: {
            type: "ClassDeclaration",
            start: 15,
            end: 23,
            range: [
              15,
              23
            ],
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 21,
              end: 23,
              range: [
                21,
                23
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default class A {}": {
      type: "Program",
      start: 0,
      end: 25,
      range: [
        0,
        25
      ],
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 25,
          range: [
            0,
            25
          ],
          declaration: {
            type: "ClassDeclaration",
            start: 15,
            end: 25,
            range: [
              15,
              25
            ],
            id: {
              type: "Identifier",
              start: 21,
              end: 22,
              range: [
                21,
                22
              ],
              name: "A"
            },
            superClass: null,
            body: {
              type: "ClassBody",
              start: 23,
              end: 25,
              range: [
                23,
                25
              ],
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default (class{});": {
      type: "Program",
      start: 0,
      end: 25,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 25,
          declaration: {
            type: "ClassExpression",
            start: 16,
            end: 23,
            id: null,
            superClass: null,
            body: {
              type: "ClassBody",
              start: 21,
              end: 23,
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export * from \"crypto\"": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ExportAllDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          source: {
            type: "Literal",
            start: 14,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              14,
              22
            ],
            value: "crypto",
            raw: "\"crypto\""
          }
        }
      ],
      sourceType: "module"
    },
    "export { encrypt }": {
      type: "Program",
      start: 0,
      end: 18,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 18
        }
      },
      range: [
        0,
        18
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 18,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 18
            }
          },
          range: [
            0,
            18
          ],
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                9,
                16
              ],
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              exported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              }
            }
          ],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export { encrypt, decrypt }": {
      type: "Program",
      start: 0,
      end: 27,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 27
        }
      },
      range: [
        0,
        27
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 27,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 27
            }
          },
          range: [
            0,
            27
          ],
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                9,
                16
              ],
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              exported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              }
            },
            {
              type: "ExportSpecifier",
              start: 18,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              range: [
                18,
                25
              ],
              local: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  18,
                  25
                ],
                name: "decrypt"
              },
              exported: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  18,
                  25
                ],
                name: "decrypt"
              }
            }
          ],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export { encrypt as default }": {
      type: "Program",
      start: 0,
      end: 29,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 29
        }
      },
      range: [
        0,
        29
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 29,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 29
            }
          },
          range: [
            0,
            29
          ],
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 27,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 27
                }
              },
              range: [
                9,
                27
              ],
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              exported: {
                type: "Identifier",
                start: 20,
                end: 27,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 27
                  }
                },
                range: [
                  20,
                  27
                ],
                name: "default"
              }
            }
          ],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export { encrypt, decrypt as dec }": {
      type: "Program",
      start: 0,
      end: 34,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 34
        }
      },
      range: [
        0,
        34
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 34,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 34
            }
          },
          range: [
            0,
            34
          ],
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                9,
                16
              ],
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              exported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              }
            },
            {
              type: "ExportSpecifier",
              start: 18,
              end: 32,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 32
                }
              },
              range: [
                18,
                32
              ],
              local: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  18,
                  25
                ],
                name: "decrypt"
              },
              exported: {
                type: "Identifier",
                start: 29,
                end: 32,
                loc: {
                  start: {
                    line: 1,
                    column: 29
                  },
                  end: {
                    line: 1,
                    column: 32
                  }
                },
                range: [
                  29,
                  32
                ],
                name: "dec"
              }
            }
          ],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export { default } from \"other\"": {
      type: "Program",
      start: 0,
      end: 31,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 31
        }
      },
      range: [
        0,
        31
      ],
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 31,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 31
            }
          },
          range: [
            0,
            31
          ],
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                9,
                16
              ],
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "default"
              },
              exported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "default"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 24,
            end: 31,
            loc: {
              start: {
                line: 1,
                column: 24
              },
              end: {
                line: 1,
                column: 31
              }
            },
            range: [
              24,
              31
            ],
            value: "other",
            raw: "\"other\""
          }
        }
      ],
      sourceType: "module"
    },
    "import \"jquery\"": {
      type: "Program",
      start: 0,
      end: 15,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      },
      range: [
        0,
        15
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 15,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 15
            }
          },
          range: [
            0,
            15
          ],
          specifiers: [],
          source: {
            type: "Literal",
            start: 7,
            end: 15,
            loc: {
              start: {
                line: 1,
                column: 7
              },
              end: {
                line: 1,
                column: 15
              }
            },
            range: [
              7,
              15
            ],
            value: "jquery",
            raw: "\"jquery\""
          },
          kind: ""
        }
      ],
      sourceType: "module"
    },
    "import $ from \"jquery\"": {
      type: "Program",
      start: 0,
      end: 22,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 22
        }
      },
      range: [
        0,
        22
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 22,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 22
            }
          },
          range: [
            0,
            22
          ],
          specifiers: [
            {
              type: "ImportDefaultSpecifier",
              start: 7,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              range: [
                7,
                8
              ],
              local: {
                type: "Identifier",
                start: 7,
                end: 8,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 8
                  }
                },
                range: [
                  7,
                  8
                ],
                name: "$"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 14,
            end: 22,
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 22
              }
            },
            range: [
              14,
              22
            ],
            value: "jquery",
            raw: "\"jquery\""
          }
        }
      ],
      sourceType: "module"
    },
    "import { encrypt, decrypt } from \"crypto\"": {
      type: "Program",
      start: 0,
      end: 41,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 41
        }
      },
      range: [
        0,
        41
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 41,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 41
            }
          },
          range: [
            0,
            41
          ],
          specifiers: [
            {
              type: "ImportSpecifier",
              start: 9,
              end: 16,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 16
                }
              },
              range: [
                9,
                16
              ],
              imported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              }
            },
            {
              type: "ImportSpecifier",
              start: 18,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 18
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              range: [
                18,
                25
              ],
              imported: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  18,
                  25
                ],
                name: "decrypt"
              },
              local: {
                type: "Identifier",
                start: 18,
                end: 25,
                loc: {
                  start: {
                    line: 1,
                    column: 18
                  },
                  end: {
                    line: 1,
                    column: 25
                  }
                },
                range: [
                  18,
                  25
                ],
                name: "decrypt"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 33,
            end: 41,
            loc: {
              start: {
                line: 1,
                column: 33
              },
              end: {
                line: 1,
                column: 41
              }
            },
            range: [
              33,
              41
            ],
            value: "crypto",
            raw: "\"crypto\""
          }
        }
      ],
      sourceType: "module"
    },
    "import { encrypt as enc } from \"crypto\"": {
      type: "Program",
      start: 0,
      end: 39,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 39
        }
      },
      range: [
        0,
        39
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 39,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 39
            }
          },
          range: [
            0,
            39
          ],
          specifiers: [
            {
              type: "ImportSpecifier",
              start: 9,
              end: 23,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 23
                }
              },
              range: [
                9,
                23
              ],
              imported: {
                type: "Identifier",
                start: 9,
                end: 16,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 16
                  }
                },
                range: [
                  9,
                  16
                ],
                name: "encrypt"
              },
              local: {
                type: "Identifier",
                start: 20,
                end: 23,
                loc: {
                  start: {
                    line: 1,
                    column: 20
                  },
                  end: {
                    line: 1,
                    column: 23
                  }
                },
                range: [
                  20,
                  23
                ],
                name: "enc"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 31,
            end: 39,
            loc: {
              start: {
                line: 1,
                column: 31
              },
              end: {
                line: 1,
                column: 39
              }
            },
            range: [
              31,
              39
            ],
            value: "crypto",
            raw: "\"crypto\""
          }
        }
      ],
      sourceType: "module"
    },
    "import crypto, { decrypt, encrypt as enc } from \"crypto\"": {
      type: "Program",
      start: 0,
      end: 56,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 56
        }
      },
      range: [
        0,
        56
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 56,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 56
            }
          },
          range: [
            0,
            56
          ],
          specifiers: [
            {
              type: "ImportDefaultSpecifier",
              start: 7,
              end: 13,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 13
                }
              },
              range: [
                7,
                13
              ],
              local: {
                type: "Identifier",
                start: 7,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 7
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                range: [
                  7,
                  13
                ],
                name: "crypto"
              }
            },
            {
              type: "ImportSpecifier",
              start: 17,
              end: 24,
              loc: {
                start: {
                  line: 1,
                  column: 17
                },
                end: {
                  line: 1,
                  column: 24
                }
              },
              range: [
                17,
                24
              ],
              imported: {
                type: "Identifier",
                start: 17,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                range: [
                  17,
                  24
                ],
                name: "decrypt"
              },
              local: {
                type: "Identifier",
                start: 17,
                end: 24,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 24
                  }
                },
                range: [
                  17,
                  24
                ],
                name: "decrypt"
              }
            },
            {
              type: "ImportSpecifier",
              start: 26,
              end: 40,
              loc: {
                start: {
                  line: 1,
                  column: 26
                },
                end: {
                  line: 1,
                  column: 40
                }
              },
              range: [
                26,
                40
              ],
              imported: {
                type: "Identifier",
                start: 26,
                end: 33,
                loc: {
                  start: {
                    line: 1,
                    column: 26
                  },
                  end: {
                    line: 1,
                    column: 33
                  }
                },
                range: [
                  26,
                  33
                ],
                name: "encrypt"
              },
              local: {
                type: "Identifier",
                start: 37,
                end: 40,
                loc: {
                  start: {
                    line: 1,
                    column: 37
                  },
                  end: {
                    line: 1,
                    column: 40
                  }
                },
                range: [
                  37,
                  40
                ],
                name: "enc"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 48,
            end: 56,
            loc: {
              start: {
                line: 1,
                column: 48
              },
              end: {
                line: 1,
                column: 56
              }
            },
            range: [
              48,
              56
            ],
            value: "crypto",
            raw: "\"crypto\""
          }
        }
      ],
      sourceType: "module"
    },
    "import { null as nil } from \"bar\"": {
      type: "Program",
      start: 0,
      end: 33,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 33
        }
      },
      range: [
        0,
        33
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 33,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 33
            }
          },
          range: [
            0,
            33
          ],
          specifiers: [
            {
              type: "ImportSpecifier",
              start: 9,
              end: 20,
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 20
                }
              },
              range: [
                9,
                20
              ],
              imported: {
                type: "Identifier",
                start: 9,
                end: 13,
                loc: {
                  start: {
                    line: 1,
                    column: 9
                  },
                  end: {
                    line: 1,
                    column: 13
                  }
                },
                range: [
                  9,
                  13
                ],
                name: "null"
              },
              local: {
                type: "Identifier",
                start: 17,
                end: 20,
                loc: {
                  start: {
                    line: 1,
                    column: 17
                  },
                  end: {
                    line: 1,
                    column: 20
                  }
                },
                range: [
                  17,
                  20
                ],
                name: "nil"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 28,
            end: 33,
            loc: {
              start: {
                line: 1,
                column: 28
              },
              end: {
                line: 1,
                column: 33
              }
            },
            range: [
              28,
              33
            ],
            value: "bar",
            raw: "\"bar\""
          }
        }
      ],
      sourceType: "module"
    },
    "import * as crypto from \"crypto\"": {
      type: "Program",
      start: 0,
      end: 32,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 32
        }
      },
      range: [
        0,
        32
      ],
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 32,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 32
            }
          },
          range: [
            0,
            32
          ],
          specifiers: [
            {
              type: "ImportNamespaceSpecifier",
              start: 7,
              end: 18,
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 18
                }
              },
              range: [
                7,
                18
              ],
              local: {
                type: "Identifier",
                start: 12,
                end: 18,
                loc: {
                  start: {
                    line: 1,
                    column: 12
                  },
                  end: {
                    line: 1,
                    column: 18
                  }
                },
                range: [
                  12,
                  18
                ],
                name: "crypto"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 24,
            end: 32,
            loc: {
              start: {
                line: 1,
                column: 24
              },
              end: {
                line: 1,
                column: 32
              }
            },
            range: [
              24,
              32
            ],
            value: "crypto",
            raw: "\"crypto\""
          }
        }
      ],
      sourceType: "module"
    },
    "(function* () { yield v })": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 26
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 26
            }
          },
          range: [
            0,
            26
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 25
              }
            },
            range: [
              1,
              25
            ],
            id: null,
            params: [],
            generator: true,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 14,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 1,
                  column: 25
                }
              },
              range: [
                14,
                25
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 16,
                  end: 23,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 23
                    }
                  },
                  range: [
                    16,
                    23
                  ],
                  expression: {
                    type: "YieldExpression",
                    start: 16,
                    end: 23,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 23
                      }
                    },
                    range: [
                      16,
                      23
                    ],
                    delegate: false,
                    argument: {
                      type: "Identifier",
                      start: 22,
                      end: 23,
                      loc: {
                        start: {
                          line: 1,
                          column: 22
                        },
                        end: {
                          line: 1,
                          column: 23
                        }
                      },
                      range: [
                        22,
                        23
                      ],
                      name: "v"
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "module"
    },
    "(function* () { yield\nv })": {
      type: "Program",
      start: 0,
      end: 26,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 4
        }
      },
      range: [
        0,
        26
      ],
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 26,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 2,
              column: 4
            }
          },
          range: [
            0,
            26
          ],
          expression: {
            type: "FunctionExpression",
            start: 1,
            end: 25,
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 2,
                column: 3
              }
            },
            range: [
              1,
              25
            ],
            id: null,
            params: [],
            generator: true,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 14,
              end: 25,
              loc: {
                start: {
                  line: 1,
                  column: 14
                },
                end: {
                  line: 2,
                  column: 3
                }
              },
              range: [
                14,
                25
              ],
              body: [
                {
                  type: "ExpressionStatement",
                  start: 16,
                  end: 21,
                  loc: {
                    start: {
                      line: 1,
                      column: 16
                    },
                    end: {
                      line: 1,
                      column: 21
                    }
                  },
                  range: [
                    16,
                    21
                  ],
                  expression: {
                    type: "YieldExpression",
                    start: 16,
                    end: 21,
                    loc: {
                      start: {
                        line: 1,
                        column: 16
                      },
                      end: {
                        line: 1,
                        column: 21
                      }
                    },
                    range: [
                      16,
                      21
                    ],
                    delegate: false,
                    argument: null
                  }
                },
                {
                  type: "ExpressionStatement",
                  start: 22,
                  end: 23,
                  loc: {
                    start: {
                      line: 2,
                      column: 0
                    },
                    end: {
                      line: 2,
                      column: 1
                    }
                  },
                  range: [
                    22,
                    23
                  ],
                  expression: {
                    type: "Identifier",
                    start: 22,
                    end: 23,
                    loc: {
                      start: {
                        line: 2,
                        column: 0
                      },
                      end: {
                        line: 2,
                        column: 1
                      }
                    },
                    range: [
                      22,
                      23
                    ],
                    name: "v"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "module"
    },
    "import foo, * as bar from 'baz';": {
      type: "Program",
      start: 0,
      end: 32,
      body: [
        {
          type: "ImportDeclaration",
          start: 0,
          end: 32,
          specifiers: [
            {
              type: "ImportDefaultSpecifier",
              start: 7,
              end: 10,
              local: {
                type: "Identifier",
                start: 7,
                end: 10,
                name: "foo"
              }
            },
            {
              type: "ImportNamespaceSpecifier",
              start: 12,
              end: 20,
              local: {
                type: "Identifier",
                start: 17,
                end: 20,
                name: "bar"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 26,
            end: 31,
            value: "baz",
            raw: "'baz'"
          }
        }
      ],
      sourceType: "module"
    },
    "export default function foo() {} false": {
      type: "Program",
      start: 0,
      end: 38,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 32,
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 32,
            id: {
              type: "Identifier",
              start: 24,
              end: 27,
              name: "foo"
            },
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 30,
              end: 32,
              body: []
            }
          }
        },
        {
          type: "ExpressionStatement",
          start: 33,
          end: 38,
          expression: {
            type: "Literal",
            start: 33,
            end: 38,
            value: false,
            raw: "false"
          }
        }
      ],
      sourceType: "module"
    },
    "export default /foo/": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 20,
          declaration: {
            type: "Literal",
            start: 15,
            end: 20,
            regex: {
              pattern: "foo",
              flags: ""
            },
            value: {},
            raw: "/foo/"
          }
        }
      ],
      sourceType: "module"
    },
    "export default class Foo {}++x": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 27,
          declaration: {
            type: "ClassDeclaration",
            start: 15,
            end: 27,
            id: {
              type: "Identifier",
              start: 21,
              end: 24,
              name: "Foo"
            },
            superClass: null,
            body: {
              type: "ClassBody",
              start: 25,
              end: 27,
              body: []
            }
          }
        },
        {
          type: "ExpressionStatement",
          start: 27,
          end: 30,
          expression: {
            type: "UpdateExpression",
            start: 27,
            end: 30,
            operator: "++",
            prefix: true,
            argument: {
              type: "Identifier",
              start: 29,
              end: 30,
              name: "x"
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export { x as y } from './y.js';\nexport { x as z } from './z.js';": {
      type: "Program",
      start: 0,
      end: 65,
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 32,
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 15,
              local: {
                type: "Identifier",
                start: 9,
                end: 10,
                name: "x"
              },
              exported: {
                type: "Identifier",
                start: 14,
                end: 15,
                name: "y"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 23,
            end: 31,
            value: "./y.js",
            raw: "'./y.js'"
          }
        },
        {
          type: "ExportNamedDeclaration",
          start: 33,
          end: 65,
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 42,
              end: 48,
              local: {
                type: "Identifier",
                start: 42,
                end: 43,
                name: "x"
              },
              exported: {
                type: "Identifier",
                start: 47,
                end: 48,
                name: "z"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 56,
            end: 64,
            value: "./z.js",
            raw: "'./z.js'"
          }
        }
      ],
      sourceType: "module"
    },
    "export { default as y } from './y.js';\nexport default 42;": {
      type: "Program",
      start: 0,
      end: 57,
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 38,
          declaration: null,
          specifiers: [
            {
              type: "ExportSpecifier",
              start: 9,
              end: 21,
              local: {
                type: "Identifier",
                start: 9,
                end: 16,
                name: "default"
              },
              exported: {
                type: "Identifier",
                start: 20,
                end: 21,
                name: "y"
              }
            }
          ],
          source: {
            type: "Literal",
            start: 29,
            end: 37,
            value: "./y.js",
            raw: "'./y.js'"
          }
        },
        {
          type: "ExportDefaultDeclaration",
          start: 39,
          end: 57,
          declaration: {
            type: "Literal",
            start: 54,
            end: 56,
            value: 42,
            raw: "42"
          }
        }
      ],
      sourceType: "module"
    },
    "export default function(x) {};": {
      type: "Program",
      start: 0,
      end: 30,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 29,
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 29,
            id: null,
            params: [
              {
                type: "Identifier",
                start: 24,
                end: 25,
                name: "x"
              }
            ],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 27,
              end: 29,
              body: []
            }
          }
        },
        {
          type: "EmptyStatement",
          start: 29,
          end: 30
        }
      ],
      sourceType: "module"
    }
  },
  "es6-parens-loose": {
    "() => 42": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "ArrowFunctionExpression",
            start: 0,
            end: 8,
            id: null,
            params: [],
            generator: false,
            expression: true,
            body: {
              type: "Literal",
              start: 6,
              end: 8,
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    }
  },
  "es7-loose": {
    "x **= 42": {
      type: "Program",
      start: 0,
      end: 8,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 8
            }
          },
          expression: {
            type: "AssignmentExpression",
            start: 0,
            end: 8,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 8
              }
            },
            operator: "**=",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Literal",
              start: 6,
              end: 8,
              loc: {
                start: {
                  line: 1,
                  column: 6
                },
                end: {
                  line: 1,
                  column: 8
                }
              },
              value: 42,
              raw: "42"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "x ** y": {
      type: "Program",
      start: 0,
      end: 6,
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      },
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 6,
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 6
            }
          },
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 6,
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 6
              }
            },
            operator: "**",
            left: {
              type: "Identifier",
              start: 0,
              end: 1,
              loc: {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: 1,
                  column: 1
                }
              },
              name: "x"
            },
            right: {
              type: "Identifier",
              start: 5,
              end: 6,
              loc: {
                start: {
                  line: 1,
                  column: 5
                },
                end: {
                  line: 1,
                  column: 6
                }
              },
              name: "y"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "3 ** 5 * 1": {
      type: "Program",
      start: 0,
      end: 10,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 10,
            left: {
              type: "BinaryExpression",
              start: 0,
              end: 6,
              operator: "**",
              left: {
                type: "Literal",
                start: 0,
                end: 1,
                value: 3,
                raw: "3"
              },
              right: {
                type: "Literal",
                start: 5,
                end: 6,
                value: 5,
                raw: "5"
              }
            },
            operator: "*",
            right: {
              type: "Literal",
              start: 9,
              end: 10,
              value: 1,
              raw: "1"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "3 % 5 ** 1": {
      type: "Program",
      start: 0,
      end: 10,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 10,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 10,
            left: {
              type: "Literal",
              start: 0,
              end: 1,
              value: 3,
              raw: "3"
            },
            operator: "%",
            right: {
              type: "BinaryExpression",
              start: 4,
              end: 10,
              operator: "**",
              left: {
                type: "Literal",
                start: 4,
                end: 5,
                value: 5,
                raw: "5"
              },
              right: {
                type: "Literal",
                start: 9,
                end: 10,
                value: 1,
                raw: "1"
              }
            }
          }
        }
      ],
      sourceType: "script"
    },
    "(-5) ** y": {
      type: "Program",
      start: 0,
      end: 9,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 9,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 9,
            operator: "**",
            left: {
              type: "UnaryExpression",
              start: 1,
              end: 3,
              operator: "-",
              prefix: true,
              argument: {
                type: "Literal",
                start: 2,
                end: 3,
                value: 5,
                raw: "5"
              }
            },
            right: {
              type: "Identifier",
              start: 8,
              end: 9,
              name: "y"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "++a ** 2": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 8,
            operator: "**",
            left: {
              type: "UpdateExpression",
              start: 0,
              end: 3,
              operator: "++",
              prefix: true,
              argument: {
                type: "Identifier",
                start: 2,
                end: 3,
                name: "a"
              }
            },
            right: {
              type: "Literal",
              start: 7,
              end: 8,
              value: 2,
              raw: "2"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "a-- ** 2": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "BinaryExpression",
            start: 0,
            end: 8,
            operator: "**",
            left: {
              type: "UpdateExpression",
              start: 0,
              end: 3,
              operator: "--",
              prefix: false,
              argument: {
                type: "Identifier",
                start: 0,
                end: 1,
                name: "a"
              }
            },
            right: {
              type: "Literal",
              start: 7,
              end: 8,
              value: 2,
              raw: "2"
            }
          }
        }
      ],
      sourceType: "script"
    },
    "function foo(a) { 'use strict'; }": {
      type: "Program",
      start: 0,
      end: 33,
      body: [
        {
          type: "FunctionDeclaration",
          start: 0,
          end: 33,
          id: {
            type: "Identifier",
            start: 9,
            end: 12,
            name: "foo"
          },
          params: [
            {
              type: "Identifier",
              start: 13,
              end: 14,
              name: "a"
            }
          ],
          generator: false,
          expression: false,
          body: {
            type: "BlockStatement",
            start: 16,
            end: 33,
            body: [
              {
                type: "ExpressionStatement",
                start: 18,
                end: 31,
                expression: {
                  type: "Literal",
                  start: 18,
                  end: 30,
                  value: "use strict",
                  raw: "'use strict'"
                }
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "if (x) function f() {}": {
      type: "Program",
      start: 0,
      end: 22,
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 22,
          test: {
            type: "Identifier",
            start: 4,
            end: 5,
            name: "x"
          },
          consequent: {
            type: "FunctionDeclaration",
            start: 7,
            end: 22,
            id: {
              type: "Identifier",
              start: 16,
              end: 17,
              name: "f"
            },
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 20,
              end: 22,
              body: []
            }
          },
          alternate: null
        }
      ],
      sourceType: "script"
    },
    "if (x) function f() { return 23; } else function f() { return 42; }": {
      type: "Program",
      start: 0,
      end: 67,
      body: [
        {
          type: "IfStatement",
          start: 0,
          end: 67,
          test: {
            type: "Identifier",
            start: 4,
            end: 5,
            name: "x"
          },
          consequent: {
            type: "FunctionDeclaration",
            start: 7,
            end: 34,
            id: {
              type: "Identifier",
              start: 16,
              end: 17,
              name: "f"
            },
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 20,
              end: 34,
              body: [
                {
                  type: "ReturnStatement",
                  start: 22,
                  end: 32,
                  argument: {
                    type: "Literal",
                    start: 29,
                    end: 31,
                    value: 23,
                    raw: "23"
                  }
                }
              ]
            }
          },
          alternate: {
            type: "FunctionDeclaration",
            start: 40,
            end: 67,
            id: {
              type: "Identifier",
              start: 49,
              end: 50,
              name: "f"
            },
            params: [],
            generator: false,
            expression: false,
            body: {
              type: "BlockStatement",
              start: 53,
              end: 67,
              body: [
                {
                  type: "ReturnStatement",
                  start: 55,
                  end: 65,
                  argument: {
                    type: "Literal",
                    start: 62,
                    end: 64,
                    value: 42,
                    raw: "42"
                  }
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    }
  },
  "es8-module-loose": {
    "export async function foo() { }": {
      type: "Program",
      start: 0,
      end: 31,
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 31,
          declaration: {
            type: "FunctionDeclaration",
            start: 7,
            end: 31,
            id: {
              type: "Identifier",
              start: 22,
              end: 25,
              name: "foo"
            },
            params: [],
            generator: false,
            expression: false,
            async: true,
            body: {
              type: "BlockStatement",
              start: 28,
              end: 31,
              body: []
            }
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    },
    "export default async function() { }": {
      type: "Program",
      start: 0,
      end: 35,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 35,
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 35,
            id: null,
            params: [],
            generator: false,
            expression: false,
            async: true,
            body: {
              type: "BlockStatement",
              start: 32,
              end: 35,
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default (async function() { })": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 37,
          declaration: {
            type: "FunctionExpression",
            start: 16,
            end: 36,
            id: null,
            params: [],
            generator: false,
            expression: false,
            async: true,
            body: {
              type: "BlockStatement",
              start: 33,
              end: 36,
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default function foo(a,) { }": {
      type: "Program",
      start: 0,
      end: 35,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 35,
          declaration: {
            type: "FunctionDeclaration",
            start: 15,
            end: 35,
            id: {
              type: "Identifier",
              start: 24,
              end: 27,
              name: "foo"
            },
            params: [
              {
                type: "Identifier",
                start: 28,
                end: 29,
                name: "a"
              }
            ],
            generator: false,
            expression: false,
            async: false,
            body: {
              type: "BlockStatement",
              start: 32,
              end: 35,
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export default (function foo(a,) { })": {
      type: "Program",
      start: 0,
      end: 37,
      body: [
        {
          type: "ExportDefaultDeclaration",
          start: 0,
          end: 37,
          declaration: {
            type: "FunctionExpression",
            start: 16,
            end: 36,
            id: {
              type: "Identifier",
              start: 25,
              end: 28,
              name: "foo"
            },
            params: [
              {
                type: "Identifier",
                start: 29,
                end: 30,
                name: "a"
              }
            ],
            generator: false,
            expression: false,
            async: false,
            body: {
              type: "BlockStatement",
              start: 33,
              end: 36,
              body: []
            }
          }
        }
      ],
      sourceType: "module"
    },
    "export function foo(a,) { }": {
      type: "Program",
      start: 0,
      end: 27,
      body: [
        {
          type: "ExportNamedDeclaration",
          start: 0,
          end: 27,
          declaration: {
            type: "FunctionDeclaration",
            start: 7,
            end: 27,
            id: {
              type: "Identifier",
              start: 16,
              end: 19,
              name: "foo"
            },
            params: [
              {
                type: "Identifier",
                start: 20,
                end: 21,
                name: "a"
              }
            ],
            generator: false,
            expression: false,
            async: false,
            body: {
              type: "BlockStatement",
              start: 24,
              end: 27,
              body: []
            }
          },
          specifiers: [],
          source: null
        }
      ],
      sourceType: "module"
    }
  },
  "es7-module-loose": {},
  "es9-loose": {
    "`foo`": {
      type: "Program",
      start: 0,
      end: 5,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 5,
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 5,
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 4,
                value: {
                  raw: "foo",
                  cooked: "foo"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`foo\\u25a0`": {
      type: "Program",
      start: 0,
      end: 11,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 11,
            expressions: [],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 10,
                value: {
                  raw: "foo\\u25a0",
                  cooked: "foo■"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "`foo${bar}\\u25a0`": {
      type: "Program",
      start: 0,
      end: 17,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 17,
          expression: {
            type: "TemplateLiteral",
            start: 0,
            end: 17,
            expressions: [
              {
                type: "Identifier",
                start: 6,
                end: 9,
                name: "bar"
              }
            ],
            quasis: [
              {
                type: "TemplateElement",
                start: 1,
                end: 4,
                value: {
                  raw: "foo",
                  cooked: "foo"
                },
                tail: false
              },
              {
                type: "TemplateElement",
                start: 10,
                end: 16,
                value: {
                  raw: "\\u25a0",
                  cooked: "■"
                },
                tail: true
              }
            ]
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\u25a0`": {
      type: "Program",
      start: 0,
      end: 11,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 11,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 11,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 11,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 10,
                  value: {
                    raw: "\\u25a0",
                    cooked: "■"
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`foo${bar}\\u25a0`": {
      type: "Program",
      start: 0,
      end: 20,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 20,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 20,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 20,
              expressions: [
                {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "bar"
                }
              ],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 7,
                  value: {
                    raw: "foo",
                    cooked: "foo"
                  },
                  tail: false
                },
                {
                  type: "TemplateElement",
                  start: 13,
                  end: 19,
                  value: {
                    raw: "\\u25a0",
                    cooked: "■"
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\unicode`": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 13,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 13,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 12,
                  value: {
                    raw: "\\unicode",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`foo${bar}\\unicode`": {
      type: "Program",
      start: 0,
      end: 22,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 22,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 22,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 22,
              expressions: [
                {
                  type: "Identifier",
                  start: 9,
                  end: 12,
                  name: "bar"
                }
              ],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 7,
                  value: {
                    raw: "foo",
                    cooked: "foo"
                  },
                  tail: false
                },
                {
                  type: "TemplateElement",
                  start: 13,
                  end: 21,
                  value: {
                    raw: "\\unicode",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\u`": {
      type: "Program",
      start: 0,
      end: 7,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 7,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 7,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 7,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 6,
                  value: {
                    raw: "\\u",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\u{`": {
      type: "Program",
      start: 0,
      end: 8,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 8,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 8,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 8,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 7,
                  value: {
                    raw: "\\u{",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\u{abcdx`": {
      type: "Program",
      start: 0,
      end: 13,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 13,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 13,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 13,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 12,
                  value: {
                    raw: "\\u{abcdx",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\u{abcdx}`": {
      type: "Program",
      start: 0,
      end: 14,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 14,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 14,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 14,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 13,
                  value: {
                    raw: "\\u{abcdx}",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    },
    "foo`\\unicode\\\\`": {
      type: "Program",
      start: 0,
      end: 15,
      body: [
        {
          type: "ExpressionStatement",
          start: 0,
          end: 15,
          expression: {
            type: "TaggedTemplateExpression",
            start: 0,
            end: 15,
            tag: {
              type: "Identifier",
              start: 0,
              end: 3,
              name: "foo"
            },
            quasi: {
              type: "TemplateLiteral",
              start: 3,
              end: 15,
              expressions: [],
              quasis: [
                {
                  type: "TemplateElement",
                  start: 4,
                  end: 14,
                  value: {
                    raw: "\\unicode\\\\",
                    cooked: null
                  },
                  tail: true
                }
              ]
            }
          }
        }
      ],
      sourceType: "script"
    }
  }
};

if (typeof module !== 'undefined') module.exports = snapshot;